
DA_F4_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1f0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800c378  0800c378  0000d378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c668  0800c668  0000e0c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c668  0800c668  0000d668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c670  0800c670  0000e0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c670  0800c670  0000d670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c674  0800c674  0000d674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800c678  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0c8  2**0
                  CONTENTS
 10 .bss          00000ac0  200000c8  200000c8  0000e0c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000b88  20000b88  0000e0c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011c39  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002571  00000000  00000000  0001fd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001078  00000000  00000000  000222a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0e  00000000  00000000  00023320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021caa  00000000  00000000  0002402e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150c9  00000000  00000000  00045cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce563  00000000  00000000  0005ada1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129304  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f58  00000000  00000000  00129348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0012e2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c360 	.word	0x0800c360

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	0800c360 	.word	0x0800c360

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b9a0 	b.w	8000ee8 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f83c 	bl	8000c2c <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2lz>:
 8000bc0:	b538      	push	{r3, r4, r5, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	460d      	mov	r5, r1
 8000bca:	f7ff ff2b 	bl	8000a24 <__aeabi_dcmplt>
 8000bce:	b928      	cbnz	r0, 8000bdc <__aeabi_d2lz+0x1c>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bd8:	f000 b80a 	b.w	8000bf0 <__aeabi_d2ulz>
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000be2:	f000 f805 	bl	8000bf0 <__aeabi_d2ulz>
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	bd38      	pop	{r3, r4, r5, pc}
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2ulz>:
 8000bf0:	b5d0      	push	{r4, r6, r7, lr}
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <__aeabi_d2ulz+0x34>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4606      	mov	r6, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	f7ff fca1 	bl	8000540 <__aeabi_dmul>
 8000bfe:	f000 f975 	bl	8000eec <__aeabi_d2uiz>
 8000c02:	4604      	mov	r4, r0
 8000c04:	f7ff fc22 	bl	800044c <__aeabi_ui2d>
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <__aeabi_d2ulz+0x38>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f7ff fc98 	bl	8000540 <__aeabi_dmul>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	4630      	mov	r0, r6
 8000c16:	4639      	mov	r1, r7
 8000c18:	f7ff fada 	bl	80001d0 <__aeabi_dsub>
 8000c1c:	f000 f966 	bl	8000eec <__aeabi_d2uiz>
 8000c20:	4621      	mov	r1, r4
 8000c22:	bdd0      	pop	{r4, r6, r7, pc}
 8000c24:	3df00000 	.word	0x3df00000
 8000c28:	41f00000 	.word	0x41f00000

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	460c      	mov	r4, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14e      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c38:	4694      	mov	ip, r2
 8000c3a:	458c      	cmp	ip, r1
 8000c3c:	4686      	mov	lr, r0
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	d962      	bls.n	8000d0a <__udivmoddi4+0xde>
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	4319      	orrs	r1, r3
 8000c56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5e:	fa1f f68c 	uxth.w	r6, ip
 8000c62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb04 f106 	mul.w	r1, r4, r6
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c82:	f080 8112 	bcs.w	8000eaa <__udivmoddi4+0x27e>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 810f 	bls.w	8000eaa <__udivmoddi4+0x27e>
 8000c8c:	3c02      	subs	r4, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca2:	fb00 f606 	mul.w	r6, r0, r6
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	d90a      	bls.n	8000cc0 <__udivmoddi4+0x94>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb2:	f080 80fc 	bcs.w	8000eae <__udivmoddi4+0x282>
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	f240 80f9 	bls.w	8000eae <__udivmoddi4+0x282>
 8000cbc:	4463      	add	r3, ip
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	1b9b      	subs	r3, r3, r6
 8000cc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	b11d      	cbz	r5, 8000cd2 <__udivmoddi4+0xa6>
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d905      	bls.n	8000ce6 <__udivmoddi4+0xba>
 8000cda:	b10d      	cbz	r5, 8000ce0 <__udivmoddi4+0xb4>
 8000cdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e7f5      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000ce6:	fab3 f183 	clz	r1, r3
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d146      	bne.n	8000d7c <__udivmoddi4+0x150>
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xcc>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f0c0 80f0 	bcc.w	8000ed8 <__udivmoddi4+0x2ac>
 8000cf8:	1a86      	subs	r6, r0, r2
 8000cfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d0e6      	beq.n	8000cd2 <__udivmoddi4+0xa6>
 8000d04:	e9c5 6300 	strd	r6, r3, [r5]
 8000d08:	e7e3      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	f040 8090 	bne.w	8000e30 <__udivmoddi4+0x204>
 8000d10:	eba1 040c 	sub.w	r4, r1, ip
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa1f f78c 	uxth.w	r7, ip
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb08 4416 	mls	r4, r8, r6, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb07 f006 	mul.w	r0, r7, r6
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x11c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x11a>
 8000d40:	4298      	cmp	r0, r3
 8000d42:	f200 80cd 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d46:	4626      	mov	r6, r4
 8000d48:	1a1c      	subs	r4, r3, r0
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d52:	fb08 4410 	mls	r4, r8, r0, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb00 f707 	mul.w	r7, r0, r7
 8000d5e:	429f      	cmp	r7, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x148>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x146>
 8000d6c:	429f      	cmp	r7, r3
 8000d6e:	f200 80b0 	bhi.w	8000ed2 <__udivmoddi4+0x2a6>
 8000d72:	4620      	mov	r0, r4
 8000d74:	1bdb      	subs	r3, r3, r7
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0x9c>
 8000d7c:	f1c1 0620 	rsb	r6, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 f706 	lsr.w	r7, r2, r6
 8000d86:	431f      	orrs	r7, r3
 8000d88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d90:	ea43 030c 	orr.w	r3, r3, ip
 8000d94:	40f4      	lsrs	r4, r6
 8000d96:	fa00 f801 	lsl.w	r8, r0, r1
 8000d9a:	0c38      	lsrs	r0, r7, #16
 8000d9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000da0:	fbb4 fef0 	udiv	lr, r4, r0
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db0:	fb0e f90c 	mul.w	r9, lr, ip
 8000db4:	45a1      	cmp	r9, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	d90a      	bls.n	8000dd2 <__udivmoddi4+0x1a6>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dc2:	f080 8084 	bcs.w	8000ece <__udivmoddi4+0x2a2>
 8000dc6:	45a1      	cmp	r9, r4
 8000dc8:	f240 8081 	bls.w	8000ece <__udivmoddi4+0x2a2>
 8000dcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	eba4 0409 	sub.w	r4, r4, r9
 8000dd6:	fa1f f983 	uxth.w	r9, r3
 8000dda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dde:	fb00 4413 	mls	r4, r0, r3, r4
 8000de2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x1d2>
 8000dee:	193c      	adds	r4, r7, r4
 8000df0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df4:	d267      	bcs.n	8000ec6 <__udivmoddi4+0x29a>
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d965      	bls.n	8000ec6 <__udivmoddi4+0x29a>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e02:	fba0 9302 	umull	r9, r3, r0, r2
 8000e06:	eba4 040c 	sub.w	r4, r4, ip
 8000e0a:	429c      	cmp	r4, r3
 8000e0c:	46ce      	mov	lr, r9
 8000e0e:	469c      	mov	ip, r3
 8000e10:	d351      	bcc.n	8000eb6 <__udivmoddi4+0x28a>
 8000e12:	d04e      	beq.n	8000eb2 <__udivmoddi4+0x286>
 8000e14:	b155      	cbz	r5, 8000e2c <__udivmoddi4+0x200>
 8000e16:	ebb8 030e 	subs.w	r3, r8, lr
 8000e1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e22:	40cb      	lsrs	r3, r1
 8000e24:	431e      	orrs	r6, r3
 8000e26:	40cc      	lsrs	r4, r1
 8000e28:	e9c5 6400 	strd	r6, r4, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e750      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000e30:	f1c2 0320 	rsb	r3, r2, #32
 8000e34:	fa20 f103 	lsr.w	r1, r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e40:	4094      	lsls	r4, r2
 8000e42:	430c      	orrs	r4, r1
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4c:	fa1f f78c 	uxth.w	r7, ip
 8000e50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e54:	fb08 3110 	mls	r1, r8, r0, r3
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5e:	fb00 f107 	mul.w	r1, r0, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x24c>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6e:	d22c      	bcs.n	8000eca <__udivmoddi4+0x29e>
 8000e70:	4299      	cmp	r1, r3
 8000e72:	d92a      	bls.n	8000eca <__udivmoddi4+0x29e>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e80:	fb08 3311 	mls	r3, r8, r1, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb01 f307 	mul.w	r3, r1, r7
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x276>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e98:	d213      	bcs.n	8000ec2 <__udivmoddi4+0x296>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d911      	bls.n	8000ec2 <__udivmoddi4+0x296>
 8000e9e:	3902      	subs	r1, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	1ae4      	subs	r4, r4, r3
 8000ea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea8:	e739      	b.n	8000d1e <__udivmoddi4+0xf2>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	e6f0      	b.n	8000c90 <__udivmoddi4+0x64>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e706      	b.n	8000cc0 <__udivmoddi4+0x94>
 8000eb2:	45c8      	cmp	r8, r9
 8000eb4:	d2ae      	bcs.n	8000e14 <__udivmoddi4+0x1e8>
 8000eb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7a8      	b.n	8000e14 <__udivmoddi4+0x1e8>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	e7ed      	b.n	8000ea2 <__udivmoddi4+0x276>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e799      	b.n	8000dfe <__udivmoddi4+0x1d2>
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e7d4      	b.n	8000e78 <__udivmoddi4+0x24c>
 8000ece:	46d6      	mov	lr, sl
 8000ed0:	e77f      	b.n	8000dd2 <__udivmoddi4+0x1a6>
 8000ed2:	4463      	add	r3, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e74d      	b.n	8000d74 <__udivmoddi4+0x148>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	4623      	mov	r3, r4
 8000edc:	4608      	mov	r0, r1
 8000ede:	e70f      	b.n	8000d00 <__udivmoddi4+0xd4>
 8000ee0:	3e02      	subs	r6, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	e730      	b.n	8000d48 <__udivmoddi4+0x11c>
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__aeabi_d2uiz>:
 8000eec:	004a      	lsls	r2, r1, #1
 8000eee:	d211      	bcs.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ef4:	d211      	bcs.n	8000f1a <__aeabi_d2uiz+0x2e>
 8000ef6:	d50d      	bpl.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000efc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f00:	d40e      	bmi.n	8000f20 <__aeabi_d2uiz+0x34>
 8000f02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f12:	4770      	bx	lr
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	4770      	bx	lr
 8000f1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f1e:	d102      	bne.n	8000f26 <__aeabi_d2uiz+0x3a>
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <delay>:
 *  Created on: Mar 26, 2024
 *      Author: phamt
 */
#include "DelayUs.h"
void delay(unsigned long cycles)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  while(cycles >0)
 8000f34:	e09e      	b.n	8001074 <delay+0x148>
    {
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	bf00      	nop
        asm("nop");asm("nop");
 8001036:	bf00      	nop
 8001038:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	bf00      	nop
        asm("nop");asm("nop");//156 nop
 800106a:	bf00      	nop
 800106c:	bf00      	nop


        //to get 1 uS if delay(1)
  cycles--;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3b01      	subs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
  while(cycles >0)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f47f af5d 	bne.w	8000f36 <delay+0xa>
    }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <M8N_Initialization>:
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_Initialization(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_PRT, sizeof(UBX_CFG_PRT));
 8001090:	221c      	movs	r2, #28
 8001092:	4912      	ldr	r1, [pc, #72]	@ (80010dc <M8N_Initialization+0x50>)
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <M8N_Initialization+0x54>)
 8001096:	f007 fd45 	bl	8008b24 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_PRT, sizeof(UBX_CFG_PRT), HAL_MAX_DELAY);
	HAL_Delay(500);
 800109a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800109e:	f003 ffb1 	bl	8005004 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_MSG, sizeof(UBX_CFG_MSG));
 80010a2:	2210      	movs	r2, #16
 80010a4:	490f      	ldr	r1, [pc, #60]	@ (80010e4 <M8N_Initialization+0x58>)
 80010a6:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <M8N_Initialization+0x54>)
 80010a8:	f007 fd3c 	bl	8008b24 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_MSG, sizeof(UBX_CFG_MSG), HAL_MAX_DELAY);
	HAL_Delay(500);
 80010ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010b0:	f003 ffa8 	bl	8005004 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_RATE, sizeof(UBX_CFG_RATE));
 80010b4:	220e      	movs	r2, #14
 80010b6:	490c      	ldr	r1, [pc, #48]	@ (80010e8 <M8N_Initialization+0x5c>)
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <M8N_Initialization+0x54>)
 80010ba:	f007 fd33 	bl	8008b24 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_RATE, sizeof(UBX_CFG_RATE), HAL_MAX_DELAY);
	HAL_Delay(500);
 80010be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010c2:	f003 ff9f 	bl	8005004 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_CFG, sizeof(UBX_CFG_CFG));
 80010c6:	2215      	movs	r2, #21
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <M8N_Initialization+0x60>)
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <M8N_Initialization+0x54>)
 80010cc:	f007 fd2a 	bl	8008b24 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_CFG, sizeof(UBX_CFG_CFG), HAL_MAX_DELAY);
	HAL_Delay(500);
 80010d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010d4:	f003 ff96 	bl	8005004 <HAL_Delay>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	0800c378 	.word	0x0800c378
 80010e0:	20000864 	.word	0x20000864
 80010e4:	0800c394 	.word	0x0800c394
 80010e8:	0800c3a4 	.word	0x0800c3a4
 80010ec:	0800c3b4 	.word	0x0800c3b4

080010f0 <setupSensor>:
extern float pid_p_gain_altitude;           //Gain setting for the altitude P-controller (default = 1.4).
extern float pid_i_gain_altitude;           //Gain setting for the altitude I-controller (default = 0.2).
extern float pid_d_gain_altitude;

void setupSensor(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    twiSend(address, 0x1E,1); //just send 1 byte that tells MS5611 to reset
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <setupSensor+0x70>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2201      	movs	r2, #1
 80010fc:	211e      	movs	r1, #30
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fd08 	bl	8004b14 <twiSend>
    HAL_Delay(20); //delay 10 mS needed for device to execute reset
 8001104:	2014      	movs	r0, #20
 8001106:	f003 ff7d 	bl	8005004 <HAL_Delay>
    for (int i=1;i<=6;i++)
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	e01e      	b.n	800114e <setupSensor+0x5e>
    {
    twiReceive(address, 0xA0+i*2, 2); //read all 14 bytes for callibration data from PROM
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <setupSensor+0x70>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3350      	adds	r3, #80	@ 0x50
 8001118:	b2db      	uxtb	r3, r3
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2202      	movs	r2, #2
 8001120:	4619      	mov	r1, r3
 8001122:	f003 fd49 	bl	8004bb8 <twiReceive>
    HAL_Delay(5); //at least 40 uS
 8001126:	2005      	movs	r0, #5
 8001128:	f003 ff6c 	bl	8005004 <HAL_Delay>
    calibrationData[i] = buffer[0]<<8|buffer[1]; //pair of bytes goes into each element of callibrationData[i], global variables, 14 uint8_t into 7 uint16_t
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <setupSensor+0x74>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <setupSensor+0x74>)
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	b299      	uxth	r1, r3
 8001140:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <setupSensor+0x78>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i=1;i<=6;i++)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b06      	cmp	r3, #6
 8001152:	dddd      	ble.n	8001110 <setupSensor+0x20>
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000
 8001164:	200001ec 	.word	0x200001ec
 8001168:	200001f4 	.word	0x200001f4
 800116c:	00000000 	.word	0x00000000

08001170 <getPressure>:

int getPressure(void)
{
 8001170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001174:	b0a4      	sub	sp, #144	@ 0x90
 8001176:	af00      	add	r7, sp, #0
	counter_pressure ++;
 8001178:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <getPressure+0x100>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4a3b      	ldr	r2, [pc, #236]	@ (8001270 <getPressure+0x100>)
 8001182:	7013      	strb	r3, [r2, #0]
	if (counter_pressure == 1)
 8001184:	4b3a      	ldr	r3, [pc, #232]	@ (8001270 <getPressure+0x100>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	f040 808c 	bne.w	80012a6 <getPressure+0x136>
	{
		if(temperature_counter == 0)
 800118e:	4b39      	ldr	r3, [pc, #228]	@ (8001274 <getPressure+0x104>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d142      	bne.n	800121c <getPressure+0xac>
		{
			twiReceive(address, 0x00, 3);
 8001196:	4b38      	ldr	r3, [pc, #224]	@ (8001278 <getPressure+0x108>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2203      	movs	r2, #3
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fd0a 	bl	8004bb8 <twiReceive>
			raw_average_temperature_total -= raw_temperature_rotating_memory[average_temperature_mem_location];
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <getPressure+0x10c>)
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <getPressure+0x110>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b35      	ldr	r3, [pc, #212]	@ (8001284 <getPressure+0x114>)
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	1aca      	subs	r2, r1, r3
 80011b6:	4b31      	ldr	r3, [pc, #196]	@ (800127c <getPressure+0x10c>)
 80011b8:	601a      	str	r2, [r3, #0]
			raw_temperature_rotating_memory[average_temperature_mem_location] = buffer[0]<<16|buffer[1]<<8|buffer[2];
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <getPressure+0x118>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	041a      	lsls	r2, r3, #16
 80011c0:	4b31      	ldr	r3, [pc, #196]	@ (8001288 <getPressure+0x118>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	431a      	orrs	r2, r3
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <getPressure+0x118>)
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <getPressure+0x110>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <getPressure+0x114>)
 80011d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			raw_average_temperature_total += raw_temperature_rotating_memory[average_temperature_mem_location];
 80011da:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <getPressure+0x110>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <getPressure+0x114>)
 80011e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <getPressure+0x10c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	441a      	add	r2, r3
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <getPressure+0x10c>)
 80011ee:	601a      	str	r2, [r3, #0]
			average_temperature_mem_location++;
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <getPressure+0x110>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <getPressure+0x110>)
 80011fa:	7013      	strb	r3, [r2, #0]
			if (average_temperature_mem_location == 5)average_temperature_mem_location = 0;
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <getPressure+0x110>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d102      	bne.n	800120a <getPressure+0x9a>
 8001204:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <getPressure+0x110>)
 8001206:	2300      	movs	r3, #0
 8001208:	7013      	strb	r3, [r2, #0]
			raw_temperature = raw_average_temperature_total / 5;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <getPressure+0x10c>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <getPressure+0x11c>)
 8001210:	fba3 2302 	umull	r2, r3, r3, r2
 8001214:	089a      	lsrs	r2, r3, #2
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <getPressure+0x120>)
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e013      	b.n	8001244 <getPressure+0xd4>
		}
		else
		{
			twiReceive(address, 0x00, 3);
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <getPressure+0x108>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2203      	movs	r2, #3
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fcc7 	bl	8004bb8 <twiReceive>
			raw_pressure = buffer[0]<<16|buffer[1]<<8|buffer[2];
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <getPressure+0x118>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	041a      	lsls	r2, r3, #16
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <getPressure+0x118>)
 8001232:	785b      	ldrb	r3, [r3, #1]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	431a      	orrs	r2, r3
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <getPressure+0x118>)
 800123a:	789b      	ldrb	r3, [r3, #2]
 800123c:	4313      	orrs	r3, r2
 800123e:	461a      	mov	r2, r3
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <getPressure+0x124>)
 8001242:	601a      	str	r2, [r3, #0]
		}
		temperature_counter ++;        //Increase the temperature_counter variable.
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <getPressure+0x104>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <getPressure+0x104>)
 800124e:	7013      	strb	r3, [r2, #0]
		if (temperature_counter == 20)
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <getPressure+0x104>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b14      	cmp	r3, #20
 8001256:	d11f      	bne.n	8001298 <getPressure+0x128>
		{
			temperature_counter = 0;
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <getPressure+0x104>)
 800125a:	2300      	movs	r3, #0
 800125c:	7013      	strb	r3, [r2, #0]
			twiSend(address, 0x54,1);
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <getPressure+0x108>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	2154      	movs	r1, #84	@ 0x54
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fc54 	bl	8004b14 <twiSend>
 800126c:	e01b      	b.n	80012a6 <getPressure+0x136>
 800126e:	bf00      	nop
 8001270:	200000e4 	.word	0x200000e4
 8001274:	200000e5 	.word	0x200000e5
 8001278:	20000000 	.word	0x20000000
 800127c:	20000108 	.word	0x20000108
 8001280:	200000e6 	.word	0x200000e6
 8001284:	200000f0 	.word	0x200000f0
 8001288:	200001ec 	.word	0x200001ec
 800128c:	cccccccd 	.word	0xcccccccd
 8001290:	200000ec 	.word	0x200000ec
 8001294:	200000e8 	.word	0x200000e8
		}
		else twiSend(address, 0x44,1);
 8001298:	4b91      	ldr	r3, [pc, #580]	@ (80014e0 <getPressure+0x370>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	2144      	movs	r1, #68	@ 0x44
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fc37 	bl	8004b14 <twiSend>
	}

	if (counter_pressure == 2)
 80012a6:	4b8f      	ldr	r3, [pc, #572]	@ (80014e4 <getPressure+0x374>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	f040 8331 	bne.w	8001912 <getPressure+0x7a2>
	{
		dT = raw_temperature - ((int)calibrationData[5] << 8);
 80012b0:	4b8d      	ldr	r3, [pc, #564]	@ (80014e8 <getPressure+0x378>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b8d      	ldr	r3, [pc, #564]	@ (80014ec <getPressure+0x37c>)
 80012b6:	895b      	ldrh	r3, [r3, #10]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	4b8c      	ldr	r3, [pc, #560]	@ (80014f0 <getPressure+0x380>)
 80012c0:	601a      	str	r2, [r3, #0]
		TEMP = (2000 + (((int64_t)dT * (int64_t)calibrationData[6]) >> 23));
 80012c2:	4b8b      	ldr	r3, [pc, #556]	@ (80014f0 <getPressure+0x380>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	17da      	asrs	r2, r3, #31
 80012c8:	469a      	mov	sl, r3
 80012ca:	4693      	mov	fp, r2
 80012cc:	4b87      	ldr	r3, [pc, #540]	@ (80014ec <getPressure+0x37c>)
 80012ce:	899b      	ldrh	r3, [r3, #12]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2200      	movs	r2, #0
 80012d4:	4698      	mov	r8, r3
 80012d6:	4691      	mov	r9, r2
 80012d8:	fb08 f20b 	mul.w	r2, r8, fp
 80012dc:	fb0a f309 	mul.w	r3, sl, r9
 80012e0:	4413      	add	r3, r2
 80012e2:	fbaa 4508 	umull	r4, r5, sl, r8
 80012e6:	442b      	add	r3, r5
 80012e8:	461d      	mov	r5, r3
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	0de2      	lsrs	r2, r4, #23
 80012f4:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 80012f8:	15eb      	asrs	r3, r5, #23
 80012fa:	4613      	mov	r3, r2
 80012fc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001300:	461a      	mov	r2, r3
 8001302:	4b7c      	ldr	r3, [pc, #496]	@ (80014f4 <getPressure+0x384>)
 8001304:	601a      	str	r2, [r3, #0]
		if (TEMP<2000)  //if temperature of the sensor goes below 20°C, it activates "second order temperature compensation"
 8001306:	4b7b      	ldr	r3, [pc, #492]	@ (80014f4 <getPressure+0x384>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800130e:	f280 8105 	bge.w	800151c <getPressure+0x3ac>
		    {
		      T2=pow(dT,2)/2147483648;
 8001312:	4b77      	ldr	r3, [pc, #476]	@ (80014f0 <getPressure+0x380>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f8a8 	bl	800046c <__aeabi_i2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 80014d8 <getPressure+0x368>
 8001324:	ec43 2b10 	vmov	d0, r2, r3
 8001328:	f008 fe30 	bl	8009f8c <pow>
 800132c:	ec51 0b10 	vmov	r0, r1, d0
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b70      	ldr	r3, [pc, #448]	@ (80014f8 <getPressure+0x388>)
 8001336:	f7ff fa2d 	bl	8000794 <__aeabi_ddiv>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fbad 	bl	8000aa0 <__aeabi_d2iz>
 8001346:	4602      	mov	r2, r0
 8001348:	4b6c      	ldr	r3, [pc, #432]	@ (80014fc <getPressure+0x38c>)
 800134a:	601a      	str	r2, [r3, #0]
		      OFF2=5*pow((TEMP-2000),2)/2;
 800134c:	4b69      	ldr	r3, [pc, #420]	@ (80014f4 <getPressure+0x384>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f889 	bl	800046c <__aeabi_i2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 80014d8 <getPressure+0x368>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f008 fe11 	bl	8009f8c <pow>
 800136a:	ec51 0b10 	vmov	r0, r1, d0
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <getPressure+0x390>)
 8001374:	f7ff f8e4 	bl	8000540 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001388:	f7ff fa04 	bl	8000794 <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc14 	bl	8000bc0 <__aeabi_d2lz>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4959      	ldr	r1, [pc, #356]	@ (8001504 <getPressure+0x394>)
 800139e:	e9c1 2300 	strd	r2, r3, [r1]
		      SENS2=5*pow((TEMP-2000),2)/4;
 80013a2:	4b54      	ldr	r3, [pc, #336]	@ (80014f4 <getPressure+0x384>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f85e 	bl	800046c <__aeabi_i2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 80014d8 <getPressure+0x368>
 80013b8:	ec43 2b10 	vmov	d0, r2, r3
 80013bc:	f008 fde6 	bl	8009f8c <pow>
 80013c0:	ec51 0b10 	vmov	r0, r1, d0
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001500 <getPressure+0x390>)
 80013ca:	f7ff f8b9 	bl	8000540 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b4b      	ldr	r3, [pc, #300]	@ (8001508 <getPressure+0x398>)
 80013dc:	f7ff f9da 	bl	8000794 <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbea 	bl	8000bc0 <__aeabi_d2lz>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4946      	ldr	r1, [pc, #280]	@ (800150c <getPressure+0x39c>)
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
		      if (TEMP<-1500) //if temperature of the sensor goes even lower, below -15°C, then additional math is utilized
 80013f6:	4b3f      	ldr	r3, [pc, #252]	@ (80014f4 <getPressure+0x384>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <getPressure+0x3a0>)
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f280 809e 	bge.w	800153e <getPressure+0x3ce>
		        {
		          OFF2=OFF2+7*pow((TEMP+1500),2);
 8001402:	4b40      	ldr	r3, [pc, #256]	@ (8001504 <getPressure+0x394>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff f86a 	bl	80004e4 <__aeabi_l2d>
 8001410:	4604      	mov	r4, r0
 8001412:	460d      	mov	r5, r1
 8001414:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <getPressure+0x384>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f825 	bl	800046c <__aeabi_i2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 80014d8 <getPressure+0x368>
 800142a:	ec43 2b10 	vmov	d0, r2, r3
 800142e:	f008 fdad 	bl	8009f8c <pow>
 8001432:	ec51 0b10 	vmov	r0, r1, d0
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <getPressure+0x3a4>)
 800143c:	f7ff f880 	bl	8000540 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4620      	mov	r0, r4
 8001446:	4629      	mov	r1, r5
 8001448:	f7fe fec4 	bl	80001d4 <__adddf3>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fbb4 	bl	8000bc0 <__aeabi_d2lz>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4929      	ldr	r1, [pc, #164]	@ (8001504 <getPressure+0x394>)
 800145e:	e9c1 2300 	strd	r2, r3, [r1]
		          SENS2=SENS2+11*pow((TEMP+1500),2)/2;
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <getPressure+0x39c>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff f83a 	bl	80004e4 <__aeabi_l2d>
 8001470:	4604      	mov	r4, r0
 8001472:	460d      	mov	r5, r1
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <getPressure+0x384>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fff5 	bl	800046c <__aeabi_i2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80014d8 <getPressure+0x368>
 800148a:	ec43 2b10 	vmov	d0, r2, r3
 800148e:	f008 fd7d 	bl	8009f8c <pow>
 8001492:	ec51 0b10 	vmov	r0, r1, d0
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <getPressure+0x3a8>)
 800149c:	f7ff f850 	bl	8000540 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014b0:	f7ff f970 	bl	8000794 <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe fe8a 	bl	80001d4 <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb7a 	bl	8000bc0 <__aeabi_d2lz>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	490e      	ldr	r1, [pc, #56]	@ (800150c <getPressure+0x39c>)
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
 80014d6:	e032      	b.n	800153e <getPressure+0x3ce>
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40000000 	.word	0x40000000
 80014e0:	20000000 	.word	0x20000000
 80014e4:	200000e4 	.word	0x200000e4
 80014e8:	200000ec 	.word	0x200000ec
 80014ec:	200001f4 	.word	0x200001f4
 80014f0:	20000228 	.word	0x20000228
 80014f4:	2000022c 	.word	0x2000022c
 80014f8:	41e00000 	.word	0x41e00000
 80014fc:	20000234 	.word	0x20000234
 8001500:	40140000 	.word	0x40140000
 8001504:	20000210 	.word	0x20000210
 8001508:	40100000 	.word	0x40100000
 800150c:	20000220 	.word	0x20000220
 8001510:	fffffa24 	.word	0xfffffa24
 8001514:	401c0000 	.word	0x401c0000
 8001518:	40260000 	.word	0x40260000
		        }
		    }
	   else { T2=0; OFF2=0; SENS2=0; }
 800151c:	4ac3      	ldr	r2, [pc, #780]	@ (800182c <getPressure+0x6bc>)
 800151e:	2300      	movs	r3, #0
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	49c3      	ldr	r1, [pc, #780]	@ (8001830 <getPressure+0x6c0>)
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9c1 2300 	strd	r2, r3, [r1]
 8001530:	49c0      	ldr	r1, [pc, #768]	@ (8001834 <getPressure+0x6c4>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9c1 2300 	strd	r2, r3, [r1]

		    TEMP = ((2000 + (((int64_t)dT * (int64_t)calibrationData[6]) >> 23))-T2); //second order compensation included
 800153e:	4bbe      	ldr	r3, [pc, #760]	@ (8001838 <getPressure+0x6c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	17da      	asrs	r2, r3, #31
 8001544:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001548:	4bbc      	ldr	r3, [pc, #752]	@ (800183c <getPressure+0x6cc>)
 800154a:	899b      	ldrh	r3, [r3, #12]
 800154c:	b29b      	uxth	r3, r3
 800154e:	2200      	movs	r2, #0
 8001550:	663b      	str	r3, [r7, #96]	@ 0x60
 8001552:	667a      	str	r2, [r7, #100]	@ 0x64
 8001554:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001558:	462b      	mov	r3, r5
 800155a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800155e:	4642      	mov	r2, r8
 8001560:	fb02 f203 	mul.w	r2, r2, r3
 8001564:	464b      	mov	r3, r9
 8001566:	4621      	mov	r1, r4
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	4622      	mov	r2, r4
 8001570:	4641      	mov	r1, r8
 8001572:	fba2 1201 	umull	r1, r2, r2, r1
 8001576:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800157a:	460a      	mov	r2, r1
 800157c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001580:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001584:	4413      	add	r3, r2
 8001586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001596:	4621      	mov	r1, r4
 8001598:	0dca      	lsrs	r2, r1, #23
 800159a:	4629      	mov	r1, r5
 800159c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80015a0:	4629      	mov	r1, r5
 80015a2:	15cb      	asrs	r3, r1, #23
 80015a4:	4ba1      	ldr	r3, [pc, #644]	@ (800182c <getPressure+0x6bc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4ba3      	ldr	r3, [pc, #652]	@ (8001840 <getPressure+0x6d0>)
 80015b2:	601a      	str	r2, [r3, #0]
		    OFF = (((unsigned int)calibrationData[2] << 16) + (((int64_t)calibrationData[4] * dT) >> 7)-OFF2); //second order compensation included
 80015b4:	4ba1      	ldr	r3, [pc, #644]	@ (800183c <getPressure+0x6cc>)
 80015b6:	889b      	ldrh	r3, [r3, #4]
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	2200      	movs	r2, #0
 80015bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015c0:	4b9e      	ldr	r3, [pc, #632]	@ (800183c <getPressure+0x6cc>)
 80015c2:	891b      	ldrh	r3, [r3, #8]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2200      	movs	r2, #0
 80015c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80015ca:	657a      	str	r2, [r7, #84]	@ 0x54
 80015cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001838 <getPressure+0x6c8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	17da      	asrs	r2, r3, #31
 80015d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80015d6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80015da:	462b      	mov	r3, r5
 80015dc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80015e0:	4642      	mov	r2, r8
 80015e2:	fb02 f203 	mul.w	r2, r2, r3
 80015e6:	464b      	mov	r3, r9
 80015e8:	4621      	mov	r1, r4
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	4622      	mov	r2, r4
 80015f2:	4641      	mov	r1, r8
 80015f4:	fba2 1201 	umull	r1, r2, r2, r1
 80015f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80015fc:	460a      	mov	r2, r1
 80015fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001602:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001606:	4413      	add	r3, r2
 8001608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001618:	4621      	mov	r1, r4
 800161a:	09ca      	lsrs	r2, r1, #7
 800161c:	4629      	mov	r1, r5
 800161e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001622:	4629      	mov	r1, r5
 8001624:	11cb      	asrs	r3, r1, #7
 8001626:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800162a:	4621      	mov	r1, r4
 800162c:	1889      	adds	r1, r1, r2
 800162e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001630:	4629      	mov	r1, r5
 8001632:	eb43 0101 	adc.w	r1, r3, r1
 8001636:	6479      	str	r1, [r7, #68]	@ 0x44
 8001638:	4b7d      	ldr	r3, [pc, #500]	@ (8001830 <getPressure+0x6c0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001642:	4621      	mov	r1, r4
 8001644:	1a89      	subs	r1, r1, r2
 8001646:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001648:	4629      	mov	r1, r5
 800164a:	eb61 0303 	sbc.w	r3, r1, r3
 800164e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001650:	4b7c      	ldr	r3, [pc, #496]	@ (8001844 <getPressure+0x6d4>)
 8001652:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8001656:	e9c3 1200 	strd	r1, r2, [r3]
		    SENS = (((unsigned int)calibrationData[1] << 15) + (((int64_t)calibrationData[3] * dT) >> 8)-SENS2); //second order compensation included
 800165a:	4b78      	ldr	r3, [pc, #480]	@ (800183c <getPressure+0x6cc>)
 800165c:	885b      	ldrh	r3, [r3, #2]
 800165e:	03db      	lsls	r3, r3, #15
 8001660:	2200      	movs	r2, #0
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
 8001664:	637a      	str	r2, [r7, #52]	@ 0x34
 8001666:	4b75      	ldr	r3, [pc, #468]	@ (800183c <getPressure+0x6cc>)
 8001668:	88db      	ldrh	r3, [r3, #6]
 800166a:	b29b      	uxth	r3, r3
 800166c:	2200      	movs	r2, #0
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001672:	4b71      	ldr	r3, [pc, #452]	@ (8001838 <getPressure+0x6c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	17da      	asrs	r2, r3, #31
 8001678:	623b      	str	r3, [r7, #32]
 800167a:	627a      	str	r2, [r7, #36]	@ 0x24
 800167c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001680:	462b      	mov	r3, r5
 8001682:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001686:	4642      	mov	r2, r8
 8001688:	fb02 f203 	mul.w	r2, r2, r3
 800168c:	464b      	mov	r3, r9
 800168e:	4621      	mov	r1, r4
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	4622      	mov	r2, r4
 8001698:	4641      	mov	r1, r8
 800169a:	fba2 1201 	umull	r1, r2, r2, r1
 800169e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80016a0:	460a      	mov	r2, r1
 80016a2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80016a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016a6:	4413      	add	r3, r2
 80016a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016b6:	4621      	mov	r1, r4
 80016b8:	0a0a      	lsrs	r2, r1, #8
 80016ba:	4629      	mov	r1, r5
 80016bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016c0:	4629      	mov	r1, r5
 80016c2:	120b      	asrs	r3, r1, #8
 80016c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016c8:	4621      	mov	r1, r4
 80016ca:	1889      	adds	r1, r1, r2
 80016cc:	61b9      	str	r1, [r7, #24]
 80016ce:	4629      	mov	r1, r5
 80016d0:	eb43 0101 	adc.w	r1, r3, r1
 80016d4:	61f9      	str	r1, [r7, #28]
 80016d6:	4b57      	ldr	r3, [pc, #348]	@ (8001834 <getPressure+0x6c4>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80016e0:	4621      	mov	r1, r4
 80016e2:	1a89      	subs	r1, r1, r2
 80016e4:	6139      	str	r1, [r7, #16]
 80016e6:	4629      	mov	r1, r5
 80016e8:	eb61 0303 	sbc.w	r3, r1, r3
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b56      	ldr	r3, [pc, #344]	@ (8001848 <getPressure+0x6d8>)
 80016f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80016f4:	e9c3 1200 	strd	r1, r2, [r3]
		    P = (((raw_pressure * SENS) >> 21) - OFF) >> 15;
 80016f8:	4b54      	ldr	r3, [pc, #336]	@ (800184c <getPressure+0x6dc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	60fa      	str	r2, [r7, #12]
 8001702:	4b51      	ldr	r3, [pc, #324]	@ (8001848 <getPressure+0x6d8>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800170c:	4629      	mov	r1, r5
 800170e:	fb02 f001 	mul.w	r0, r2, r1
 8001712:	4621      	mov	r1, r4
 8001714:	fb01 f103 	mul.w	r1, r1, r3
 8001718:	4401      	add	r1, r0
 800171a:	4620      	mov	r0, r4
 800171c:	fba0 2302 	umull	r2, r3, r0, r2
 8001720:	677b      	str	r3, [r7, #116]	@ 0x74
 8001722:	4613      	mov	r3, r2
 8001724:	673b      	str	r3, [r7, #112]	@ 0x70
 8001726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001728:	18cb      	adds	r3, r1, r3
 800172a:	677b      	str	r3, [r7, #116]	@ 0x74
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001738:	4621      	mov	r1, r4
 800173a:	0d4a      	lsrs	r2, r1, #21
 800173c:	4629      	mov	r1, r5
 800173e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001742:	4629      	mov	r1, r5
 8001744:	154b      	asrs	r3, r1, #21
 8001746:	493f      	ldr	r1, [pc, #252]	@ (8001844 <getPressure+0x6d4>)
 8001748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800174c:	1a14      	subs	r4, r2, r0
 800174e:	603c      	str	r4, [r7, #0]
 8001750:	eb63 0301 	sbc.w	r3, r3, r1
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001762:	4621      	mov	r1, r4
 8001764:	0bca      	lsrs	r2, r1, #15
 8001766:	4629      	mov	r1, r5
 8001768:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800176c:	4629      	mov	r1, r5
 800176e:	13cb      	asrs	r3, r1, #15
 8001770:	4b37      	ldr	r3, [pc, #220]	@ (8001850 <getPressure+0x6e0>)
 8001772:	601a      	str	r2, [r3, #0]

		    //To get a smoother pressure value we will use a 20 location rotating memory.
		    pressure_total_avarage -= pressure_rotating_mem[pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <getPressure+0x6e4>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <getPressure+0x6e8>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <getPressure+0x6ec>)
 8001780:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	4a33      	ldr	r2, [pc, #204]	@ (8001854 <getPressure+0x6e4>)
 8001788:	6013      	str	r3, [r2, #0]
		    pressure_rotating_mem[pressure_rotating_mem_location] = P;                                                //Calculate the new change between the actual pressure and the previous measurement.
 800178a:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <getPressure+0x6e8>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4b2f      	ldr	r3, [pc, #188]	@ (8001850 <getPressure+0x6e0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <getPressure+0x6ec>)
 8001796:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		    pressure_total_avarage += pressure_rotating_mem[pressure_rotating_mem_location];                          //Add the new value to the long term avarage value.
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <getPressure+0x6e8>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <getPressure+0x6ec>)
 80017a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <getPressure+0x6e4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a29      	ldr	r2, [pc, #164]	@ (8001854 <getPressure+0x6e4>)
 80017ae:	6013      	str	r3, [r2, #0]
            pressure_rotating_mem_location++;                                                                         //Increase the rotating memory location.
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <getPressure+0x6e8>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <getPressure+0x6e8>)
 80017ba:	701a      	strb	r2, [r3, #0]
		    if (pressure_rotating_mem_location == 20)pressure_rotating_mem_location = 0;                              //Start at 0 when the memory location 20 is reached.
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <getPressure+0x6e8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b14      	cmp	r3, #20
 80017c2:	d102      	bne.n	80017ca <getPressure+0x65a>
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <getPressure+0x6e8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
		    actual_pressure_fast = (float)pressure_total_avarage / 20.0;
 80017ca:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <getPressure+0x6e4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d6:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80017da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <getPressure+0x6f0>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]

		    //To get better results we will use a complementary fillter that can be adjusted by the fast average.
		    actual_pressure_slow = actual_pressure_slow * (float)0.985 + actual_pressure_fast * (float)0.015;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <getPressure+0x6f4>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001868 <getPressure+0x6f8>
 80017ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <getPressure+0x6f0>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800186c <getPressure+0x6fc>
 80017fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <getPressure+0x6f4>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
		    actual_pressure_diff = actual_pressure_slow - actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <getPressure+0x6f4>)
 800180c:	ed93 7a00 	vldr	s14, [r3]
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <getPressure+0x6f0>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <getPressure+0x700>)
 800181c:	edc3 7a00 	vstr	s15, [r3]
		    if (actual_pressure_diff > 8)actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <getPressure+0x700>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800182a:	e023      	b.n	8001874 <getPressure+0x704>
 800182c:	20000234 	.word	0x20000234
 8001830:	20000210 	.word	0x20000210
 8001834:	20000220 	.word	0x20000220
 8001838:	20000228 	.word	0x20000228
 800183c:	200001f4 	.word	0x200001f4
 8001840:	2000022c 	.word	0x2000022c
 8001844:	20000208 	.word	0x20000208
 8001848:	20000218 	.word	0x20000218
 800184c:	200000e8 	.word	0x200000e8
 8001850:	20000230 	.word	0x20000230
 8001854:	200001e4 	.word	0x200001e4
 8001858:	200001e8 	.word	0x200001e8
 800185c:	2000011c 	.word	0x2000011c
 8001860:	20000114 	.word	0x20000114
 8001864:	20000110 	.word	0x20000110
 8001868:	3f7c28f6 	.word	0x3f7c28f6
 800186c:	3c75c28f 	.word	0x3c75c28f
 8001870:	20000118 	.word	0x20000118
 8001874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	dd03      	ble.n	8001886 <getPressure+0x716>
 800187e:	4ba7      	ldr	r3, [pc, #668]	@ (8001b1c <getPressure+0x9ac>)
 8001880:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8001884:	601a      	str	r2, [r3, #0]
		    if (actual_pressure_diff < -8)actual_pressure_diff = -8;                                                  //If the difference is smaller then -8 limit the difference to -8.
 8001886:	4ba5      	ldr	r3, [pc, #660]	@ (8001b1c <getPressure+0x9ac>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eeba 7a00 	vmov.f32	s14, #160	@ 0xc1000000 -8.0
 8001890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	d503      	bpl.n	80018a2 <getPressure+0x732>
 800189a:	4ba0      	ldr	r3, [pc, #640]	@ (8001b1c <getPressure+0x9ac>)
 800189c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80018a0:	601a      	str	r2, [r3, #0]
		    //If the difference is larger then 1 or smaller then -1 the slow average is adjuste based on the error between the fast and slow average.
		    if (actual_pressure_diff > 1 || actual_pressure_diff < -1)actual_pressure_slow -= actual_pressure_diff / 6.0;
 80018a2:	4b9e      	ldr	r3, [pc, #632]	@ (8001b1c <getPressure+0x9ac>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	dc09      	bgt.n	80018ca <getPressure+0x75a>
 80018b6:	4b99      	ldr	r3, [pc, #612]	@ (8001b1c <getPressure+0x9ac>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80018c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d51f      	bpl.n	800190a <getPressure+0x79a>
 80018ca:	4b95      	ldr	r3, [pc, #596]	@ (8001b20 <getPressure+0x9b0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdde 	bl	8000490 <__aeabi_f2d>
 80018d4:	4604      	mov	r4, r0
 80018d6:	460d      	mov	r5, r1
 80018d8:	4b90      	ldr	r3, [pc, #576]	@ (8001b1c <getPressure+0x9ac>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fdd7 	bl	8000490 <__aeabi_f2d>
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b8f      	ldr	r3, [pc, #572]	@ (8001b24 <getPressure+0x9b4>)
 80018e8:	f7fe ff54 	bl	8000794 <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f7fe fc6c 	bl	80001d0 <__aeabi_dsub>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f8f6 	bl	8000af0 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	4a86      	ldr	r2, [pc, #536]	@ (8001b20 <getPressure+0x9b0>)
 8001908:	6013      	str	r3, [r2, #0]
		    actual_pressure = actual_pressure_slow;
 800190a:	4b85      	ldr	r3, [pc, #532]	@ (8001b20 <getPressure+0x9b0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a86      	ldr	r2, [pc, #536]	@ (8001b28 <getPressure+0x9b8>)
 8001910:	6013      	str	r3, [r2, #0]
	}
	if (counter_pressure == 3) {
 8001912:	4b86      	ldr	r3, [pc, #536]	@ (8001b2c <getPressure+0x9bc>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b03      	cmp	r3, #3
 8001918:	f040 81a6 	bne.w	8001c68 <getPressure+0xaf8>
		counter_pressure = 0;
 800191c:	4b83      	ldr	r3, [pc, #524]	@ (8001b2c <getPressure+0x9bc>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]

	    if (manual_altitude_change == 1)	pressure_parachute_previous = actual_pressure * 10;                       //During manual altitude change the up/down detection is disabled.
 8001922:	4b83      	ldr	r3, [pc, #524]	@ (8001b30 <getPressure+0x9c0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d109      	bne.n	800193e <getPressure+0x7ce>
 800192a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b28 <getPressure+0x9b8>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001938:	4b7e      	ldr	r3, [pc, #504]	@ (8001b34 <getPressure+0x9c4>)
 800193a:	edc3 7a00 	vstr	s15, [r3]
	    parachute_throttle -= parachute_buffer[parachute_rotating_mem_location];                                  //Subtract the current memory position to make room for the new value.
 800193e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b38 <getPressure+0x9c8>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b7e      	ldr	r3, [pc, #504]	@ (8001b3c <getPressure+0x9cc>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	4b7d      	ldr	r3, [pc, #500]	@ (8001b40 <getPressure+0x9d0>)
 800194a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a79      	ldr	r2, [pc, #484]	@ (8001b38 <getPressure+0x9c8>)
 8001952:	6013      	str	r3, [r2, #0]
	    parachute_buffer[parachute_rotating_mem_location] = actual_pressure * 10 - pressure_parachute_previous;   //Calculate the new change between the actual pressure and the previous measurement.
 8001954:	4b74      	ldr	r3, [pc, #464]	@ (8001b28 <getPressure+0x9b8>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800195e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001962:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <getPressure+0x9c4>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196c:	4b73      	ldr	r3, [pc, #460]	@ (8001b3c <getPressure+0x9cc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001976:	ee17 1a90 	vmov	r1, s15
 800197a:	4b71      	ldr	r3, [pc, #452]	@ (8001b40 <getPressure+0x9d0>)
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    parachute_throttle += parachute_buffer[parachute_rotating_mem_location];                                  //Add the new value to the long term avarage value.
 8001980:	4b6e      	ldr	r3, [pc, #440]	@ (8001b3c <getPressure+0x9cc>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b6e      	ldr	r3, [pc, #440]	@ (8001b40 <getPressure+0x9d0>)
 8001988:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800198c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <getPressure+0x9c8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4413      	add	r3, r2
 8001992:	4a69      	ldr	r2, [pc, #420]	@ (8001b38 <getPressure+0x9c8>)
 8001994:	6013      	str	r3, [r2, #0]
	    pressure_parachute_previous = actual_pressure * 10;                                                       //Store the current measurement for the next loop.
 8001996:	4b64      	ldr	r3, [pc, #400]	@ (8001b28 <getPressure+0x9b8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80019a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a4:	4b63      	ldr	r3, [pc, #396]	@ (8001b34 <getPressure+0x9c4>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	    parachute_rotating_mem_location++;                                                                        //Increase the rotating memory location.
 80019aa:	4b64      	ldr	r3, [pc, #400]	@ (8001b3c <getPressure+0x9cc>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b62      	ldr	r3, [pc, #392]	@ (8001b3c <getPressure+0x9cc>)
 80019b4:	701a      	strb	r2, [r3, #0]
	    if (parachute_rotating_mem_location == 30)	parachute_rotating_mem_location = 0;
 80019b6:	4b61      	ldr	r3, [pc, #388]	@ (8001b3c <getPressure+0x9cc>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b1e      	cmp	r3, #30
 80019bc:	d102      	bne.n	80019c4 <getPressure+0x854>
 80019be:	4b5f      	ldr	r3, [pc, #380]	@ (8001b3c <getPressure+0x9cc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]

	    if (flight_mode == 2) {
 80019c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b44 <getPressure+0x9d4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f040 813e 	bne.w	8001c4a <getPressure+0xada>
	    	manual_altitude_change = 0;
 80019ce:	4b58      	ldr	r3, [pc, #352]	@ (8001b30 <getPressure+0x9c0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	    	if (pid_altitude_setpoint == 0)	pid_altitude_setpoint = actual_pressure;
 80019d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b48 <getPressure+0x9d8>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	d103      	bne.n	80019ec <getPressure+0x87c>
 80019e4:	4b50      	ldr	r3, [pc, #320]	@ (8001b28 <getPressure+0x9b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a57      	ldr	r2, [pc, #348]	@ (8001b48 <getPressure+0x9d8>)
 80019ea:	6013      	str	r3, [r2, #0]

	        //Calculate the PID output of the altitude hold.
	        pid_altitude_input = actual_pressure;                                          //Set the setpoint (pid_altitude_input) of the PID-controller.
 80019ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001b28 <getPressure+0x9b8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <getPressure+0x9dc>)
 80019f2:	6013      	str	r3, [r2, #0]
	        pid_error_temp = pid_altitude_input - pid_altitude_setpoint;                   //Calculate the error between the setpoint and the actual pressure value.
 80019f4:	4b55      	ldr	r3, [pc, #340]	@ (8001b4c <getPressure+0x9dc>)
 80019f6:	ed93 7a00 	vldr	s14, [r3]
 80019fa:	4b53      	ldr	r3, [pc, #332]	@ (8001b48 <getPressure+0x9d8>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a04:	4b52      	ldr	r3, [pc, #328]	@ (8001b50 <getPressure+0x9e0>)
 8001a06:	edc3 7a00 	vstr	s15, [r3]

	        //To get better results the P-gain is increased when the error between the setpoint and the actual pressure value increases.
	        //The variable pid_error_gain_altitude will be used to adjust the P-gain of the PID-controller.
	        pid_error_gain_altitude = 0;                                                   //Set the pid_error_gain_altitude to 0.
 8001a0a:	4b52      	ldr	r3, [pc, #328]	@ (8001b54 <getPressure+0x9e4>)
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
	        if (pid_error_temp > 10 || pid_error_temp < -10) {                             //If the error between the setpoint and the actual pressure is larger than 10 or smaller then -10.
 8001a12:	4b4f      	ldr	r3, [pc, #316]	@ (8001b50 <getPressure+0x9e0>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a24:	dc09      	bgt.n	8001a3a <getPressure+0x8ca>
 8001a26:	4b4a      	ldr	r3, [pc, #296]	@ (8001b50 <getPressure+0x9e0>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a38:	d528      	bpl.n	8001a8c <getPressure+0x91c>
	          pid_error_gain_altitude = (abs(pid_error_temp) - 10) / 20.0;                 //The positive pid_error_gain_altitude variable is calculated based based on the error.
 8001a3a:	4b45      	ldr	r3, [pc, #276]	@ (8001b50 <getPressure+0x9e0>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a44:	ee17 3a90 	vmov	r3, s15
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bfb8      	it	lt
 8001a4c:	425b      	neglt	r3, r3
 8001a4e:	3b0a      	subs	r3, #10
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd0b 	bl	800046c <__aeabi_i2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b58 <getPressure+0x9e8>)
 8001a5c:	f7fe fe9a 	bl	8000794 <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f842 	bl	8000af0 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a39      	ldr	r2, [pc, #228]	@ (8001b54 <getPressure+0x9e4>)
 8001a70:	6013      	str	r3, [r2, #0]
	          if (pid_error_gain_altitude > 3)pid_error_gain_altitude = 3;                 //To prevent extreme P-gains it must be limited to 3.
 8001a72:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <getPressure+0x9e4>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	dd02      	ble.n	8001a8c <getPressure+0x91c>
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <getPressure+0x9e4>)
 8001a88:	4a34      	ldr	r2, [pc, #208]	@ (8001b5c <getPressure+0x9ec>)
 8001a8a:	601a      	str	r2, [r3, #0]
	        }

	        //In the following section the I-output is calculated. It's an accumulation of errors over time.
	        //The time factor is removed as the program loop runs at 250Hz.
	        pid_i_mem_altitude += (pid_i_gain_altitude / 100.0) * pid_error_temp;
 8001a8c:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <getPressure+0x9f0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fcfd 	bl	8000490 <__aeabi_f2d>
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
 8001a9a:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <getPressure+0x9f4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcf6 	bl	8000490 <__aeabi_f2d>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <getPressure+0x9f8>)
 8001aaa:	f7fe fe73 	bl	8000794 <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4690      	mov	r8, r2
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <getPressure+0x9e0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fce8 	bl	8000490 <__aeabi_f2d>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4640      	mov	r0, r8
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	f7fe fd3a 	bl	8000540 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f7fe fb7e 	bl	80001d4 <__adddf3>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f806 	bl	8000af0 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b60 <getPressure+0x9f0>)
 8001ae8:	6013      	str	r3, [r2, #0]
	        if (pid_i_mem_altitude > pid_max_altitude)pid_i_mem_altitude = pid_max_altitude;
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <getPressure+0x9fc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <getPressure+0x9f0>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	d534      	bpl.n	8001b70 <getPressure+0xa00>
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <getPressure+0x9fc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <getPressure+0x9f0>)
 8001b14:	edc3 7a00 	vstr	s15, [r3]
 8001b18:	e043      	b.n	8001ba2 <getPressure+0xa32>
 8001b1a:	bf00      	nop
 8001b1c:	20000118 	.word	0x20000118
 8001b20:	20000110 	.word	0x20000110
 8001b24:	40180000 	.word	0x40180000
 8001b28:	2000010c 	.word	0x2000010c
 8001b2c:	200000e4 	.word	0x200000e4
 8001b30:	200002e8 	.word	0x200002e8
 8001b34:	200002e0 	.word	0x200002e0
 8001b38:	200002dc 	.word	0x200002dc
 8001b3c:	2000024c 	.word	0x2000024c
 8001b40:	20000250 	.word	0x20000250
 8001b44:	2000045c 	.word	0x2000045c
 8001b48:	2000023c 	.word	0x2000023c
 8001b4c:	20000240 	.word	0x20000240
 8001b50:	20000248 	.word	0x20000248
 8001b54:	200002e4 	.word	0x200002e4
 8001b58:	40340000 	.word	0x40340000
 8001b5c:	40400000 	.word	0x40400000
 8001b60:	20000238 	.word	0x20000238
 8001b64:	20000050 	.word	0x20000050
 8001b68:	40590000 	.word	0x40590000
 8001b6c:	20000004 	.word	0x20000004
	        else if (pid_i_mem_altitude < pid_max_altitude * -1)pid_i_mem_altitude = pid_max_altitude * -1;
 8001b70:	4b43      	ldr	r3, [pc, #268]	@ (8001c80 <getPressure+0xb10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	425b      	negs	r3, r3
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7e:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <getPressure+0xb14>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	dd09      	ble.n	8001ba2 <getPressure+0xa32>
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c80 <getPressure+0xb10>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	425b      	negs	r3, r3
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	4b39      	ldr	r3, [pc, #228]	@ (8001c84 <getPressure+0xb14>)
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
	        //In the following line the PID-output is calculated.
	        //P = (pid_p_gain_altitude + pid_error_gain_altitude) * pid_error_temp.
	        //I = pid_i_mem_altitude += (pid_i_gain_altitude / 100.0) * pid_error_temp (see above).
	        //D = pid_d_gain_altitude * parachute_throttle.
	        pid_output_altitude = (pid_p_gain_altitude + pid_error_gain_altitude) * pid_error_temp + pid_i_mem_altitude + pid_d_gain_altitude * parachute_throttle;
 8001ba2:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <getPressure+0xb18>)
 8001ba4:	ed93 7a00 	vldr	s14, [r3]
 8001ba8:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <getPressure+0xb1c>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb2:	4b37      	ldr	r3, [pc, #220]	@ (8001c90 <getPressure+0xb20>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bbc:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <getPressure+0xb14>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc6:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <getPressure+0xb24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bd2:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <getPressure+0xb28>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <getPressure+0xb2c>)
 8001be2:	edc3 7a00 	vstr	s15, [r3]
	        //To prevent extreme PID-output the output must be limited.
	        if (pid_output_altitude > pid_max_altitude)pid_output_altitude = pid_max_altitude;
 8001be6:	4b26      	ldr	r3, [pc, #152]	@ (8001c80 <getPressure+0xb10>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <getPressure+0xb2c>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	d509      	bpl.n	8001c16 <getPressure+0xaa6>
 8001c02:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <getPressure+0xb10>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <getPressure+0xb2c>)
 8001c10:	edc3 7a00 	vstr	s15, [r3]
 8001c14:	e028      	b.n	8001c68 <getPressure+0xaf8>
	        else if (pid_output_altitude < pid_max_altitude * -1)pid_output_altitude = pid_max_altitude * -1;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <getPressure+0xb10>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	425b      	negs	r3, r3
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <getPressure+0xb2c>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	dd19      	ble.n	8001c68 <getPressure+0xaf8>
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <getPressure+0xb10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	425b      	negs	r3, r3
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <getPressure+0xb2c>)
 8001c44:	edc3 7a00 	vstr	s15, [r3]
 8001c48:	e00e      	b.n	8001c68 <getPressure+0xaf8>
	    }
	    else{
	        pid_altitude_setpoint = 0;                                                     //Reset the PID altitude setpoint.
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <getPressure+0xb30>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	        pid_output_altitude = 0;                                                       //Reset the output of the PID controller.
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <getPressure+0xb2c>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	        pid_i_mem_altitude = 0;                                                        //Reset the I-controller.
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <getPressure+0xb14>)
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
	        manual_altitude_change = 1;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <getPressure+0xb34>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
	    }
	}

  //return actual_pressure; //returns back pressure P
	return pid_output_altitude;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <getPressure+0xb2c>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c72:	ee17 3a90 	vmov	r3, s15
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3790      	adds	r7, #144	@ 0x90
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000238 	.word	0x20000238
 8001c88:	2000004c 	.word	0x2000004c
 8001c8c:	200002e4 	.word	0x200002e4
 8001c90:	20000248 	.word	0x20000248
 8001c94:	200002dc 	.word	0x200002dc
 8001c98:	20000054 	.word	0x20000054
 8001c9c:	20000244 	.word	0x20000244
 8001ca0:	2000023c 	.word	0x2000023c
 8001ca4:	200002e8 	.word	0x200002e8

08001ca8 <Send_Data_To_Gui>:
void fault_dec()
{
	while(1);
}
void Send_Data_To_Gui()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08e      	sub	sp, #56	@ 0x38
 8001cac:	af00      	add	r7, sp, #0
	 Tx_buff[0] = 0x44;
 8001cae:	4b61      	ldr	r3, [pc, #388]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001cb0:	2244      	movs	r2, #68	@ 0x44
 8001cb2:	701a      	strb	r2, [r3, #0]
     Tx_buff[1] = 0x41;
 8001cb4:	4b5f      	ldr	r3, [pc, #380]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001cb6:	2241      	movs	r2, #65	@ 0x41
 8001cb8:	705a      	strb	r2, [r3, #1]
	 unsigned char *AngleRoll_Bytes = (unsigned char *)&KalmanAngleRoll; //KalmanAngleRoll
 8001cba:	4b5f      	ldr	r3, [pc, #380]	@ (8001e38 <Send_Data_To_Gui+0x190>)
 8001cbc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cc2:	e00a      	b.n	8001cda <Send_Data_To_Gui+0x32>
        Tx_buff[i + 2] = AngleRoll_Bytes[i];
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	441a      	add	r2, r3
 8001cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ccc:	3302      	adds	r3, #2
 8001cce:	7811      	ldrb	r1, [r2, #0]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001cd2:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d9f1      	bls.n	8001cc4 <Send_Data_To_Gui+0x1c>
    }
		unsigned char *AnglePitch_Bytes = (unsigned char *)&KalmanAnglePitch; //KalmanAnglePitch
 8001ce0:	4b56      	ldr	r3, [pc, #344]	@ (8001e3c <Send_Data_To_Gui+0x194>)
 8001ce2:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < sizeof(float); ++i) {
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ce8:	e00a      	b.n	8001d00 <Send_Data_To_Gui+0x58>
        Tx_buff[i + 6] = AnglePitch_Bytes[i];
 8001cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	441a      	add	r2, r3
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf2:	3306      	adds	r3, #6
 8001cf4:	7811      	ldrb	r1, [r2, #0]
 8001cf6:	4a4f      	ldr	r2, [pc, #316]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001cf8:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d9f1      	bls.n	8001cea <Send_Data_To_Gui+0x42>
    }
		unsigned char *AngleRoll_Setpoint_Bytes = (unsigned char *)&DesiredAngleRoll; //DesiredAngleRoll
 8001d06:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <Send_Data_To_Gui+0x198>)
 8001d08:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d0e:	e00a      	b.n	8001d26 <Send_Data_To_Gui+0x7e>
        Tx_buff[i + 10] = AngleRoll_Setpoint_Bytes[i];
 8001d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	441a      	add	r2, r3
 8001d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d18:	330a      	adds	r3, #10
 8001d1a:	7811      	ldrb	r1, [r2, #0]
 8001d1c:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001d1e:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d22:	3301      	adds	r3, #1
 8001d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d9f1      	bls.n	8001d10 <Send_Data_To_Gui+0x68>
    }
		unsigned char *AnglePitch_Setpoint_Bytes = (unsigned char *)&DesiredAnglePitch; //DesiredAnglePitch
 8001d2c:	4b45      	ldr	r3, [pc, #276]	@ (8001e44 <Send_Data_To_Gui+0x19c>)
 8001d2e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d34:	e00a      	b.n	8001d4c <Send_Data_To_Gui+0xa4>
        Tx_buff[i + 14] = AnglePitch_Setpoint_Bytes[i];
 8001d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3e:	330e      	adds	r3, #14
 8001d40:	7811      	ldrb	r1, [r2, #0]
 8001d42:	4a3c      	ldr	r2, [pc, #240]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001d44:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d48:	3301      	adds	r3, #1
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9f1      	bls.n	8001d36 <Send_Data_To_Gui+0x8e>
    }
    	unsigned char *InputThrottle_Bytes = (unsigned char *)&InputThrottle;    //InputThrottle
 8001d52:	4b3d      	ldr	r3, [pc, #244]	@ (8001e48 <Send_Data_To_Gui+0x1a0>)
 8001d54:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5a:	e00a      	b.n	8001d72 <Send_Data_To_Gui+0xca>
        Tx_buff[i + 18] = InputThrottle_Bytes[i];
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	441a      	add	r2, r3
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	3312      	adds	r3, #18
 8001d66:	7811      	ldrb	r1, [r2, #0]
 8001d68:	4a32      	ldr	r2, [pc, #200]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001d6a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	3301      	adds	r3, #1
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d9f1      	bls.n	8001d5c <Send_Data_To_Gui+0xb4>
    }
		unsigned char *actual_pressure_Bytes = (unsigned char *)&actual_pressure;   //actual_pressure
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <Send_Data_To_Gui+0x1a4>)
 8001d7a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < sizeof(float); ++i) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	e00a      	b.n	8001d98 <Send_Data_To_Gui+0xf0>
		Tx_buff[i + 22] = actual_pressure_Bytes[i];
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	441a      	add	r2, r3
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	3316      	adds	r3, #22
 8001d8c:	7811      	ldrb	r1, [r2, #0]
 8001d8e:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001d90:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(float); ++i) {
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	3301      	adds	r3, #1
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d9f1      	bls.n	8001d82 <Send_Data_To_Gui+0xda>
	}

	Tx_buff[26] = m8n_rx_buf[10]; Tx_buff[27] = m8n_rx_buf[11];
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001da0:	7a9a      	ldrb	r2, [r3, #10]
 8001da2:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001da4:	769a      	strb	r2, [r3, #26]
 8001da6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001da8:	7ada      	ldrb	r2, [r3, #11]
 8001daa:	4b22      	ldr	r3, [pc, #136]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dac:	76da      	strb	r2, [r3, #27]
	Tx_buff[28] = m8n_rx_buf[12]; Tx_buff[29] = m8n_rx_buf[13];
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001db0:	7b1a      	ldrb	r2, [r3, #12]
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001db4:	771a      	strb	r2, [r3, #28]
 8001db6:	4b26      	ldr	r3, [pc, #152]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001db8:	7b5a      	ldrb	r2, [r3, #13]
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dbc:	775a      	strb	r2, [r3, #29]

	Tx_buff[30] = m8n_rx_buf[14]; Tx_buff[31] = m8n_rx_buf[15];
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001dc0:	7b9a      	ldrb	r2, [r3, #14]
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dc4:	779a      	strb	r2, [r3, #30]
 8001dc6:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001dc8:	7bda      	ldrb	r2, [r3, #15]
 8001dca:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dcc:	77da      	strb	r2, [r3, #31]
	Tx_buff[32] = m8n_rx_buf[16]; Tx_buff[33] = m8n_rx_buf[17];
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001dd0:	7c1a      	ldrb	r2, [r3, #16]
 8001dd2:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001dda:	7c5a      	ldrb	r2, [r3, #17]
 8001ddc:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	unsigned char *actual_compass_heading_Bytes = (unsigned char *)&actual_compass_heading;   //actual_pressure
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <Send_Data_To_Gui+0x1ac>)
 8001de4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < sizeof(float); ++i) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e00a      	b.n	8001e02 <Send_Data_To_Gui+0x15a>
		Tx_buff[i + 34] = actual_compass_heading_Bytes[i];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	441a      	add	r2, r3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3322      	adds	r3, #34	@ 0x22
 8001df6:	7811      	ldrb	r1, [r2, #0]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dfa:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(float); ++i) {
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d9f1      	bls.n	8001dec <Send_Data_To_Gui+0x144>
	}

	Tx_buff[38] = '\r'; Tx_buff[39] = '\n';
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001e0a:	220d      	movs	r2, #13
 8001e0c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001e12:	220a      	movs	r2, #10
 8001e14:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if(Flag_Plot)
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <Send_Data_To_Gui+0x1b0>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <Send_Data_To_Gui+0x182>
	{
		HAL_UART_Transmit_DMA(&huart2, Tx_buff,40);
 8001e20:	2228      	movs	r2, #40	@ 0x28
 8001e22:	4904      	ldr	r1, [pc, #16]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001e24:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <Send_Data_To_Gui+0x1b4>)
 8001e26:	f006 fe7d 	bl	8008b24 <HAL_UART_Transmit_DMA>
	}
}
 8001e2a:	bf00      	nop
 8001e2c:	3738      	adds	r7, #56	@ 0x38
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000394 	.word	0x20000394
 8001e38:	20000488 	.word	0x20000488
 8001e3c:	2000048c 	.word	0x2000048c
 8001e40:	200004f4 	.word	0x200004f4
 8001e44:	200004f8 	.word	0x200004f8
 8001e48:	200004b4 	.word	0x200004b4
 8001e4c:	2000010c 	.word	0x2000010c
 8001e50:	20000460 	.word	0x20000460
 8001e54:	20000540 	.word	0x20000540
 8001e58:	200002f8 	.word	0x200002f8
 8001e5c:	20000820 	.word	0x20000820

08001e60 <kalman_1d>:

void kalman_1d(float KalmanState, float KalmanUncertainty, float KalmanInput, float KalmanMeasurement) {
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e6e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001e72:	edc7 1a00 	vstr	s3, [r7]
  KalmanState = KalmanState + 0.004*KalmanInput;
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f7fe fb0a 	bl	8000490 <__aeabi_f2d>
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	460d      	mov	r5, r1
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7fe fb05 	bl	8000490 <__aeabi_f2d>
 8001e86:	a32b      	add	r3, pc, #172	@ (adr r3, 8001f34 <kalman_1d+0xd4>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fb58 	bl	8000540 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe f99c 	bl	80001d4 <__adddf3>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe24 	bl	8000af0 <__aeabi_d2f>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60fb      	str	r3, [r7, #12]
  KalmanUncertainty = KalmanUncertainty + 0.004 * 0.004 * 4 * 4;
 8001eac:	68b8      	ldr	r0, [r7, #8]
 8001eae:	f7fe faef 	bl	8000490 <__aeabi_f2d>
 8001eb2:	a322      	add	r3, pc, #136	@ (adr r3, 8001f3c <kalman_1d+0xdc>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe f98c 	bl	80001d4 <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe fe14 	bl	8000af0 <__aeabi_d2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60bb      	str	r3, [r7, #8]
  float KalmanGain = KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3);
 8001ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ed0:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ed8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee0:	edc7 7a05 	vstr	s15, [r7, #20]
  KalmanState = KalmanState+KalmanGain * (KalmanMeasurement-KalmanState);
 8001ee4:	ed97 7a00 	vldr	s14, [r7]
 8001ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f00:	edc7 7a03 	vstr	s15, [r7, #12]
  KalmanUncertainty = (1-KalmanGain) * KalmanUncertainty;
 8001f04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f10:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f18:	edc7 7a02 	vstr	s15, [r7, #8]
  Kalman1DOutput[0] = KalmanState;
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <kalman_1d+0xd0>)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6013      	str	r3, [r2, #0]
  Kalman1DOutput[1] = KalmanUncertainty;
 8001f22:	4a03      	ldr	r2, [pc, #12]	@ (8001f30 <kalman_1d+0xd0>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6053      	str	r3, [r2, #4]
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f30:	20000490 	.word	0x20000490
 8001f34:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f38:	3f70624d 	.word	0x3f70624d
 8001f3c:	a0b5ed8d 	.word	0xa0b5ed8d
 8001f40:	3f30c6f7 	.word	0x3f30c6f7

08001f44 <SetValue>:
void kalman_2d(void);
void define_kalman_2d(void);

int SetValue(int value, int inMin, int inMax, int outMin, int outMax)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
	if (value < inMin) return outMin;
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	da01      	bge.n	8001f5e <SetValue+0x1a>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	e006      	b.n	8001f6c <SetValue+0x28>
	else if (value > inMax) return outMax;
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	dd01      	ble.n	8001f6a <SetValue+0x26>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	e000      	b.n	8001f6c <SetValue+0x28>
	else return value;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]

	if ( GPIO_Pin == GPIO_PIN_15){
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f88:	d133      	bne.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x7a>
		tick = __HAL_TIM_GET_COUNTER(&htim2);
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <HAL_GPIO_EXTI_Callback+0x84>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <HAL_GPIO_EXTI_Callback+0x88>)
 8001f94:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_GPIO_EXTI_Callback+0x84>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24

		if ( tick < 2100){
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <HAL_GPIO_EXTI_Callback+0x88>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f640 0233 	movw	r2, #2099	@ 0x833
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	dc1c      	bgt.n	8001fe4 <HAL_GPIO_EXTI_Callback+0x6c>
			ch[pulse] = SetValue(tick, 1030, 1950, 1000, 2000);;
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_GPIO_EXTI_Callback+0x88>)
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461c      	mov	r4, r3
 8001fb6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc0:	f240 729e 	movw	r2, #1950	@ 0x79e
 8001fc4:	f240 4106 	movw	r1, #1030	@ 0x406
 8001fc8:	f7ff ffbc 	bl	8001f44 <SetValue>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <HAL_GPIO_EXTI_Callback+0x90>)
 8001fd0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			pulse++;
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fe0:	701a      	strb	r2, [r3, #0]
		else{
			__HAL_TIM_SET_COUNTER(&htim2,0);
			pulse =0;
		}
	}
}
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x7a>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_GPIO_EXTI_Callback+0x84>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
			pulse =0;
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000748 	.word	0x20000748
 8002000:	200003fc 	.word	0x200003fc
 8002004:	20000400 	.word	0x20000400
 8002008:	200003dc 	.word	0x200003dc

0800200c <MPU6050_Init>:


HAL_StatusTypeDef MPU6050_Init (void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1,1000)!= HAL_OK) return HAL_ERROR;
 8002012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002016:	9302      	str	r3, [sp, #8]
 8002018:	2301      	movs	r3, #1
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2301      	movs	r3, #1
 8002022:	2275      	movs	r2, #117	@ 0x75
 8002024:	21d0      	movs	r1, #208	@ 0xd0
 8002026:	483a      	ldr	r0, [pc, #232]	@ (8002110 <MPU6050_Init+0x104>)
 8002028:	f004 faba 	bl	80065a0 <HAL_I2C_Mem_Read>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MPU6050_Init+0x2a>
 8002032:	2301      	movs	r3, #1
 8002034:	e067      	b.n	8002106 <MPU6050_Init+0xfa>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b68      	cmp	r3, #104	@ 0x68
 800203a:	d163      	bne.n	8002104 <MPU6050_Init+0xf8>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1,1000)!= HAL_OK)
 8002040:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	2301      	movs	r3, #1
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	1dbb      	adds	r3, r7, #6
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2301      	movs	r3, #1
 8002050:	226b      	movs	r2, #107	@ 0x6b
 8002052:	21d0      	movs	r1, #208	@ 0xd0
 8002054:	482e      	ldr	r0, [pc, #184]	@ (8002110 <MPU6050_Init+0x104>)
 8002056:	f004 f9a9 	bl	80063ac <HAL_I2C_Mem_Write>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MPU6050_Init+0x58>
			return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e050      	b.n	8002106 <MPU6050_Init+0xfa>
		// config 1KHz Digital Low Pass Filter 10Hz
		Data = 0x05;
 8002064:	2305      	movs	r3, #5
 8002066:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1,&Data, 1,1000)!= HAL_OK)
 8002068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	2301      	movs	r3, #1
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	1dbb      	adds	r3, r7, #6
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2301      	movs	r3, #1
 8002078:	221a      	movs	r2, #26
 800207a:	21d0      	movs	r1, #208	@ 0xd0
 800207c:	4824      	ldr	r0, [pc, #144]	@ (8002110 <MPU6050_Init+0x104>)
 800207e:	f004 f995 	bl	80063ac <HAL_I2C_Mem_Write>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MPU6050_Init+0x80>
			return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e03c      	b.n	8002106 <MPU6050_Init+0xfa>
		
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800208c:	2307      	movs	r3, #7
 800208e:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000)!= HAL_OK)
 8002090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002094:	9302      	str	r3, [sp, #8]
 8002096:	2301      	movs	r3, #1
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	1dbb      	adds	r3, r7, #6
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2301      	movs	r3, #1
 80020a0:	2219      	movs	r2, #25
 80020a2:	21d0      	movs	r1, #208	@ 0xd0
 80020a4:	481a      	ldr	r0, [pc, #104]	@ (8002110 <MPU6050_Init+0x104>)
 80020a6:	f004 f981 	bl	80063ac <HAL_I2C_Mem_Write>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MPU6050_Init+0xa8>
			return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e028      	b.n	8002106 <MPU6050_Init+0xfa>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 8g
		Data = 0x10;
 80020b4:	2310      	movs	r3, #16
 80020b6:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000)!= HAL_OK)
 80020b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	2301      	movs	r3, #1
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	1dbb      	adds	r3, r7, #6
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2301      	movs	r3, #1
 80020c8:	221c      	movs	r2, #28
 80020ca:	21d0      	movs	r1, #208	@ 0xd0
 80020cc:	4810      	ldr	r0, [pc, #64]	@ (8002110 <MPU6050_Init+0x104>)
 80020ce:	f004 f96d 	bl	80063ac <HAL_I2C_Mem_Write>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MPU6050_Init+0xd0>
			return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e014      	b.n	8002106 <MPU6050_Init+0xfa>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 500 �/s
		Data = 0x08;
 80020dc:	2308      	movs	r3, #8
 80020de:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000)!= HAL_OK)
 80020e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	2301      	movs	r3, #1
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	1dbb      	adds	r3, r7, #6
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2301      	movs	r3, #1
 80020f0:	221b      	movs	r2, #27
 80020f2:	21d0      	movs	r1, #208	@ 0xd0
 80020f4:	4806      	ldr	r0, [pc, #24]	@ (8002110 <MPU6050_Init+0x104>)
 80020f6:	f004 f959 	bl	80063ac <HAL_I2C_Mem_Write>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MPU6050_Init+0xf8>
			return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <MPU6050_Init+0xfa>
	}
	return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000544 	.word	0x20000544
 8002114:	00000000 	.word	0x00000000

08002118 <MPU6050_Read_Data>:


HAL_StatusTypeDef MPU6050_Read_Data (void)
{
 8002118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800211c:	b088      	sub	sp, #32
 800211e:	af04      	add	r7, sp, #16
	uint8_t Rec_Data_Acc[6];
	uint8_t Rec_Data_Gyro[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG,1,Rec_Data_Acc,6,20) != HAL_OK)
 8002120:	2314      	movs	r3, #20
 8002122:	9302      	str	r3, [sp, #8]
 8002124:	2306      	movs	r3, #6
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	223b      	movs	r2, #59	@ 0x3b
 8002132:	21d0      	movs	r1, #208	@ 0xd0
 8002134:	484c      	ldr	r0, [pc, #304]	@ (8002268 <MPU6050_Read_Data+0x150>)
 8002136:	f004 fa33 	bl	80065a0 <HAL_I2C_Mem_Read>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MPU6050_Read_Data+0x2c>
		return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e1b1      	b.n	80024a8 <MPU6050_Read_Data+0x390>

	Accel_X_RAW = (int16_t)(Rec_Data_Acc[0] << 8 | Rec_Data_Acc [1]);
 8002144:	7a3b      	ldrb	r3, [r7, #8]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	b21a      	sxth	r2, r3
 800214a:	7a7b      	ldrb	r3, [r7, #9]
 800214c:	b21b      	sxth	r3, r3
 800214e:	4313      	orrs	r3, r2
 8002150:	b21a      	sxth	r2, r3
 8002152:	4b46      	ldr	r3, [pc, #280]	@ (800226c <MPU6050_Read_Data+0x154>)
 8002154:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data_Acc[2] << 8 | Rec_Data_Acc [3]);
 8002156:	7abb      	ldrb	r3, [r7, #10]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	b21a      	sxth	r2, r3
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	b21b      	sxth	r3, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	b21a      	sxth	r2, r3
 8002164:	4b42      	ldr	r3, [pc, #264]	@ (8002270 <MPU6050_Read_Data+0x158>)
 8002166:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data_Acc[4] << 8 | Rec_Data_Acc [5]);
 8002168:	7b3b      	ldrb	r3, [r7, #12]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b21a      	sxth	r2, r3
 800216e:	7b7b      	ldrb	r3, [r7, #13]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21a      	sxth	r2, r3
 8002176:	4b3f      	ldr	r3, [pc, #252]	@ (8002274 <MPU6050_Read_Data+0x15c>)
 8002178:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/4096.0 - 0.026;
 800217a:	4b3c      	ldr	r3, [pc, #240]	@ (800226c <MPU6050_Read_Data+0x154>)
 800217c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f973 	bl	800046c <__aeabi_i2d>
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <MPU6050_Read_Data+0x160>)
 800218c:	f7fe fb02 	bl	8000794 <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	a32d      	add	r3, pc, #180	@ (adr r3, 8002250 <MPU6050_Read_Data+0x138>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe f817 	bl	80001d0 <__aeabi_dsub>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fca1 	bl	8000af0 <__aeabi_d2f>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a32      	ldr	r2, [pc, #200]	@ (800227c <MPU6050_Read_Data+0x164>)
 80021b2:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/4096.0 + 0.028;
 80021b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002270 <MPU6050_Read_Data+0x158>)
 80021b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f956 	bl	800046c <__aeabi_i2d>
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <MPU6050_Read_Data+0x160>)
 80021c6:	f7fe fae5 	bl	8000794 <__aeabi_ddiv>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	a321      	add	r3, pc, #132	@ (adr r3, 8002258 <MPU6050_Read_Data+0x140>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	f7fd fffc 	bl	80001d4 <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fc84 	bl	8000af0 <__aeabi_d2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a25      	ldr	r2, [pc, #148]	@ (8002280 <MPU6050_Read_Data+0x168>)
 80021ec:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/4096.0 + 0.038;
 80021ee:	4b21      	ldr	r3, [pc, #132]	@ (8002274 <MPU6050_Read_Data+0x15c>)
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f939 	bl	800046c <__aeabi_i2d>
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <MPU6050_Read_Data+0x160>)
 8002200:	f7fe fac8 	bl	8000794 <__aeabi_ddiv>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	a314      	add	r3, pc, #80	@ (adr r3, 8002260 <MPU6050_Read_Data+0x148>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fd ffdf 	bl	80001d4 <__adddf3>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fc67 	bl	8000af0 <__aeabi_d2f>
 8002222:	4603      	mov	r3, r0
 8002224:	4a17      	ldr	r2, [pc, #92]	@ (8002284 <MPU6050_Read_Data+0x16c>)
 8002226:	6013      	str	r3, [r2, #0]
	
	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG,1,Rec_Data_Gyro,6,20)!= HAL_OK)
 8002228:	2314      	movs	r3, #20
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	2306      	movs	r3, #6
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	463b      	mov	r3, r7
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2301      	movs	r3, #1
 8002236:	2243      	movs	r2, #67	@ 0x43
 8002238:	21d0      	movs	r1, #208	@ 0xd0
 800223a:	480b      	ldr	r0, [pc, #44]	@ (8002268 <MPU6050_Read_Data+0x150>)
 800223c:	f004 f9b0 	bl	80065a0 <HAL_I2C_Mem_Read>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d020      	beq.n	8002288 <MPU6050_Read_Data+0x170>
		return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e12e      	b.n	80024a8 <MPU6050_Read_Data+0x390>
 800224a:	bf00      	nop
 800224c:	f3af 8000 	nop.w
 8002250:	76c8b439 	.word	0x76c8b439
 8002254:	3f9a9fbe 	.word	0x3f9a9fbe
 8002258:	3126e979 	.word	0x3126e979
 800225c:	3f9cac08 	.word	0x3f9cac08
 8002260:	6a7ef9db 	.word	0x6a7ef9db
 8002264:	3fa374bc 	.word	0x3fa374bc
 8002268:	20000544 	.word	0x20000544
 800226c:	20000414 	.word	0x20000414
 8002270:	20000416 	.word	0x20000416
 8002274:	20000418 	.word	0x20000418
 8002278:	40b00000 	.word	0x40b00000
 800227c:	20000420 	.word	0x20000420
 8002280:	20000424 	.word	0x20000424
 8002284:	20000428 	.word	0x20000428
	Gyro_X_RAW = (int16_t)(Rec_Data_Gyro[0] << 8 | Rec_Data_Gyro [1]);
 8002288:	783b      	ldrb	r3, [r7, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	787b      	ldrb	r3, [r7, #1]
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21a      	sxth	r2, r3
 8002296:	4b92      	ldr	r3, [pc, #584]	@ (80024e0 <MPU6050_Read_Data+0x3c8>)
 8002298:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data_Gyro[2] << 8 | Rec_Data_Gyro [3]);
 800229a:	78bb      	ldrb	r3, [r7, #2]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21a      	sxth	r2, r3
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	4b8e      	ldr	r3, [pc, #568]	@ (80024e4 <MPU6050_Read_Data+0x3cc>)
 80022aa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data_Gyro[4] << 8 | Rec_Data_Gyro [5]);
 80022ac:	793b      	ldrb	r3, [r7, #4]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	797b      	ldrb	r3, [r7, #5]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	4b8b      	ldr	r3, [pc, #556]	@ (80024e8 <MPU6050_Read_Data+0x3d0>)
 80022bc:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/65.5 + 1.4654;
 80022be:	4b88      	ldr	r3, [pc, #544]	@ (80024e0 <MPU6050_Read_Data+0x3c8>)
 80022c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f8d1 	bl	800046c <__aeabi_i2d>
 80022ca:	a37b      	add	r3, pc, #492	@ (adr r3, 80024b8 <MPU6050_Read_Data+0x3a0>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe fa60 	bl	8000794 <__aeabi_ddiv>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	a378      	add	r3, pc, #480	@ (adr r3, 80024c0 <MPU6050_Read_Data+0x3a8>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fd ff77 	bl	80001d4 <__adddf3>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7fe fbff 	bl	8000af0 <__aeabi_d2f>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a7d      	ldr	r2, [pc, #500]	@ (80024ec <MPU6050_Read_Data+0x3d4>)
 80022f6:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/65.5 + 0.0916;
 80022f8:	4b7a      	ldr	r3, [pc, #488]	@ (80024e4 <MPU6050_Read_Data+0x3cc>)
 80022fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f8b4 	bl	800046c <__aeabi_i2d>
 8002304:	a36c      	add	r3, pc, #432	@ (adr r3, 80024b8 <MPU6050_Read_Data+0x3a0>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe fa43 	bl	8000794 <__aeabi_ddiv>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	a36c      	add	r3, pc, #432	@ (adr r3, 80024c8 <MPU6050_Read_Data+0x3b0>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ff5a 	bl	80001d4 <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fbe2 	bl	8000af0 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
 800232e:	4a70      	ldr	r2, [pc, #448]	@ (80024f0 <MPU6050_Read_Data+0x3d8>)
 8002330:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/65.5 - 0.97709;
 8002332:	4b6d      	ldr	r3, [pc, #436]	@ (80024e8 <MPU6050_Read_Data+0x3d0>)
 8002334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f897 	bl	800046c <__aeabi_i2d>
 800233e:	a35e      	add	r3, pc, #376	@ (adr r3, 80024b8 <MPU6050_Read_Data+0x3a0>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe fa26 	bl	8000794 <__aeabi_ddiv>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	a35f      	add	r3, pc, #380	@ (adr r3, 80024d0 <MPU6050_Read_Data+0x3b8>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	f7fd ff3b 	bl	80001d0 <__aeabi_dsub>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	f7fe fbc5 	bl	8000af0 <__aeabi_d2f>
 8002366:	4603      	mov	r3, r0
 8002368:	4a62      	ldr	r2, [pc, #392]	@ (80024f4 <MPU6050_Read_Data+0x3dc>)
 800236a:	6013      	str	r3, [r2, #0]
	
	AngleRoll = atan(Ay/(sqrt(Ax*Ax + Az*Az)))*180/pi;
 800236c:	4b62      	ldr	r3, [pc, #392]	@ (80024f8 <MPU6050_Read_Data+0x3e0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f88d 	bl	8000490 <__aeabi_f2d>
 8002376:	4680      	mov	r8, r0
 8002378:	4689      	mov	r9, r1
 800237a:	4b60      	ldr	r3, [pc, #384]	@ (80024fc <MPU6050_Read_Data+0x3e4>)
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	4b5e      	ldr	r3, [pc, #376]	@ (80024fc <MPU6050_Read_Data+0x3e4>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238a:	4b5d      	ldr	r3, [pc, #372]	@ (8002500 <MPU6050_Read_Data+0x3e8>)
 800238c:	edd3 6a00 	vldr	s13, [r3]
 8002390:	4b5b      	ldr	r3, [pc, #364]	@ (8002500 <MPU6050_Read_Data+0x3e8>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239e:	ee17 0a90 	vmov	r0, s15
 80023a2:	f7fe f875 	bl	8000490 <__aeabi_f2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	ec43 2b10 	vmov	d0, r2, r3
 80023ae:	f007 fe5d 	bl	800a06c <sqrt>
 80023b2:	ec53 2b10 	vmov	r2, r3, d0
 80023b6:	4640      	mov	r0, r8
 80023b8:	4649      	mov	r1, r9
 80023ba:	f7fe f9eb 	bl	8000794 <__aeabi_ddiv>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	ec43 2b17 	vmov	d7, r2, r3
 80023c6:	eeb0 0a47 	vmov.f32	s0, s14
 80023ca:	eef0 0a67 	vmov.f32	s1, s15
 80023ce:	f007 fe7b 	bl	800a0c8 <atan>
 80023d2:	ec51 0b10 	vmov	r0, r1, d0
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <MPU6050_Read_Data+0x3ec>)
 80023dc:	f7fe f8b0 	bl	8000540 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80024d8 <MPU6050_Read_Data+0x3c0>)
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ee:	f7fe f9d1 	bl	8000794 <__aeabi_ddiv>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fb79 	bl	8000af0 <__aeabi_d2f>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a41      	ldr	r2, [pc, #260]	@ (8002508 <MPU6050_Read_Data+0x3f0>)
 8002402:	6013      	str	r3, [r2, #0]
	AnglePitch = -atan(Ax/(sqrt(Ay*Ay + Az*Az)))*180/pi;
 8002404:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <MPU6050_Read_Data+0x3e4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f841 	bl	8000490 <__aeabi_f2d>
 800240e:	4680      	mov	r8, r0
 8002410:	4689      	mov	r9, r1
 8002412:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <MPU6050_Read_Data+0x3e0>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	4b37      	ldr	r3, [pc, #220]	@ (80024f8 <MPU6050_Read_Data+0x3e0>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002422:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <MPU6050_Read_Data+0x3e8>)
 8002424:	edd3 6a00 	vldr	s13, [r3]
 8002428:	4b35      	ldr	r3, [pc, #212]	@ (8002500 <MPU6050_Read_Data+0x3e8>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002436:	ee17 0a90 	vmov	r0, s15
 800243a:	f7fe f829 	bl	8000490 <__aeabi_f2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	ec43 2b10 	vmov	d0, r2, r3
 8002446:	f007 fe11 	bl	800a06c <sqrt>
 800244a:	ec53 2b10 	vmov	r2, r3, d0
 800244e:	4640      	mov	r0, r8
 8002450:	4649      	mov	r1, r9
 8002452:	f7fe f99f 	bl	8000794 <__aeabi_ddiv>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	ec43 2b17 	vmov	d7, r2, r3
 800245e:	eeb0 0a47 	vmov.f32	s0, s14
 8002462:	eef0 0a67 	vmov.f32	s1, s15
 8002466:	f007 fe2f 	bl	800a0c8 <atan>
 800246a:	ec53 2b10 	vmov	r2, r3, d0
 800246e:	4614      	mov	r4, r2
 8002470:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <MPU6050_Read_Data+0x3ec>)
 800247a:	4620      	mov	r0, r4
 800247c:	4629      	mov	r1, r5
 800247e:	f7fe f85f 	bl	8000540 <__aeabi_dmul>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	a313      	add	r3, pc, #76	@ (adr r3, 80024d8 <MPU6050_Read_Data+0x3c0>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fe f980 	bl	8000794 <__aeabi_ddiv>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fb28 	bl	8000af0 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a1a      	ldr	r2, [pc, #104]	@ (800250c <MPU6050_Read_Data+0x3f4>)
 80024a4:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024b2:	bf00      	nop
 80024b4:	f3af 8000 	nop.w
 80024b8:	00000000 	.word	0x00000000
 80024bc:	40506000 	.word	0x40506000
 80024c0:	4538ef35 	.word	0x4538ef35
 80024c4:	3ff77247 	.word	0x3ff77247
 80024c8:	fc504817 	.word	0xfc504817
 80024cc:	3fb77318 	.word	0x3fb77318
 80024d0:	3f67f4dc 	.word	0x3f67f4dc
 80024d4:	3fef4452 	.word	0x3fef4452
 80024d8:	f01b866e 	.word	0xf01b866e
 80024dc:	400921f9 	.word	0x400921f9
 80024e0:	2000041a 	.word	0x2000041a
 80024e4:	2000041c 	.word	0x2000041c
 80024e8:	2000041e 	.word	0x2000041e
 80024ec:	2000042c 	.word	0x2000042c
 80024f0:	20000430 	.word	0x20000430
 80024f4:	20000434 	.word	0x20000434
 80024f8:	20000424 	.word	0x20000424
 80024fc:	20000420 	.word	0x20000420
 8002500:	20000428 	.word	0x20000428
 8002504:	40668000 	.word	0x40668000
 8002508:	20000404 	.word	0x20000404
 800250c:	20000408 	.word	0x20000408

08002510 <hmc5883l_init>:

void hmc5883l_init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af04      	add	r7, sp, #16
	uint8_t data = 0x78; //0x78 la 75Hz   0x70 la 15Hz
 8002516:	2378      	movs	r3, #120	@ 0x78
 8002518:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3,0x3C,CONFIGURATION_A, 1, &data, 1,HAL_MAX_DELAY); //�?置寄存器A
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	2301      	movs	r3, #1
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2301      	movs	r3, #1
 800252a:	2200      	movs	r2, #0
 800252c:	213c      	movs	r1, #60	@ 0x3c
 800252e:	4814      	ldr	r0, [pc, #80]	@ (8002580 <hmc5883l_init+0x70>)
 8002530:	f003 ff3c 	bl	80063ac <HAL_I2C_Mem_Write>
	data = 0x20;   // ± 1.3 Ga
 8002534:	2320      	movs	r3, #32
 8002536:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3,0x3C,CONFIGURATION_B, 1, &data, 1,HAL_MAX_DELAY); //�?置寄存器B
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	2301      	movs	r3, #1
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	1dfb      	adds	r3, r7, #7
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2301      	movs	r3, #1
 8002548:	2201      	movs	r2, #1
 800254a:	213c      	movs	r1, #60	@ 0x3c
 800254c:	480c      	ldr	r0, [pc, #48]	@ (8002580 <hmc5883l_init+0x70>)
 800254e:	f003 ff2d 	bl	80063ac <HAL_I2C_Mem_Write>
	data = 0x00;  ////mode continuous measurement
 8002552:	2300      	movs	r3, #0
 8002554:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3,0x3C,HMC5883L_MODE, 1, &data, 1,HAL_MAX_DELAY);
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	9302      	str	r3, [sp, #8]
 800255c:	2301      	movs	r3, #1
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2301      	movs	r3, #1
 8002566:	2202      	movs	r2, #2
 8002568:	213c      	movs	r1, #60	@ 0x3c
 800256a:	4805      	ldr	r0, [pc, #20]	@ (8002580 <hmc5883l_init+0x70>)
 800256c:	f003 ff1e 	bl	80063ac <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8002570:	200a      	movs	r0, #10
 8002572:	f002 fd47 	bl	8005004 <HAL_Delay>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200005ec 	.word	0x200005ec
 8002584:	00000000 	.word	0x00000000

08002588 <hmc5883l_rawread>:

void hmc5883l_rawread(float *GaX, float *GaY, float *GaZ){
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	@ 0x30
 800258c:	af04      	add	r7, sp, #16
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c3, 0x3C, 0x03,I2C_MEMADD_SIZE_8BIT,(uint8_t *)data,6, 1000);
 8002594:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	2306      	movs	r3, #6
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2301      	movs	r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	213c      	movs	r1, #60	@ 0x3c
 80025aa:	4835      	ldr	r0, [pc, #212]	@ (8002680 <hmc5883l_rawread+0xf8>)
 80025ac:	f003 fff8 	bl	80065a0 <HAL_I2C_Mem_Read>
	int16_t dxra,dyra,dzra;
	dxra = (data[0] << 8) | data[1];
 80025b0:	7d3b      	ldrb	r3, [r7, #20]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	b21a      	sxth	r2, r3
 80025b6:	7d7b      	ldrb	r3, [r7, #21]
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	83fb      	strh	r3, [r7, #30]
	*GaX = (float)dxra*0.92;      //*GaX = (float)dxra /1090;
 80025be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ca:	ee17 0a90 	vmov	r0, s15
 80025ce:	f7fd ff5f 	bl	8000490 <__aeabi_f2d>
 80025d2:	a329      	add	r3, pc, #164	@ (adr r3, 8002678 <hmc5883l_rawread+0xf0>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	f7fd ffb2 	bl	8000540 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7fe fa84 	bl	8000af0 <__aeabi_d2f>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
	dyra = (data[4] << 8) | data[5];
 80025ee:	7e3b      	ldrb	r3, [r7, #24]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	7e7b      	ldrb	r3, [r7, #25]
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	83bb      	strh	r3, [r7, #28]
	*GaY = (float)dyra*0.92;  //*GaY = (float)dyra /1090 ;
 80025fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002608:	ee17 0a90 	vmov	r0, s15
 800260c:	f7fd ff40 	bl	8000490 <__aeabi_f2d>
 8002610:	a319      	add	r3, pc, #100	@ (adr r3, 8002678 <hmc5883l_rawread+0xf0>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd ff93 	bl	8000540 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fa65 	bl	8000af0 <__aeabi_d2f>
 8002626:	4602      	mov	r2, r0
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	601a      	str	r2, [r3, #0]
	dzra = (data[2] << 8) | data[3];
 800262c:	7dbb      	ldrb	r3, [r7, #22]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	b21a      	sxth	r2, r3
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	b21b      	sxth	r3, r3
 8002636:	4313      	orrs	r3, r2
 8002638:	837b      	strh	r3, [r7, #26]
	*GaZ = (float)dzra*0.92;	//*GaZ = (float)dzra /1090 ;
 800263a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002646:	ee17 0a90 	vmov	r0, s15
 800264a:	f7fd ff21 	bl	8000490 <__aeabi_f2d>
 800264e:	a30a      	add	r3, pc, #40	@ (adr r3, 8002678 <hmc5883l_rawread+0xf0>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd ff74 	bl	8000540 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe fa46 	bl	8000af0 <__aeabi_d2f>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	f3af 8000 	nop.w
 8002678:	d70a3d71 	.word	0xd70a3d71
 800267c:	3fed70a3 	.word	0x3fed70a3
 8002680:	200005ec 	.word	0x200005ec
 8002684:	00000000 	.word	0x00000000

08002688 <hmc5883l_read>:

void  hmc5883l_read(){
 8002688:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800268c:	af00      	add	r7, sp, #0

		hmc5883l_rawread(&rawGaX,&rawGaY,&rawGaZ);
 800268e:	4ace      	ldr	r2, [pc, #824]	@ (80029c8 <hmc5883l_read+0x340>)
 8002690:	49ce      	ldr	r1, [pc, #824]	@ (80029cc <hmc5883l_read+0x344>)
 8002692:	48cf      	ldr	r0, [pc, #828]	@ (80029d0 <hmc5883l_read+0x348>)
 8002694:	f7ff ff78 	bl	8002588 <hmc5883l_rawread>
		rawGaX *= -1;
 8002698:	4bcd      	ldr	r3, [pc, #820]	@ (80029d0 <hmc5883l_read+0x348>)
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	eef1 7a67 	vneg.f32	s15, s15
 80026a2:	4bcb      	ldr	r3, [pc, #812]	@ (80029d0 <hmc5883l_read+0x348>)
 80026a4:	edc3 7a00 	vstr	s15, [r3]
		rawGaY *= -1;
 80026a8:	4bc8      	ldr	r3, [pc, #800]	@ (80029cc <hmc5883l_read+0x344>)
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	eef1 7a67 	vneg.f32	s15, s15
 80026b2:	4bc6      	ldr	r3, [pc, #792]	@ (80029cc <hmc5883l_read+0x344>)
 80026b4:	edc3 7a00 	vstr	s15, [r3]
		GaY = rawGaX - 75.9000015;
 80026b8:	4bc5      	ldr	r3, [pc, #788]	@ (80029d0 <hmc5883l_read+0x348>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fd fee7 	bl	8000490 <__aeabi_f2d>
 80026c2:	a3b9      	add	r3, pc, #740	@ (adr r3, 80029a8 <hmc5883l_read+0x320>)
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f7fd fd82 	bl	80001d0 <__aeabi_dsub>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	f7fe fa0c 	bl	8000af0 <__aeabi_d2f>
 80026d8:	4603      	mov	r3, r0
 80026da:	4abe      	ldr	r2, [pc, #760]	@ (80029d4 <hmc5883l_read+0x34c>)
 80026dc:	6013      	str	r3, [r2, #0]
		GaX = rawGaY + 350.0600134;
 80026de:	4bbb      	ldr	r3, [pc, #748]	@ (80029cc <hmc5883l_read+0x344>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd fed4 	bl	8000490 <__aeabi_f2d>
 80026e8:	a3b1      	add	r3, pc, #708	@ (adr r3, 80029b0 <hmc5883l_read+0x328>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd fd71 	bl	80001d4 <__adddf3>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe f9f9 	bl	8000af0 <__aeabi_d2f>
 80026fe:	4603      	mov	r3, r0
 8002700:	4ab5      	ldr	r2, [pc, #724]	@ (80029d8 <hmc5883l_read+0x350>)
 8002702:	6013      	str	r3, [r2, #0]
		GaZ = rawGaZ + 54.2799988;
 8002704:	4bb0      	ldr	r3, [pc, #704]	@ (80029c8 <hmc5883l_read+0x340>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fec1 	bl	8000490 <__aeabi_f2d>
 800270e:	a3aa      	add	r3, pc, #680	@ (adr r3, 80029b8 <hmc5883l_read+0x330>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fd fd5e 	bl	80001d4 <__adddf3>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe f9e6 	bl	8000af0 <__aeabi_d2f>
 8002724:	4603      	mov	r3, r0
 8002726:	4aad      	ldr	r2, [pc, #692]	@ (80029dc <hmc5883l_read+0x354>)
 8002728:	6013      	str	r3, [r2, #0]

		mz = GaZ;
 800272a:	4bac      	ldr	r3, [pc, #688]	@ (80029dc <hmc5883l_read+0x354>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4aac      	ldr	r2, [pc, #688]	@ (80029e0 <hmc5883l_read+0x358>)
 8002730:	6013      	str	r3, [r2, #0]
		mx = GaX;
 8002732:	4ba9      	ldr	r3, [pc, #676]	@ (80029d8 <hmc5883l_read+0x350>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4aab      	ldr	r2, [pc, #684]	@ (80029e4 <hmc5883l_read+0x35c>)
 8002738:	6013      	str	r3, [r2, #0]
		my = GaY;
 800273a:	4ba6      	ldr	r3, [pc, #664]	@ (80029d4 <hmc5883l_read+0x34c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4aaa      	ldr	r2, [pc, #680]	@ (80029e8 <hmc5883l_read+0x360>)
 8002740:	6013      	str	r3, [r2, #0]

		compass_x_horizontal = (float)GaX * cos(KalmanAnglePitch * (pi/180))
 8002742:	4ba5      	ldr	r3, [pc, #660]	@ (80029d8 <hmc5883l_read+0x350>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd fea2 	bl	8000490 <__aeabi_f2d>
 800274c:	4604      	mov	r4, r0
 800274e:	460d      	mov	r5, r1
 8002750:	4ba6      	ldr	r3, [pc, #664]	@ (80029ec <hmc5883l_read+0x364>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fe9b 	bl	8000490 <__aeabi_f2d>
 800275a:	a399      	add	r3, pc, #612	@ (adr r3, 80029c0 <hmc5883l_read+0x338>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fd feee 	bl	8000540 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	ec43 2b17 	vmov	d7, r2, r3
 800276c:	eeb0 0a47 	vmov.f32	s0, s14
 8002770:	eef0 0a67 	vmov.f32	s1, s15
 8002774:	f007 fe40 	bl	800a3f8 <cos>
 8002778:	ec53 2b10 	vmov	r2, r3, d0
 800277c:	4620      	mov	r0, r4
 800277e:	4629      	mov	r1, r5
 8002780:	f7fd fede 	bl	8000540 <__aeabi_dmul>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4690      	mov	r8, r2
 800278a:	4699      	mov	r9, r3
		                        + (float)GaY * sin(KalmanAngleRoll * (pi/180))* sin(KalmanAnglePitch * (pi/180))
 800278c:	4b91      	ldr	r3, [pc, #580]	@ (80029d4 <hmc5883l_read+0x34c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fe7d 	bl	8000490 <__aeabi_f2d>
 8002796:	4604      	mov	r4, r0
 8002798:	460d      	mov	r5, r1
 800279a:	4b95      	ldr	r3, [pc, #596]	@ (80029f0 <hmc5883l_read+0x368>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe76 	bl	8000490 <__aeabi_f2d>
 80027a4:	a386      	add	r3, pc, #536	@ (adr r3, 80029c0 <hmc5883l_read+0x338>)
 80027a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027aa:	f7fd fec9 	bl	8000540 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	ec43 2b17 	vmov	d7, r2, r3
 80027b6:	eeb0 0a47 	vmov.f32	s0, s14
 80027ba:	eef0 0a67 	vmov.f32	s1, s15
 80027be:	f007 fe77 	bl	800a4b0 <sin>
 80027c2:	ec53 2b10 	vmov	r2, r3, d0
 80027c6:	4620      	mov	r0, r4
 80027c8:	4629      	mov	r1, r5
 80027ca:	f7fd feb9 	bl	8000540 <__aeabi_dmul>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4614      	mov	r4, r2
 80027d4:	461d      	mov	r5, r3
 80027d6:	4b85      	ldr	r3, [pc, #532]	@ (80029ec <hmc5883l_read+0x364>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fe58 	bl	8000490 <__aeabi_f2d>
 80027e0:	a377      	add	r3, pc, #476	@ (adr r3, 80029c0 <hmc5883l_read+0x338>)
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f7fd feab 	bl	8000540 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	ec43 2b17 	vmov	d7, r2, r3
 80027f2:	eeb0 0a47 	vmov.f32	s0, s14
 80027f6:	eef0 0a67 	vmov.f32	s1, s15
 80027fa:	f007 fe59 	bl	800a4b0 <sin>
 80027fe:	ec53 2b10 	vmov	r2, r3, d0
 8002802:	4620      	mov	r0, r4
 8002804:	4629      	mov	r1, r5
 8002806:	f7fd fe9b 	bl	8000540 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4640      	mov	r0, r8
 8002810:	4649      	mov	r1, r9
 8002812:	f7fd fcdf 	bl	80001d4 <__adddf3>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	4690      	mov	r8, r2
 800281c:	4699      	mov	r9, r3
		                        - (float)GaZ * cos(KalmanAngleRoll * (pi/180)) * sin(KalmanAnglePitch * (pi/180));
 800281e:	4b6f      	ldr	r3, [pc, #444]	@ (80029dc <hmc5883l_read+0x354>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe34 	bl	8000490 <__aeabi_f2d>
 8002828:	4604      	mov	r4, r0
 800282a:	460d      	mov	r5, r1
 800282c:	4b70      	ldr	r3, [pc, #448]	@ (80029f0 <hmc5883l_read+0x368>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fe2d 	bl	8000490 <__aeabi_f2d>
 8002836:	a362      	add	r3, pc, #392	@ (adr r3, 80029c0 <hmc5883l_read+0x338>)
 8002838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283c:	f7fd fe80 	bl	8000540 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	ec43 2b17 	vmov	d7, r2, r3
 8002848:	eeb0 0a47 	vmov.f32	s0, s14
 800284c:	eef0 0a67 	vmov.f32	s1, s15
 8002850:	f007 fdd2 	bl	800a3f8 <cos>
 8002854:	ec53 2b10 	vmov	r2, r3, d0
 8002858:	4620      	mov	r0, r4
 800285a:	4629      	mov	r1, r5
 800285c:	f7fd fe70 	bl	8000540 <__aeabi_dmul>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4b60      	ldr	r3, [pc, #384]	@ (80029ec <hmc5883l_read+0x364>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fe0f 	bl	8000490 <__aeabi_f2d>
 8002872:	a353      	add	r3, pc, #332	@ (adr r3, 80029c0 <hmc5883l_read+0x338>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd fe62 	bl	8000540 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	ec43 2b17 	vmov	d7, r2, r3
 8002884:	eeb0 0a47 	vmov.f32	s0, s14
 8002888:	eef0 0a67 	vmov.f32	s1, s15
 800288c:	f007 fe10 	bl	800a4b0 <sin>
 8002890:	ec53 2b10 	vmov	r2, r3, d0
 8002894:	4620      	mov	r0, r4
 8002896:	4629      	mov	r1, r5
 8002898:	f7fd fe52 	bl	8000540 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4640      	mov	r0, r8
 80028a2:	4649      	mov	r1, r9
 80028a4:	f7fd fc94 	bl	80001d0 <__aeabi_dsub>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe f91e 	bl	8000af0 <__aeabi_d2f>
 80028b4:	4603      	mov	r3, r0
		compass_x_horizontal = (float)GaX * cos(KalmanAnglePitch * (pi/180))
 80028b6:	4a4f      	ldr	r2, [pc, #316]	@ (80029f4 <hmc5883l_read+0x36c>)
 80028b8:	6013      	str	r3, [r2, #0]
		compass_y_horizontal = (float)GaY * cos(KalmanAngleRoll * (pi/180))
 80028ba:	4b46      	ldr	r3, [pc, #280]	@ (80029d4 <hmc5883l_read+0x34c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd fde6 	bl	8000490 <__aeabi_f2d>
 80028c4:	4604      	mov	r4, r0
 80028c6:	460d      	mov	r5, r1
 80028c8:	4b49      	ldr	r3, [pc, #292]	@ (80029f0 <hmc5883l_read+0x368>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fddf 	bl	8000490 <__aeabi_f2d>
 80028d2:	a33b      	add	r3, pc, #236	@ (adr r3, 80029c0 <hmc5883l_read+0x338>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f7fd fe32 	bl	8000540 <__aeabi_dmul>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	ec43 2b17 	vmov	d7, r2, r3
 80028e4:	eeb0 0a47 	vmov.f32	s0, s14
 80028e8:	eef0 0a67 	vmov.f32	s1, s15
 80028ec:	f007 fd84 	bl	800a3f8 <cos>
 80028f0:	ec53 2b10 	vmov	r2, r3, d0
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fd fe22 	bl	8000540 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4690      	mov	r8, r2
 8002902:	4699      	mov	r9, r3
		                        + (float)GaZ * sin(KalmanAngleRoll * (pi/180));
 8002904:	4b35      	ldr	r3, [pc, #212]	@ (80029dc <hmc5883l_read+0x354>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fdc1 	bl	8000490 <__aeabi_f2d>
 800290e:	4604      	mov	r4, r0
 8002910:	460d      	mov	r5, r1
 8002912:	4b37      	ldr	r3, [pc, #220]	@ (80029f0 <hmc5883l_read+0x368>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fdba 	bl	8000490 <__aeabi_f2d>
 800291c:	a328      	add	r3, pc, #160	@ (adr r3, 80029c0 <hmc5883l_read+0x338>)
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f7fd fe0d 	bl	8000540 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	ec43 2b17 	vmov	d7, r2, r3
 800292e:	eeb0 0a47 	vmov.f32	s0, s14
 8002932:	eef0 0a67 	vmov.f32	s1, s15
 8002936:	f007 fdbb 	bl	800a4b0 <sin>
 800293a:	ec53 2b10 	vmov	r2, r3, d0
 800293e:	4620      	mov	r0, r4
 8002940:	4629      	mov	r1, r5
 8002942:	f7fd fdfd 	bl	8000540 <__aeabi_dmul>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4640      	mov	r0, r8
 800294c:	4649      	mov	r1, r9
 800294e:	f7fd fc41 	bl	80001d4 <__adddf3>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f7fe f8c9 	bl	8000af0 <__aeabi_d2f>
 800295e:	4603      	mov	r3, r0
		compass_y_horizontal = (float)GaY * cos(KalmanAngleRoll * (pi/180))
 8002960:	4a25      	ldr	r2, [pc, #148]	@ (80029f8 <hmc5883l_read+0x370>)
 8002962:	6013      	str	r3, [r2, #0]
		actual_compass_heading = atan2(compass_y_horizontal,compass_x_horizontal)*180/pi;
 8002964:	4b24      	ldr	r3, [pc, #144]	@ (80029f8 <hmc5883l_read+0x370>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fd91 	bl	8000490 <__aeabi_f2d>
 800296e:	4604      	mov	r4, r0
 8002970:	460d      	mov	r5, r1
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <hmc5883l_read+0x36c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fd8a 	bl	8000490 <__aeabi_f2d>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	ec43 2b11 	vmov	d1, r2, r3
 8002984:	ec45 4b10 	vmov	d0, r4, r5
 8002988:	f007 fafe 	bl	8009f88 <atan2>
 800298c:	ec51 0b10 	vmov	r0, r1, d0
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <hmc5883l_read+0x374>)
 8002996:	f7fd fdd3 	bl	8000540 <__aeabi_dmul>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	e02d      	b.n	8002a00 <hmc5883l_read+0x378>
 80029a4:	f3af 8000 	nop.w
 80029a8:	9fe43676 	.word	0x9fe43676
 80029ac:	4052f999 	.word	0x4052f999
 80029b0:	d09c6526 	.word	0xd09c6526
 80029b4:	4075e0f5 	.word	0x4075e0f5
 80029b8:	002c75aa 	.word	0x002c75aa
 80029bc:	404b23d7 	.word	0x404b23d7
 80029c0:	a50de270 	.word	0xa50de270
 80029c4:	3f91df45 	.word	0x3f91df45
 80029c8:	2000051c 	.word	0x2000051c
 80029cc:	20000518 	.word	0x20000518
 80029d0:	20000514 	.word	0x20000514
 80029d4:	20000524 	.word	0x20000524
 80029d8:	20000520 	.word	0x20000520
 80029dc:	20000528 	.word	0x20000528
 80029e0:	20000534 	.word	0x20000534
 80029e4:	2000052c 	.word	0x2000052c
 80029e8:	20000530 	.word	0x20000530
 80029ec:	2000048c 	.word	0x2000048c
 80029f0:	20000488 	.word	0x20000488
 80029f4:	20000538 	.word	0x20000538
 80029f8:	2000053c 	.word	0x2000053c
 80029fc:	40668000 	.word	0x40668000
 8002a00:	a329      	add	r3, pc, #164	@ (adr r3, 8002aa8 <hmc5883l_read+0x420>)
 8002a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a06:	f7fd fec5 	bl	8000794 <__aeabi_ddiv>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7fe f86d 	bl	8000af0 <__aeabi_d2f>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4a21      	ldr	r2, [pc, #132]	@ (8002aa0 <hmc5883l_read+0x418>)
 8002a1a:	6013      	str	r3, [r2, #0]
		actual_compass_heading += 7.001;
 8002a1c:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <hmc5883l_read+0x418>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fd35 	bl	8000490 <__aeabi_f2d>
 8002a26:	a31c      	add	r3, pc, #112	@ (adr r3, 8002a98 <hmc5883l_read+0x410>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fbd2 	bl	80001d4 <__adddf3>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4610      	mov	r0, r2
 8002a36:	4619      	mov	r1, r3
 8002a38:	f7fe f85a 	bl	8000af0 <__aeabi_d2f>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	4a18      	ldr	r2, [pc, #96]	@ (8002aa0 <hmc5883l_read+0x418>)
 8002a40:	6013      	str	r3, [r2, #0]
		if(actual_compass_heading < 0) actual_compass_heading += 360;
 8002a42:	4b17      	ldr	r3, [pc, #92]	@ (8002aa0 <hmc5883l_read+0x418>)
 8002a44:	edd3 7a00 	vldr	s15, [r3]
 8002a48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a50:	d50a      	bpl.n	8002a68 <hmc5883l_read+0x3e0>
 8002a52:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <hmc5883l_read+0x418>)
 8002a54:	edd3 7a00 	vldr	s15, [r3]
 8002a58:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002aa4 <hmc5883l_read+0x41c>
 8002a5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <hmc5883l_read+0x418>)
 8002a62:	edc3 7a00 	vstr	s15, [r3]
		else if(actual_compass_heading > 360) actual_compass_heading -= 360;
}
 8002a66:	e014      	b.n	8002a92 <hmc5883l_read+0x40a>
		else if(actual_compass_heading > 360) actual_compass_heading -= 360;
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <hmc5883l_read+0x418>)
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002aa4 <hmc5883l_read+0x41c>
 8002a72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	dc00      	bgt.n	8002a7e <hmc5883l_read+0x3f6>
}
 8002a7c:	e009      	b.n	8002a92 <hmc5883l_read+0x40a>
		else if(actual_compass_heading > 360) actual_compass_heading -= 360;
 8002a7e:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <hmc5883l_read+0x418>)
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002aa4 <hmc5883l_read+0x41c>
 8002a88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a8c:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <hmc5883l_read+0x418>)
 8002a8e:	edc3 7a00 	vstr	s15, [r3]
}
 8002a92:	bf00      	nop
 8002a94:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a98:	24dd2f1b 	.word	0x24dd2f1b
 8002a9c:	401c0106 	.word	0x401c0106
 8002aa0:	20000540 	.word	0x20000540
 8002aa4:	43b40000 	.word	0x43b40000
 8002aa8:	f01b866e 	.word	0xf01b866e
 8002aac:	400921f9 	.word	0x400921f9

08002ab0 <pid_equation>:

void Calib_Gyro(void);
void Reset_MPU6050(void);

void pid_equation(float Error, float P , float I, float D, float PrevError, float PrevIterm) {
 8002ab0:	b5b0      	push	{r4, r5, r7, lr}
 8002ab2:	b08a      	sub	sp, #40	@ 0x28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	ed87 0a05 	vstr	s0, [r7, #20]
 8002aba:	edc7 0a04 	vstr	s1, [r7, #16]
 8002abe:	ed87 1a03 	vstr	s2, [r7, #12]
 8002ac2:	edc7 1a02 	vstr	s3, [r7, #8]
 8002ac6:	ed87 2a01 	vstr	s4, [r7, #4]
 8002aca:	edc7 2a00 	vstr	s5, [r7]
  // T = 4ms chu ky lay mau, 250Hz
  // T = 20ms chu ky lay mau, 50Hz
  float Pterm=P*Error;
 8002ace:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ad2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ada:	edc7 7a07 	vstr	s15, [r7, #28]
  float Iterm=PrevIterm+I*(Error+PrevError)*0.004/2;
 8002ade:	6838      	ldr	r0, [r7, #0]
 8002ae0:	f7fd fcd6 	bl	8000490 <__aeabi_f2d>
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	460d      	mov	r5, r1
 8002ae8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002aec:	edd7 7a01 	vldr	s15, [r7, #4]
 8002af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afc:	ee17 0a90 	vmov	r0, s15
 8002b00:	f7fd fcc6 	bl	8000490 <__aeabi_f2d>
 8002b04:	a340      	add	r3, pc, #256	@ (adr r3, 8002c08 <pid_equation+0x158>)
 8002b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0a:	f7fd fd19 	bl	8000540 <__aeabi_dmul>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4610      	mov	r0, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b1e:	f7fd fe39 	bl	8000794 <__aeabi_ddiv>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4620      	mov	r0, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	f7fd fb53 	bl	80001d4 <__adddf3>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7fd ffdb 	bl	8000af0 <__aeabi_d2f>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (Iterm > 400) Iterm=400;
 8002b3e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b42:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002c10 <pid_equation+0x160>
 8002b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b4e:	dd02      	ble.n	8002b56 <pid_equation+0xa6>
 8002b50:	4b30      	ldr	r3, [pc, #192]	@ (8002c14 <pid_equation+0x164>)
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b54:	e00a      	b.n	8002b6c <pid_equation+0xbc>
  else if (Iterm <-400) Iterm=-400;
 8002b56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b5a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002c18 <pid_equation+0x168>
 8002b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b66:	d501      	bpl.n	8002b6c <pid_equation+0xbc>
 8002b68:	4b2c      	ldr	r3, [pc, #176]	@ (8002c1c <pid_equation+0x16c>)
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  float Dterm=D*(Error-PrevError)/0.004;
 8002b6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b70:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b80:	ee17 0a90 	vmov	r0, s15
 8002b84:	f7fd fc84 	bl	8000490 <__aeabi_f2d>
 8002b88:	a31f      	add	r3, pc, #124	@ (adr r3, 8002c08 <pid_equation+0x158>)
 8002b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8e:	f7fd fe01 	bl	8000794 <__aeabi_ddiv>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fd ffa9 	bl	8000af0 <__aeabi_d2f>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	61bb      	str	r3, [r7, #24]
  float PIDOutput= Pterm+Iterm+Dterm;
 8002ba2:	ed97 7a07 	vldr	s14, [r7, #28]
 8002ba6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bae:	ed97 7a06 	vldr	s14, [r7, #24]
 8002bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb6:	edc7 7a08 	vstr	s15, [r7, #32]
  if (PIDOutput>400) PIDOutput=400;
 8002bba:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bbe:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002c10 <pid_equation+0x160>
 8002bc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bca:	dd02      	ble.n	8002bd2 <pid_equation+0x122>
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <pid_equation+0x164>)
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	e00a      	b.n	8002be8 <pid_equation+0x138>
  else if (PIDOutput <-400) PIDOutput=-400;
 8002bd2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bd6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002c18 <pid_equation+0x168>
 8002bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be2:	d501      	bpl.n	8002be8 <pid_equation+0x138>
 8002be4:	4b0d      	ldr	r3, [pc, #52]	@ (8002c1c <pid_equation+0x16c>)
 8002be6:	623b      	str	r3, [r7, #32]
  PIDReturn[0]=PIDOutput;
 8002be8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c20 <pid_equation+0x170>)
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	6013      	str	r3, [r2, #0]
  PIDReturn[1]=Error;
 8002bee:	4a0c      	ldr	r2, [pc, #48]	@ (8002c20 <pid_equation+0x170>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	6053      	str	r3, [r2, #4]
  PIDReturn[2]=Iterm;
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8002c20 <pid_equation+0x170>)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	6093      	str	r3, [r2, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	3728      	adds	r7, #40	@ 0x28
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bdb0      	pop	{r4, r5, r7, pc}
 8002c02:	bf00      	nop
 8002c04:	f3af 8000 	nop.w
 8002c08:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c0c:	3f70624d 	.word	0x3f70624d
 8002c10:	43c80000 	.word	0x43c80000
 8002c14:	43c80000 	.word	0x43c80000
 8002c18:	c3c80000 	.word	0xc3c80000
 8002c1c:	c3c80000 	.word	0xc3c80000
 8002c20:	200004d8 	.word	0x200004d8

08002c24 <reset_pid>:

void reset_pid(void) {
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  PrevErrorRateRoll=0; PrevErrorRatePitch=0; PrevErrorRateYaw=0;
 8002c28:	4b16      	ldr	r3, [pc, #88]	@ (8002c84 <reset_pid+0x60>)
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	4b15      	ldr	r3, [pc, #84]	@ (8002c88 <reset_pid+0x64>)
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	4b14      	ldr	r3, [pc, #80]	@ (8002c8c <reset_pid+0x68>)
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
  PrevItermRateRoll=0; PrevItermRatePitch=0; PrevItermRateYaw=0;
 8002c40:	4b13      	ldr	r3, [pc, #76]	@ (8002c90 <reset_pid+0x6c>)
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	4b12      	ldr	r3, [pc, #72]	@ (8002c94 <reset_pid+0x70>)
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <reset_pid+0x74>)
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
  PrevErrorAngleRoll=0; PrevErrorAnglePitch=0;    
 8002c58:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <reset_pid+0x78>)
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca0 <reset_pid+0x7c>)
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
  PrevItermAngleRoll=0; PrevItermAnglePitch=0;
 8002c68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca4 <reset_pid+0x80>)
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <reset_pid+0x84>)
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	200004c0 	.word	0x200004c0
 8002c88:	200004c4 	.word	0x200004c4
 8002c8c:	200004c8 	.word	0x200004c8
 8002c90:	200004cc 	.word	0x200004cc
 8002c94:	200004d0 	.word	0x200004d0
 8002c98:	200004d4 	.word	0x200004d4
 8002c9c:	20000504 	.word	0x20000504
 8002ca0:	20000508 	.word	0x20000508
 8002ca4:	2000050c 	.word	0x2000050c
 8002ca8:	20000510 	.word	0x20000510

08002cac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a05      	ldr	r2, [pc, #20]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d103      	bne.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{	
		Send_Data_To_Gui();
 8002cbe:	f7fe fff3 	bl	8001ca8 <Send_Data_To_Gui>
		hmc5883l_read();  //read compass
 8002cc2:	f7ff fce1 	bl	8002688 <hmc5883l_read>
	}
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40000800 	.word	0x40000800

08002cd4 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{   
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buff, sizeof(Rx_buff));
 8002ce0:	224b      	movs	r2, #75	@ 0x4b
 8002ce2:	4975      	ldr	r1, [pc, #468]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002ce4:	4875      	ldr	r0, [pc, #468]	@ (8002ebc <HAL_UARTEx_RxEventCallback+0x1e8>)
 8002ce6:	f005 ffcb 	bl	8008c80 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002cea:	4b75      	ldr	r3, [pc, #468]	@ (8002ec0 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4b73      	ldr	r3, [pc, #460]	@ (8002ec0 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0208 	bic.w	r2, r2, #8
 8002cf8:	601a      	str	r2, [r3, #0]
	size_RxData = Size;
 8002cfa:	4a72      	ldr	r2, [pc, #456]	@ (8002ec4 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8002cfc:	887b      	ldrh	r3, [r7, #2]
 8002cfe:	8013      	strh	r3, [r2, #0]
	if ((Rx_buff[0] == 0xAA) && (Rx_buff[1] == 0xFF) && (Rx_buff[2] == size_RxData))
 8002d00:	4b6d      	ldr	r3, [pc, #436]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2baa      	cmp	r3, #170	@ 0xaa
 8002d06:	f040 809e 	bne.w	8002e46 <HAL_UARTEx_RxEventCallback+0x172>
 8002d0a:	4b6b      	ldr	r3, [pc, #428]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002d0c:	785b      	ldrb	r3, [r3, #1]
 8002d0e:	2bff      	cmp	r3, #255	@ 0xff
 8002d10:	f040 8099 	bne.w	8002e46 <HAL_UARTEx_RxEventCallback+0x172>
 8002d14:	4b68      	ldr	r3, [pc, #416]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002d16:	789b      	ldrb	r3, [r3, #2]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec4 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	f040 8091 	bne.w	8002e46 <HAL_UARTEx_RxEventCallback+0x172>
	{
		memset(Tx_buff, 0, sizeof(Tx_buff));
 8002d24:	2246      	movs	r2, #70	@ 0x46
 8002d26:	2100      	movs	r1, #0
 8002d28:	4867      	ldr	r0, [pc, #412]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002d2a:	f007 f8ed 	bl	8009f08 <memset>
		memcpy(Rx_Data, Rx_buff, sizeof(Rx_buff));
 8002d2e:	4a67      	ldr	r2, [pc, #412]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d30:	4b61      	ldr	r3, [pc, #388]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	234b      	movs	r3, #75	@ 0x4b
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f007 f917 	bl	8009f6c <memcpy>
		memset(Rx_buff, 0, sizeof(Rx_buff));
 8002d3e:	224b      	movs	r2, #75	@ 0x4b
 8002d40:	2100      	movs	r1, #0
 8002d42:	485d      	ldr	r0, [pc, #372]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002d44:	f007 f8e0 	bl	8009f08 <memset>

		// gan gia tri pid vao
		memcpy(&PAngleRoll, &Rx_Data[3], sizeof(float));
 8002d48:	4b60      	ldr	r3, [pc, #384]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d4a:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed0 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8002d52:	601a      	str	r2, [r3, #0]
		memcpy(&IAngleRoll, &Rx_Data[7], sizeof(float));
 8002d54:	4b5d      	ldr	r3, [pc, #372]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d56:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed4 <HAL_UARTEx_RxEventCallback+0x200>)
 8002d5e:	601a      	str	r2, [r3, #0]
		memcpy(&DAngleRoll, &Rx_Data[11], sizeof(float));
 8002d60:	4b5a      	ldr	r3, [pc, #360]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d62:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed8 <HAL_UARTEx_RxEventCallback+0x204>)
 8002d6a:	601a      	str	r2, [r3, #0]

		memcpy(&PAnglePitch, &Rx_Data[15], sizeof(float));
 8002d6c:	4b57      	ldr	r3, [pc, #348]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d6e:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b59      	ldr	r3, [pc, #356]	@ (8002edc <HAL_UARTEx_RxEventCallback+0x208>)
 8002d76:	601a      	str	r2, [r3, #0]
		memcpy(&IAnglePitch, &Rx_Data[19], sizeof(float));
 8002d78:	4b54      	ldr	r3, [pc, #336]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d7a:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b57      	ldr	r3, [pc, #348]	@ (8002ee0 <HAL_UARTEx_RxEventCallback+0x20c>)
 8002d82:	601a      	str	r2, [r3, #0]
		memcpy(&DAnglePitch, &Rx_Data[23], sizeof(float));
 8002d84:	4b51      	ldr	r3, [pc, #324]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d86:	f8d3 3017 	ldr.w	r3, [r3, #23]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b55      	ldr	r3, [pc, #340]	@ (8002ee4 <HAL_UARTEx_RxEventCallback+0x210>)
 8002d8e:	601a      	str	r2, [r3, #0]

		memcpy(&PRateRoll, &Rx_Data[27], sizeof(float));
 8002d90:	4b4e      	ldr	r3, [pc, #312]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d92:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b53      	ldr	r3, [pc, #332]	@ (8002ee8 <HAL_UARTEx_RxEventCallback+0x214>)
 8002d9a:	601a      	str	r2, [r3, #0]
		memcpy(&IRateRoll, &Rx_Data[31], sizeof(float));
 8002d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d9e:	f8d3 301f 	ldr.w	r3, [r3, #31]
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b51      	ldr	r3, [pc, #324]	@ (8002eec <HAL_UARTEx_RxEventCallback+0x218>)
 8002da6:	601a      	str	r2, [r3, #0]
		memcpy(&DRateRoll, &Rx_Data[35], sizeof(float));
 8002da8:	4b48      	ldr	r3, [pc, #288]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002daa:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef0 <HAL_UARTEx_RxEventCallback+0x21c>)
 8002db2:	601a      	str	r2, [r3, #0]

		memcpy(&PRatePitch, &Rx_Data[39], sizeof(float));
 8002db4:	4b45      	ldr	r3, [pc, #276]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002db6:	f8d3 3027 	ldr.w	r3, [r3, #39]	@ 0x27
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef4 <HAL_UARTEx_RxEventCallback+0x220>)
 8002dbe:	601a      	str	r2, [r3, #0]
		memcpy(&IRatePitch, &Rx_Data[43], sizeof(float));
 8002dc0:	4b42      	ldr	r3, [pc, #264]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002dc2:	f8d3 302b 	ldr.w	r3, [r3, #43]	@ 0x2b
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ef8 <HAL_UARTEx_RxEventCallback+0x224>)
 8002dca:	601a      	str	r2, [r3, #0]
		memcpy(&DRatePitch, &Rx_Data[47], sizeof(float));
 8002dcc:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002dce:	f8d3 302f 	ldr.w	r3, [r3, #47]	@ 0x2f
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4b49      	ldr	r3, [pc, #292]	@ (8002efc <HAL_UARTEx_RxEventCallback+0x228>)
 8002dd6:	601a      	str	r2, [r3, #0]

		memcpy(&PRateYaw, &Rx_Data[51], sizeof(float));
 8002dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002dda:	f8d3 3033 	ldr.w	r3, [r3, #51]	@ 0x33
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_UARTEx_RxEventCallback+0x22c>)
 8002de2:	601a      	str	r2, [r3, #0]
		memcpy(&IRateYaw, &Rx_Data[55], sizeof(float));
 8002de4:	4b39      	ldr	r3, [pc, #228]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002de6:	f8d3 3037 	ldr.w	r3, [r3, #55]	@ 0x37
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b45      	ldr	r3, [pc, #276]	@ (8002f04 <HAL_UARTEx_RxEventCallback+0x230>)
 8002dee:	601a      	str	r2, [r3, #0]
		memcpy(&DRateYaw, &Rx_Data[59], sizeof(float));
 8002df0:	4b36      	ldr	r3, [pc, #216]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002df2:	f8d3 303b 	ldr.w	r3, [r3, #59]	@ 0x3b
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b43      	ldr	r3, [pc, #268]	@ (8002f08 <HAL_UARTEx_RxEventCallback+0x234>)
 8002dfa:	601a      	str	r2, [r3, #0]

		memcpy(&pid_p_gain_altitude, &Rx_Data[63], sizeof(float));
 8002dfc:	4b33      	ldr	r3, [pc, #204]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002dfe:	f8d3 303f 	ldr.w	r3, [r3, #63]	@ 0x3f
 8002e02:	461a      	mov	r2, r3
 8002e04:	4b41      	ldr	r3, [pc, #260]	@ (8002f0c <HAL_UARTEx_RxEventCallback+0x238>)
 8002e06:	601a      	str	r2, [r3, #0]
		memcpy(&pid_i_gain_altitude, &Rx_Data[67], sizeof(float));
 8002e08:	4b30      	ldr	r3, [pc, #192]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002e0a:	f8d3 3043 	ldr.w	r3, [r3, #67]	@ 0x43
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b3f      	ldr	r3, [pc, #252]	@ (8002f10 <HAL_UARTEx_RxEventCallback+0x23c>)
 8002e12:	601a      	str	r2, [r3, #0]
		memcpy(&pid_d_gain_altitude, &Rx_Data[71], sizeof(float));
 8002e14:	4b2d      	ldr	r3, [pc, #180]	@ (8002ecc <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002e16:	f8d3 3047 	ldr.w	r3, [r3, #71]	@ 0x47
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <HAL_UARTEx_RxEventCallback+0x240>)
 8002e1e:	601a      	str	r2, [r3, #0]

		Tx_buff[0] = 'B'; Tx_buff[1] = 'E';Tx_buff[38] = '\r'; Tx_buff[39] = '\n';
 8002e20:	4b29      	ldr	r3, [pc, #164]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e22:	2242      	movs	r2, #66	@ 0x42
 8002e24:	701a      	strb	r2, [r3, #0]
 8002e26:	4b28      	ldr	r3, [pc, #160]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e28:	2245      	movs	r2, #69	@ 0x45
 8002e2a:	705a      	strb	r2, [r3, #1]
 8002e2c:	4b26      	ldr	r3, [pc, #152]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e2e:	220d      	movs	r2, #13
 8002e30:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8002e34:	4b24      	ldr	r3, [pc, #144]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e36:	220a      	movs	r2, #10
 8002e38:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Tx_buff,40);
 8002e3c:	2228      	movs	r2, #40	@ 0x28
 8002e3e:	4922      	ldr	r1, [pc, #136]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e40:	481e      	ldr	r0, [pc, #120]	@ (8002ebc <HAL_UARTEx_RxEventCallback+0x1e8>)
 8002e42:	f005 fe6f 	bl	8008b24 <HAL_UART_Transmit_DMA>
		//memset(Tx_buff, 0, sizeof(Tx_buff));	
	}
	if ((Rx_buff[0] == 0xCC) && (Rx_buff[1] == 0xDD))
 8002e46:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2bcc      	cmp	r3, #204	@ 0xcc
 8002e4c:	d12f      	bne.n	8002eae <HAL_UARTEx_RxEventCallback+0x1da>
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002e50:	785b      	ldrb	r3, [r3, #1]
 8002e52:	2bdd      	cmp	r3, #221	@ 0xdd
 8002e54:	d12b      	bne.n	8002eae <HAL_UARTEx_RxEventCallback+0x1da>
	{
		memset(Tx_buff, 0, sizeof(Tx_buff));
 8002e56:	2246      	movs	r2, #70	@ 0x46
 8002e58:	2100      	movs	r1, #0
 8002e5a:	481b      	ldr	r0, [pc, #108]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e5c:	f007 f854 	bl	8009f08 <memset>
		Flag_Plot = Rx_buff[2];
 8002e60:	4b15      	ldr	r3, [pc, #84]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002e62:	789a      	ldrb	r2, [r3, #2]
 8002e64:	4b2c      	ldr	r3, [pc, #176]	@ (8002f18 <HAL_UARTEx_RxEventCallback+0x244>)
 8002e66:	701a      	strb	r2, [r3, #0]
		memset(Rx_buff, 0, sizeof(Rx_buff));		
 8002e68:	224b      	movs	r2, #75	@ 0x4b
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4812      	ldr	r0, [pc, #72]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002e6e:	f007 f84b 	bl	8009f08 <memset>
		if (Flag_Plot){ Tx_buff[0] = 'P'; Tx_buff[1] = 'L';} //Start
 8002e72:	4b29      	ldr	r3, [pc, #164]	@ (8002f18 <HAL_UARTEx_RxEventCallback+0x244>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <HAL_UARTEx_RxEventCallback+0x1b4>
 8002e7a:	4b13      	ldr	r3, [pc, #76]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e7c:	2250      	movs	r2, #80	@ 0x50
 8002e7e:	701a      	strb	r2, [r3, #0]
 8002e80:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e82:	224c      	movs	r2, #76	@ 0x4c
 8002e84:	705a      	strb	r2, [r3, #1]
 8002e86:	e005      	b.n	8002e94 <HAL_UARTEx_RxEventCallback+0x1c0>
		else{Tx_buff[0] = 'S'; Tx_buff[1] = 'T'; }		     //Stop
 8002e88:	4b0f      	ldr	r3, [pc, #60]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e8a:	2253      	movs	r2, #83	@ 0x53
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e90:	2254      	movs	r2, #84	@ 0x54
 8002e92:	705a      	strb	r2, [r3, #1]
		Tx_buff[38] = '\r'; Tx_buff[39] = '\n';
 8002e94:	4b0c      	ldr	r3, [pc, #48]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e96:	220d      	movs	r2, #13
 8002e98:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e9e:	220a      	movs	r2, #10
 8002ea0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Tx_buff,40);
 8002ea4:	2228      	movs	r2, #40	@ 0x28
 8002ea6:	4908      	ldr	r1, [pc, #32]	@ (8002ec8 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002ea8:	4804      	ldr	r0, [pc, #16]	@ (8002ebc <HAL_UARTEx_RxEventCallback+0x1e8>)
 8002eaa:	f005 fe3b 	bl	8008b24 <HAL_UART_Transmit_DMA>
		//memset(Tx_buff, 0, sizeof(Tx_buff));	
	}
	
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000348 	.word	0x20000348
 8002ebc:	20000820 	.word	0x20000820
 8002ec0:	200008a8 	.word	0x200008a8
 8002ec4:	200003da 	.word	0x200003da
 8002ec8:	20000394 	.word	0x20000394
 8002ecc:	200002fc 	.word	0x200002fc
 8002ed0:	20000034 	.word	0x20000034
 8002ed4:	2000003c 	.word	0x2000003c
 8002ed8:	20000044 	.word	0x20000044
 8002edc:	20000038 	.word	0x20000038
 8002ee0:	20000040 	.word	0x20000040
 8002ee4:	20000048 	.word	0x20000048
 8002ee8:	20000010 	.word	0x20000010
 8002eec:	2000001c 	.word	0x2000001c
 8002ef0:	20000028 	.word	0x20000028
 8002ef4:	20000014 	.word	0x20000014
 8002ef8:	20000020 	.word	0x20000020
 8002efc:	2000002c 	.word	0x2000002c
 8002f00:	20000018 	.word	0x20000018
 8002f04:	20000024 	.word	0x20000024
 8002f08:	20000030 	.word	0x20000030
 8002f0c:	2000004c 	.word	0x2000004c
 8002f10:	20000050 	.word	0x20000050
 8002f14:	20000054 	.word	0x20000054
 8002f18:	200002f8 	.word	0x200002f8

08002f1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f1c:	b4f0      	push	{r4, r5, r6, r7}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart2, rx_data, sizeof(rx_data));
	if(rx_data_gps[0] == 0xb5 && rx_data_gps[1] == 0x62)
 8002f24:	4b13      	ldr	r3, [pc, #76]	@ (8002f74 <HAL_UART_RxCpltCallback+0x58>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2bb5      	cmp	r3, #181	@ 0xb5
 8002f2a:	d118      	bne.n	8002f5e <HAL_UART_RxCpltCallback+0x42>
 8002f2c:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <HAL_UART_RxCpltCallback+0x58>)
 8002f2e:	785b      	ldrb	r3, [r3, #1]
 8002f30:	2b62      	cmp	r3, #98	@ 0x62
 8002f32:	d114      	bne.n	8002f5e <HAL_UART_RxCpltCallback+0x42>
	{
		memcpy(m8n_rx_buf, rx_data_gps, sizeof(rx_data_gps));
 8002f34:	4b10      	ldr	r3, [pc, #64]	@ (8002f78 <HAL_UART_RxCpltCallback+0x5c>)
 8002f36:	4a0f      	ldr	r2, [pc, #60]	@ (8002f74 <HAL_UART_RxCpltCallback+0x58>)
 8002f38:	4614      	mov	r4, r2
 8002f3a:	461e      	mov	r6, r3
 8002f3c:	f104 0c20 	add.w	ip, r4, #32
 8002f40:	4635      	mov	r5, r6
 8002f42:	4623      	mov	r3, r4
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4e:	3410      	adds	r4, #16
 8002f50:	3610      	adds	r6, #16
 8002f52:	4564      	cmp	r4, ip
 8002f54:	d1f4      	bne.n	8002f40 <HAL_UART_RxCpltCallback+0x24>
 8002f56:	4633      	mov	r3, r6
 8002f58:	4622      	mov	r2, r4
 8002f5a:	6810      	ldr	r0, [r2, #0]
 8002f5c:	6018      	str	r0, [r3, #0]
     //m8n_rx_cplt_flag = 1;
     //HAL_UART_Transmit_DMA(&huart2, (uint8_t*)rx_data_gps,sizeof(rx_data_gps));
	}
	cnt ++;
 8002f5e:	4b07      	ldr	r3, [pc, #28]	@ (8002f7c <HAL_UART_RxCpltCallback+0x60>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a05      	ldr	r2, [pc, #20]	@ (8002f7c <HAL_UART_RxCpltCallback+0x60>)
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bcf0      	pop	{r4, r5, r6, r7}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000a28 	.word	0x20000a28
 8002f78:	20000460 	.word	0x20000460
 8002f7c:	20000484 	.word	0x20000484

08002f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f86:	f001 ffcb 	bl	8004f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f8a:	f000 fd15 	bl	80039b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f8e:	f001 f807 	bl	8003fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f92:	f000 ffbd 	bl	8003f10 <MX_DMA_Init>
  MX_I2C1_Init();
 8002f96:	f000 fd79 	bl	8003a8c <MX_I2C1_Init>
  MX_TIM1_Init();
 8002f9a:	f000 fe01 	bl	8003ba0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002f9e:	f000 fe4f 	bl	8003c40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002fa2:	f000 fe99 	bl	8003cd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002fa6:	f000 ff11 	bl	8003dcc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002faa:	f000 ff5d 	bl	8003e68 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002fae:	f000 fd9b 	bl	8003ae8 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8002fb2:	f000 ff83 	bl	8003ebc <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8002fb6:	f000 fdc5 	bl	8003b44 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  setupSensor();
 8002fba:	f7fe f899 	bl	80010f0 <setupSensor>
  HAL_Delay(10);
 8002fbe:	200a      	movs	r0, #10
 8002fc0:	f002 f820 	bl	8005004 <HAL_Delay>
  for(int i = 0;i<100; i++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e00e      	b.n	8002fe8 <main+0x68>
  {
	  pid_output_altitude1 = getPressure();
 8002fca:	f7fe f8d1 	bl	8001170 <getPressure>
 8002fce:	ee07 0a90 	vmov	s15, r0
 8002fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd6:	4b60      	ldr	r3, [pc, #384]	@ (8003158 <main+0x1d8>)
 8002fd8:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(5);
 8002fdc:	2005      	movs	r0, #5
 8002fde:	f002 f811 	bl	8005004 <HAL_Delay>
  for(int i = 0;i<100; i++)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b63      	cmp	r3, #99	@ 0x63
 8002fec:	dded      	ble.n	8002fca <main+0x4a>
  }
  actual_pressure = 0;
 8002fee:	4b5b      	ldr	r3, [pc, #364]	@ (800315c <main+0x1dc>)
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
  HAL_Delay(200);
 8002ff6:	20c8      	movs	r0, #200	@ 0xc8
 8002ff8:	f002 f804 	bl	8005004 <HAL_Delay>
  hmc5883l_init();
 8002ffc:	f7ff fa88 	bl	8002510 <hmc5883l_init>
  HAL_TIM_Base_Start_IT(&htim4);
 8003000:	4857      	ldr	r0, [pc, #348]	@ (8003160 <main+0x1e0>)
 8003002:	f004 fd5f 	bl	8007ac4 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buff, sizeof(Rx_buff));
 8003006:	224b      	movs	r2, #75	@ 0x4b
 8003008:	4956      	ldr	r1, [pc, #344]	@ (8003164 <main+0x1e4>)
 800300a:	4857      	ldr	r0, [pc, #348]	@ (8003168 <main+0x1e8>)
 800300c:	f005 fe38 	bl	8008c80 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8003010:	4b56      	ldr	r3, [pc, #344]	@ (800316c <main+0x1ec>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b55      	ldr	r3, [pc, #340]	@ (800316c <main+0x1ec>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0208 	bic.w	r2, r2, #8
 800301e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8003020:	4853      	ldr	r0, [pc, #332]	@ (8003170 <main+0x1f0>)
 8003022:	f004 fce7 	bl	80079f4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8003026:	4853      	ldr	r0, [pc, #332]	@ (8003174 <main+0x1f4>)
 8003028:	f004 fce4 	bl	80079f4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800302c:	2100      	movs	r1, #0
 800302e:	4852      	ldr	r0, [pc, #328]	@ (8003178 <main+0x1f8>)
 8003030:	f004 fe08 	bl	8007c44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8003034:	2104      	movs	r1, #4
 8003036:	4850      	ldr	r0, [pc, #320]	@ (8003178 <main+0x1f8>)
 8003038:	f004 fe04 	bl	8007c44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800303c:	2108      	movs	r1, #8
 800303e:	484e      	ldr	r0, [pc, #312]	@ (8003178 <main+0x1f8>)
 8003040:	f004 fe00 	bl	8007c44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8003044:	210c      	movs	r1, #12
 8003046:	484c      	ldr	r0, [pc, #304]	@ (8003178 <main+0x1f8>)
 8003048:	f004 fdfc 	bl	8007c44 <HAL_TIM_PWM_Start>
  HAL_Delay(20);
 800304c:	2014      	movs	r0, #20
 800304e:	f001 ffd9 	bl	8005004 <HAL_Delay>
  MX_I2C1_Init();
 8003052:	f000 fd1b 	bl	8003a8c <MX_I2C1_Init>
  HAL_Delay(20);
 8003056:	2014      	movs	r0, #20
 8003058:	f001 ffd4 	bl	8005004 <HAL_Delay>
  MPU6050_Init();
 800305c:	f7fe ffd6 	bl	800200c <MPU6050_Init>
  HAL_Delay(1000);
 8003060:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003064:	f001 ffce 	bl	8005004 <HAL_Delay>
  Calib_Gyro();
 8003068:	f001 f830 	bl	80040cc <Calib_Gyro>
  HAL_Delay(50);
 800306c:	2032      	movs	r0, #50	@ 0x32
 800306e:	f001 ffc9 	bl	8005004 <HAL_Delay>
  M8N_Initialization();
 8003072:	f7fe f80b 	bl	800108c <M8N_Initialization>
  HAL_Delay(2000);
 8003076:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800307a:	f001 ffc3 	bl	8005004 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart3, rx_data_gps, sizeof(rx_data_gps));
 800307e:	2224      	movs	r2, #36	@ 0x24
 8003080:	493e      	ldr	r1, [pc, #248]	@ (800317c <main+0x1fc>)
 8003082:	483f      	ldr	r0, [pc, #252]	@ (8003180 <main+0x200>)
 8003084:	f005 fdcc 	bl	8008c20 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);
 8003088:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800308c:	f001 ffba 	bl	8005004 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,1000);
 8003090:	4b39      	ldr	r3, [pc, #228]	@ (8003178 <main+0x1f8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003098:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,1000);
 800309a:	4b37      	ldr	r3, [pc, #220]	@ (8003178 <main+0x1f8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030a2:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,1000);
 80030a4:	4b34      	ldr	r3, [pc, #208]	@ (8003178 <main+0x1f8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,1000);
 80030ae:	4b32      	ldr	r3, [pc, #200]	@ (8003178 <main+0x1f8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030b6:	641a      	str	r2, [r3, #64]	@ 0x40
  ch[0]=1500;      //Roll
 80030b8:	4b32      	ldr	r3, [pc, #200]	@ (8003184 <main+0x204>)
 80030ba:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80030be:	601a      	str	r2, [r3, #0]
  ch[1]=1500;      //Pitch
 80030c0:	4b30      	ldr	r3, [pc, #192]	@ (8003184 <main+0x204>)
 80030c2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80030c6:	605a      	str	r2, [r3, #4]
  ch[2]=1000;      //Throttle
 80030c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003184 <main+0x204>)
 80030ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030ce:	609a      	str	r2, [r3, #8]
  ch[3]=1500;      //Yaw
 80030d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003184 <main+0x204>)
 80030d2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80030d6:	60da      	str	r2, [r3, #12]
  AngleYaw = actual_compass_heading;
 80030d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003188 <main+0x208>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a2b      	ldr	r2, [pc, #172]	@ (800318c <main+0x20c>)
 80030de:	6013      	str	r3, [r2, #0]
  while(Receive_Throttle_Min() == 0);
 80030e0:	bf00      	nop
 80030e2:	f000 ffe1 	bl	80040a8 <Receive_Throttle_Min>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0fa      	beq.n	80030e2 <main+0x162>
  HAL_Delay(20);
 80030ec:	2014      	movs	r0, #20
 80030ee:	f001 ff89 	bl	8005004 <HAL_Delay>
  loop_timer = TIM1->CNT;
 80030f2:	4b27      	ldr	r3, [pc, #156]	@ (8003190 <main+0x210>)
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b26      	ldr	r3, [pc, #152]	@ (8003194 <main+0x214>)
 80030fa:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  check_time1 = TIM1->CNT;
 80030fc:	4b24      	ldr	r3, [pc, #144]	@ (8003190 <main+0x210>)
 80030fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003108:	4b23      	ldr	r3, [pc, #140]	@ (8003198 <main+0x218>)
 800310a:	edc3 7a00 	vstr	s15, [r3]
	  if(MPU6050_Read_Data() != HAL_OK)
 800310e:	f7ff f803 	bl	8002118 <MPU6050_Read_Data>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <main+0x19c>
	  {
	  	Reset_MPU6050();
 8003118:	f001 f852 	bl	80041c0 <Reset_MPU6050>
	  }

	  //Altitude = 44330.0f*(1-powf((pressure/101325.0f),(1.0f/5.257f)));
	  //check_time2 = TIM1->CNT;
	  receiver_input_channel_1 = ch[0];
 800311c:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <main+0x204>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1e      	ldr	r2, [pc, #120]	@ (800319c <main+0x21c>)
 8003122:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_2 = ch[1];
 8003124:	4b17      	ldr	r3, [pc, #92]	@ (8003184 <main+0x204>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a1d      	ldr	r2, [pc, #116]	@ (80031a0 <main+0x220>)
 800312a:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_3 = ch[2]; // chan ga(Throttle)
 800312c:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <main+0x204>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <main+0x224>)
 8003132:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_4 = ch[3];
 8003134:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <main+0x204>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <main+0x228>)
 800313a:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_5 = ch[4];
 800313c:	4b11      	ldr	r3, [pc, #68]	@ (8003184 <main+0x204>)
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	4a1a      	ldr	r2, [pc, #104]	@ (80031ac <main+0x22c>)
 8003142:	6013      	str	r3, [r2, #0]

	  if (receiver_input_channel_5 < 1500 )		flight_mode = 1;    // Mode bay binh thuong
 8003144:	4b19      	ldr	r3, [pc, #100]	@ (80031ac <main+0x22c>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f240 52db 	movw	r2, #1499	@ 0x5db
 800314c:	4293      	cmp	r3, r2
 800314e:	dc31      	bgt.n	80031b4 <main+0x234>
 8003150:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <main+0x230>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e030      	b.n	80031ba <main+0x23a>
 8003158:	20000410 	.word	0x20000410
 800315c:	2000010c 	.word	0x2000010c
 8003160:	200007d8 	.word	0x200007d8
 8003164:	20000348 	.word	0x20000348
 8003168:	20000820 	.word	0x20000820
 800316c:	200008a8 	.word	0x200008a8
 8003170:	20000748 	.word	0x20000748
 8003174:	20000700 	.word	0x20000700
 8003178:	20000790 	.word	0x20000790
 800317c:	20000a28 	.word	0x20000a28
 8003180:	20000864 	.word	0x20000864
 8003184:	200003dc 	.word	0x200003dc
 8003188:	20000540 	.word	0x20000540
 800318c:	2000040c 	.word	0x2000040c
 8003190:	40010000 	.word	0x40010000
 8003194:	20000444 	.word	0x20000444
 8003198:	200002ec 	.word	0x200002ec
 800319c:	20000448 	.word	0x20000448
 80031a0:	2000044c 	.word	0x2000044c
 80031a4:	20000450 	.word	0x20000450
 80031a8:	20000454 	.word	0x20000454
 80031ac:	20000458 	.word	0x20000458
 80031b0:	2000045c 	.word	0x2000045c
	  else 		flight_mode = 2;  //Mode altitude hold
 80031b4:	4bbe      	ldr	r3, [pc, #760]	@ (80034b0 <main+0x530>)
 80031b6:	2202      	movs	r2, #2
 80031b8:	601a      	str	r2, [r3, #0]
	  pid_output_altitude1 = getPressure();
 80031ba:	f7fd ffd9 	bl	8001170 <getPressure>
 80031be:	ee07 0a90 	vmov	s15, r0
 80031c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031c6:	4bbb      	ldr	r3, [pc, #748]	@ (80034b4 <main+0x534>)
 80031c8:	edc3 7a00 	vstr	s15, [r3]

	  Gx -= Gyro_X_Calib;
 80031cc:	4bba      	ldr	r3, [pc, #744]	@ (80034b8 <main+0x538>)
 80031ce:	ed93 7a00 	vldr	s14, [r3]
 80031d2:	4bba      	ldr	r3, [pc, #744]	@ (80034bc <main+0x53c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e2:	4bb5      	ldr	r3, [pc, #724]	@ (80034b8 <main+0x538>)
 80031e4:	edc3 7a00 	vstr	s15, [r3]
	  Gy -= Gyro_Y_Calib;
 80031e8:	4bb5      	ldr	r3, [pc, #724]	@ (80034c0 <main+0x540>)
 80031ea:	ed93 7a00 	vldr	s14, [r3]
 80031ee:	4bb5      	ldr	r3, [pc, #724]	@ (80034c4 <main+0x544>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fe:	4bb0      	ldr	r3, [pc, #704]	@ (80034c0 <main+0x540>)
 8003200:	edc3 7a00 	vstr	s15, [r3]
	  Gz -= Gyro_Z_Calib;
 8003204:	4bb0      	ldr	r3, [pc, #704]	@ (80034c8 <main+0x548>)
 8003206:	ed93 7a00 	vldr	s14, [r3]
 800320a:	4bb0      	ldr	r3, [pc, #704]	@ (80034cc <main+0x54c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321a:	4bab      	ldr	r3, [pc, #684]	@ (80034c8 <main+0x548>)
 800321c:	edc3 7a00 	vstr	s15, [r3]
	  AngleYaw = actual_compass_heading;
 8003220:	4bab      	ldr	r3, [pc, #684]	@ (80034d0 <main+0x550>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4aab      	ldr	r2, [pc, #684]	@ (80034d4 <main+0x554>)
 8003226:	6013      	str	r3, [r2, #0]

	  kalman_1d(KalmanAngleRoll, KalmanUncertaintyAngleRoll, Gx, AngleRoll);
 8003228:	4bab      	ldr	r3, [pc, #684]	@ (80034d8 <main+0x558>)
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	4bab      	ldr	r3, [pc, #684]	@ (80034dc <main+0x55c>)
 8003230:	ed93 7a00 	vldr	s14, [r3]
 8003234:	4ba0      	ldr	r3, [pc, #640]	@ (80034b8 <main+0x538>)
 8003236:	edd3 6a00 	vldr	s13, [r3]
 800323a:	4ba9      	ldr	r3, [pc, #676]	@ (80034e0 <main+0x560>)
 800323c:	ed93 6a00 	vldr	s12, [r3]
 8003240:	eef0 1a46 	vmov.f32	s3, s12
 8003244:	eeb0 1a66 	vmov.f32	s2, s13
 8003248:	eef0 0a47 	vmov.f32	s1, s14
 800324c:	eeb0 0a67 	vmov.f32	s0, s15
 8003250:	f7fe fe06 	bl	8001e60 <kalman_1d>
      	  KalmanAngleRoll = Kalman1DOutput[0];
 8003254:	4ba3      	ldr	r3, [pc, #652]	@ (80034e4 <main+0x564>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a9f      	ldr	r2, [pc, #636]	@ (80034d8 <main+0x558>)
 800325a:	6013      	str	r3, [r2, #0]
      	  KalmanUncertaintyAngleRoll = Kalman1DOutput[1];
 800325c:	4ba1      	ldr	r3, [pc, #644]	@ (80034e4 <main+0x564>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	4a9e      	ldr	r2, [pc, #632]	@ (80034dc <main+0x55c>)
 8003262:	6013      	str	r3, [r2, #0]

	  kalman_1d(KalmanAnglePitch, KalmanUncertaintyAnglePitch, Gy, AnglePitch);
 8003264:	4ba0      	ldr	r3, [pc, #640]	@ (80034e8 <main+0x568>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	4ba0      	ldr	r3, [pc, #640]	@ (80034ec <main+0x56c>)
 800326c:	ed93 7a00 	vldr	s14, [r3]
 8003270:	4b93      	ldr	r3, [pc, #588]	@ (80034c0 <main+0x540>)
 8003272:	edd3 6a00 	vldr	s13, [r3]
 8003276:	4b9e      	ldr	r3, [pc, #632]	@ (80034f0 <main+0x570>)
 8003278:	ed93 6a00 	vldr	s12, [r3]
 800327c:	eef0 1a46 	vmov.f32	s3, s12
 8003280:	eeb0 1a66 	vmov.f32	s2, s13
 8003284:	eef0 0a47 	vmov.f32	s1, s14
 8003288:	eeb0 0a67 	vmov.f32	s0, s15
 800328c:	f7fe fde8 	bl	8001e60 <kalman_1d>
	  	  KalmanAnglePitch = Kalman1DOutput[0];
 8003290:	4b94      	ldr	r3, [pc, #592]	@ (80034e4 <main+0x564>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a94      	ldr	r2, [pc, #592]	@ (80034e8 <main+0x568>)
 8003296:	6013      	str	r3, [r2, #0]
	  	  KalmanUncertaintyAnglePitch = Kalman1DOutput[1];
 8003298:	4b92      	ldr	r3, [pc, #584]	@ (80034e4 <main+0x564>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a93      	ldr	r2, [pc, #588]	@ (80034ec <main+0x56c>)
 800329e:	6013      	str	r3, [r2, #0]

	DesiredAngleRoll = 0.10*(receiver_input_channel_1-1500);  // -50do den 50do
 80032a0:	4b94      	ldr	r3, [pc, #592]	@ (80034f4 <main+0x574>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd f8df 	bl	800046c <__aeabi_i2d>
 80032ae:	a37e      	add	r3, pc, #504	@ (adr r3, 80034a8 <main+0x528>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fd f944 	bl	8000540 <__aeabi_dmul>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f7fd fc16 	bl	8000af0 <__aeabi_d2f>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4a8c      	ldr	r2, [pc, #560]	@ (80034f8 <main+0x578>)
 80032c8:	6013      	str	r3, [r2, #0]
    DesiredAnglePitch = 0.10*(receiver_input_channel_2-1500); // -50do den 50do
 80032ca:	4b8c      	ldr	r3, [pc, #560]	@ (80034fc <main+0x57c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f8ca 	bl	800046c <__aeabi_i2d>
 80032d8:	a373      	add	r3, pc, #460	@ (adr r3, 80034a8 <main+0x528>)
 80032da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032de:	f7fd f92f 	bl	8000540 <__aeabi_dmul>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4610      	mov	r0, r2
 80032e8:	4619      	mov	r1, r3
 80032ea:	f7fd fc01 	bl	8000af0 <__aeabi_d2f>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4a83      	ldr	r2, [pc, #524]	@ (8003500 <main+0x580>)
 80032f2:	6013      	str	r3, [r2, #0]
    InputThrottle = receiver_input_channel_3 + pid_output_altitude1;
 80032f4:	4b83      	ldr	r3, [pc, #524]	@ (8003504 <main+0x584>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	ee07 3a90 	vmov	s15, r3
 80032fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003300:	4b6c      	ldr	r3, [pc, #432]	@ (80034b4 <main+0x534>)
 8003302:	edd3 7a00 	vldr	s15, [r3]
 8003306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330a:	4b7f      	ldr	r3, [pc, #508]	@ (8003508 <main+0x588>)
 800330c:	edc3 7a00 	vstr	s15, [r3]
    DesiredRateYaw = 0.1*(receiver_input_channel_4-1500);
 8003310:	4b7e      	ldr	r3, [pc, #504]	@ (800350c <main+0x58c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd f8a7 	bl	800046c <__aeabi_i2d>
 800331e:	a362      	add	r3, pc, #392	@ (adr r3, 80034a8 <main+0x528>)
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f7fd f90c 	bl	8000540 <__aeabi_dmul>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f7fd fbde 	bl	8000af0 <__aeabi_d2f>
 8003334:	4603      	mov	r3, r0
 8003336:	4a76      	ldr	r2, [pc, #472]	@ (8003510 <main+0x590>)
 8003338:	6013      	str	r3, [r2, #0]
	
	ErrorAngleRoll = DesiredAngleRoll - KalmanAngleRoll;
 800333a:	4b6f      	ldr	r3, [pc, #444]	@ (80034f8 <main+0x578>)
 800333c:	ed93 7a00 	vldr	s14, [r3]
 8003340:	4b65      	ldr	r3, [pc, #404]	@ (80034d8 <main+0x558>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800334a:	4b72      	ldr	r3, [pc, #456]	@ (8003514 <main+0x594>)
 800334c:	edc3 7a00 	vstr	s15, [r3]
	ErrorAnglePitch = DesiredAnglePitch - KalmanAnglePitch;
 8003350:	4b6b      	ldr	r3, [pc, #428]	@ (8003500 <main+0x580>)
 8003352:	ed93 7a00 	vldr	s14, [r3]
 8003356:	4b64      	ldr	r3, [pc, #400]	@ (80034e8 <main+0x568>)
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003360:	4b6d      	ldr	r3, [pc, #436]	@ (8003518 <main+0x598>)
 8003362:	edc3 7a00 	vstr	s15, [r3]
	
	pid_equation(ErrorAngleRoll,PAngleRoll,IAngleRoll,DAngleRoll,PrevErrorAngleRoll,PrevItermAngleRoll);
 8003366:	4b6b      	ldr	r3, [pc, #428]	@ (8003514 <main+0x594>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	4b6b      	ldr	r3, [pc, #428]	@ (800351c <main+0x59c>)
 800336e:	ed93 7a00 	vldr	s14, [r3]
 8003372:	4b6b      	ldr	r3, [pc, #428]	@ (8003520 <main+0x5a0>)
 8003374:	edd3 6a00 	vldr	s13, [r3]
 8003378:	4b6a      	ldr	r3, [pc, #424]	@ (8003524 <main+0x5a4>)
 800337a:	ed93 6a00 	vldr	s12, [r3]
 800337e:	4b6a      	ldr	r3, [pc, #424]	@ (8003528 <main+0x5a8>)
 8003380:	edd3 5a00 	vldr	s11, [r3]
 8003384:	4b69      	ldr	r3, [pc, #420]	@ (800352c <main+0x5ac>)
 8003386:	ed93 5a00 	vldr	s10, [r3]
 800338a:	eef0 2a45 	vmov.f32	s5, s10
 800338e:	eeb0 2a65 	vmov.f32	s4, s11
 8003392:	eef0 1a46 	vmov.f32	s3, s12
 8003396:	eeb0 1a66 	vmov.f32	s2, s13
 800339a:	eef0 0a47 	vmov.f32	s1, s14
 800339e:	eeb0 0a67 	vmov.f32	s0, s15
 80033a2:	f7ff fb85 	bl	8002ab0 <pid_equation>
	DesiredRateRoll = PIDReturn[0];
 80033a6:	4b62      	ldr	r3, [pc, #392]	@ (8003530 <main+0x5b0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a62      	ldr	r2, [pc, #392]	@ (8003534 <main+0x5b4>)
 80033ac:	6013      	str	r3, [r2, #0]
	PrevErrorAngleRoll = PIDReturn[1];
 80033ae:	4b60      	ldr	r3, [pc, #384]	@ (8003530 <main+0x5b0>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a5d      	ldr	r2, [pc, #372]	@ (8003528 <main+0x5a8>)
 80033b4:	6013      	str	r3, [r2, #0]
	PrevItermAngleRoll = PIDReturn[2];
 80033b6:	4b5e      	ldr	r3, [pc, #376]	@ (8003530 <main+0x5b0>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	4a5c      	ldr	r2, [pc, #368]	@ (800352c <main+0x5ac>)
 80033bc:	6013      	str	r3, [r2, #0]
	
	pid_equation(ErrorAnglePitch,PAnglePitch,IAnglePitch,DAnglePitch,PrevErrorAnglePitch,PrevItermAnglePitch);
 80033be:	4b56      	ldr	r3, [pc, #344]	@ (8003518 <main+0x598>)
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003538 <main+0x5b8>)
 80033c6:	ed93 7a00 	vldr	s14, [r3]
 80033ca:	4b5c      	ldr	r3, [pc, #368]	@ (800353c <main+0x5bc>)
 80033cc:	edd3 6a00 	vldr	s13, [r3]
 80033d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003540 <main+0x5c0>)
 80033d2:	ed93 6a00 	vldr	s12, [r3]
 80033d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003544 <main+0x5c4>)
 80033d8:	edd3 5a00 	vldr	s11, [r3]
 80033dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003548 <main+0x5c8>)
 80033de:	ed93 5a00 	vldr	s10, [r3]
 80033e2:	eef0 2a45 	vmov.f32	s5, s10
 80033e6:	eeb0 2a65 	vmov.f32	s4, s11
 80033ea:	eef0 1a46 	vmov.f32	s3, s12
 80033ee:	eeb0 1a66 	vmov.f32	s2, s13
 80033f2:	eef0 0a47 	vmov.f32	s1, s14
 80033f6:	eeb0 0a67 	vmov.f32	s0, s15
 80033fa:	f7ff fb59 	bl	8002ab0 <pid_equation>
	DesiredRatePitch = PIDReturn[0];
 80033fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003530 <main+0x5b0>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a52      	ldr	r2, [pc, #328]	@ (800354c <main+0x5cc>)
 8003404:	6013      	str	r3, [r2, #0]
	PrevErrorAnglePitch = PIDReturn[1];
 8003406:	4b4a      	ldr	r3, [pc, #296]	@ (8003530 <main+0x5b0>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4a4e      	ldr	r2, [pc, #312]	@ (8003544 <main+0x5c4>)
 800340c:	6013      	str	r3, [r2, #0]
	PrevItermAnglePitch = PIDReturn[2];
 800340e:	4b48      	ldr	r3, [pc, #288]	@ (8003530 <main+0x5b0>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	4a4d      	ldr	r2, [pc, #308]	@ (8003548 <main+0x5c8>)
 8003414:	6013      	str	r3, [r2, #0]
	
	ErrorRateRoll = DesiredRateRoll - Gx;
 8003416:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <main+0x5b4>)
 8003418:	ed93 7a00 	vldr	s14, [r3]
 800341c:	4b26      	ldr	r3, [pc, #152]	@ (80034b8 <main+0x538>)
 800341e:	edd3 7a00 	vldr	s15, [r3]
 8003422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003426:	4b4a      	ldr	r3, [pc, #296]	@ (8003550 <main+0x5d0>)
 8003428:	edc3 7a00 	vstr	s15, [r3]
	ErrorRatePitch = DesiredRatePitch - Gy;
 800342c:	4b47      	ldr	r3, [pc, #284]	@ (800354c <main+0x5cc>)
 800342e:	ed93 7a00 	vldr	s14, [r3]
 8003432:	4b23      	ldr	r3, [pc, #140]	@ (80034c0 <main+0x540>)
 8003434:	edd3 7a00 	vldr	s15, [r3]
 8003438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800343c:	4b45      	ldr	r3, [pc, #276]	@ (8003554 <main+0x5d4>)
 800343e:	edc3 7a00 	vstr	s15, [r3]
	ErrorRateYaw = DesiredRateYaw - Gz;
 8003442:	4b33      	ldr	r3, [pc, #204]	@ (8003510 <main+0x590>)
 8003444:	ed93 7a00 	vldr	s14, [r3]
 8003448:	4b1f      	ldr	r3, [pc, #124]	@ (80034c8 <main+0x548>)
 800344a:	edd3 7a00 	vldr	s15, [r3]
 800344e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003452:	4b41      	ldr	r3, [pc, #260]	@ (8003558 <main+0x5d8>)
 8003454:	edc3 7a00 	vstr	s15, [r3]
	
  pid_equation(ErrorRateRoll, PRateRoll, IRateRoll, DRateRoll, PrevErrorRateRoll, PrevItermRateRoll);
 8003458:	4b3d      	ldr	r3, [pc, #244]	@ (8003550 <main+0x5d0>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	4b3f      	ldr	r3, [pc, #252]	@ (800355c <main+0x5dc>)
 8003460:	ed93 7a00 	vldr	s14, [r3]
 8003464:	4b3e      	ldr	r3, [pc, #248]	@ (8003560 <main+0x5e0>)
 8003466:	edd3 6a00 	vldr	s13, [r3]
 800346a:	4b3e      	ldr	r3, [pc, #248]	@ (8003564 <main+0x5e4>)
 800346c:	ed93 6a00 	vldr	s12, [r3]
 8003470:	4b3d      	ldr	r3, [pc, #244]	@ (8003568 <main+0x5e8>)
 8003472:	edd3 5a00 	vldr	s11, [r3]
 8003476:	4b3d      	ldr	r3, [pc, #244]	@ (800356c <main+0x5ec>)
 8003478:	ed93 5a00 	vldr	s10, [r3]
 800347c:	eef0 2a45 	vmov.f32	s5, s10
 8003480:	eeb0 2a65 	vmov.f32	s4, s11
 8003484:	eef0 1a46 	vmov.f32	s3, s12
 8003488:	eeb0 1a66 	vmov.f32	s2, s13
 800348c:	eef0 0a47 	vmov.f32	s1, s14
 8003490:	eeb0 0a67 	vmov.f32	s0, s15
 8003494:	f7ff fb0c 	bl	8002ab0 <pid_equation>
       InputRoll=PIDReturn[0];
 8003498:	4b25      	ldr	r3, [pc, #148]	@ (8003530 <main+0x5b0>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a34      	ldr	r2, [pc, #208]	@ (8003570 <main+0x5f0>)
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	e068      	b.n	8003574 <main+0x5f4>
 80034a2:	bf00      	nop
 80034a4:	f3af 8000 	nop.w
 80034a8:	9999999a 	.word	0x9999999a
 80034ac:	3fb99999 	.word	0x3fb99999
 80034b0:	2000045c 	.word	0x2000045c
 80034b4:	20000410 	.word	0x20000410
 80034b8:	2000042c 	.word	0x2000042c
 80034bc:	20000438 	.word	0x20000438
 80034c0:	20000430 	.word	0x20000430
 80034c4:	2000043c 	.word	0x2000043c
 80034c8:	20000434 	.word	0x20000434
 80034cc:	20000440 	.word	0x20000440
 80034d0:	20000540 	.word	0x20000540
 80034d4:	2000040c 	.word	0x2000040c
 80034d8:	20000488 	.word	0x20000488
 80034dc:	20000008 	.word	0x20000008
 80034e0:	20000404 	.word	0x20000404
 80034e4:	20000490 	.word	0x20000490
 80034e8:	2000048c 	.word	0x2000048c
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	20000408 	.word	0x20000408
 80034f4:	20000448 	.word	0x20000448
 80034f8:	200004f4 	.word	0x200004f4
 80034fc:	2000044c 	.word	0x2000044c
 8003500:	200004f8 	.word	0x200004f8
 8003504:	20000450 	.word	0x20000450
 8003508:	200004b4 	.word	0x200004b4
 800350c:	20000454 	.word	0x20000454
 8003510:	200004a0 	.word	0x200004a0
 8003514:	200004fc 	.word	0x200004fc
 8003518:	20000500 	.word	0x20000500
 800351c:	20000034 	.word	0x20000034
 8003520:	2000003c 	.word	0x2000003c
 8003524:	20000044 	.word	0x20000044
 8003528:	20000504 	.word	0x20000504
 800352c:	2000050c 	.word	0x2000050c
 8003530:	200004d8 	.word	0x200004d8
 8003534:	20000498 	.word	0x20000498
 8003538:	20000038 	.word	0x20000038
 800353c:	20000040 	.word	0x20000040
 8003540:	20000048 	.word	0x20000048
 8003544:	20000508 	.word	0x20000508
 8003548:	20000510 	.word	0x20000510
 800354c:	2000049c 	.word	0x2000049c
 8003550:	200004a4 	.word	0x200004a4
 8003554:	200004a8 	.word	0x200004a8
 8003558:	200004ac 	.word	0x200004ac
 800355c:	20000010 	.word	0x20000010
 8003560:	2000001c 	.word	0x2000001c
 8003564:	20000028 	.word	0x20000028
 8003568:	200004c0 	.word	0x200004c0
 800356c:	200004cc 	.word	0x200004cc
 8003570:	200004b0 	.word	0x200004b0
       PrevErrorRateRoll=PIDReturn[1]; 
 8003574:	4bba      	ldr	r3, [pc, #744]	@ (8003860 <main+0x8e0>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4aba      	ldr	r2, [pc, #744]	@ (8003864 <main+0x8e4>)
 800357a:	6013      	str	r3, [r2, #0]
       PrevItermRateRoll=PIDReturn[2];
 800357c:	4bb8      	ldr	r3, [pc, #736]	@ (8003860 <main+0x8e0>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4ab9      	ldr	r2, [pc, #740]	@ (8003868 <main+0x8e8>)
 8003582:	6013      	str	r3, [r2, #0]
			 
  pid_equation(ErrorRatePitch, PRatePitch,IRatePitch, DRatePitch, PrevErrorRatePitch, PrevItermRatePitch);
 8003584:	4bb9      	ldr	r3, [pc, #740]	@ (800386c <main+0x8ec>)
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	4bb9      	ldr	r3, [pc, #740]	@ (8003870 <main+0x8f0>)
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	4bb8      	ldr	r3, [pc, #736]	@ (8003874 <main+0x8f4>)
 8003592:	edd3 6a00 	vldr	s13, [r3]
 8003596:	4bb8      	ldr	r3, [pc, #736]	@ (8003878 <main+0x8f8>)
 8003598:	ed93 6a00 	vldr	s12, [r3]
 800359c:	4bb7      	ldr	r3, [pc, #732]	@ (800387c <main+0x8fc>)
 800359e:	edd3 5a00 	vldr	s11, [r3]
 80035a2:	4bb7      	ldr	r3, [pc, #732]	@ (8003880 <main+0x900>)
 80035a4:	ed93 5a00 	vldr	s10, [r3]
 80035a8:	eef0 2a45 	vmov.f32	s5, s10
 80035ac:	eeb0 2a65 	vmov.f32	s4, s11
 80035b0:	eef0 1a46 	vmov.f32	s3, s12
 80035b4:	eeb0 1a66 	vmov.f32	s2, s13
 80035b8:	eef0 0a47 	vmov.f32	s1, s14
 80035bc:	eeb0 0a67 	vmov.f32	s0, s15
 80035c0:	f7ff fa76 	bl	8002ab0 <pid_equation>
       InputPitch=PIDReturn[0]; 
 80035c4:	4ba6      	ldr	r3, [pc, #664]	@ (8003860 <main+0x8e0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4aae      	ldr	r2, [pc, #696]	@ (8003884 <main+0x904>)
 80035ca:	6013      	str	r3, [r2, #0]
       PrevErrorRatePitch=PIDReturn[1]; 
 80035cc:	4ba4      	ldr	r3, [pc, #656]	@ (8003860 <main+0x8e0>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4aaa      	ldr	r2, [pc, #680]	@ (800387c <main+0x8fc>)
 80035d2:	6013      	str	r3, [r2, #0]
       PrevItermRatePitch=PIDReturn[2];
 80035d4:	4ba2      	ldr	r3, [pc, #648]	@ (8003860 <main+0x8e0>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4aa9      	ldr	r2, [pc, #676]	@ (8003880 <main+0x900>)
 80035da:	6013      	str	r3, [r2, #0]
			 
  pid_equation(ErrorRateYaw, PRateYaw,IRateYaw, DRateYaw, PrevErrorRateYaw, PrevItermRateYaw);
 80035dc:	4baa      	ldr	r3, [pc, #680]	@ (8003888 <main+0x908>)
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	4baa      	ldr	r3, [pc, #680]	@ (800388c <main+0x90c>)
 80035e4:	ed93 7a00 	vldr	s14, [r3]
 80035e8:	4ba9      	ldr	r3, [pc, #676]	@ (8003890 <main+0x910>)
 80035ea:	edd3 6a00 	vldr	s13, [r3]
 80035ee:	4ba9      	ldr	r3, [pc, #676]	@ (8003894 <main+0x914>)
 80035f0:	ed93 6a00 	vldr	s12, [r3]
 80035f4:	4ba8      	ldr	r3, [pc, #672]	@ (8003898 <main+0x918>)
 80035f6:	edd3 5a00 	vldr	s11, [r3]
 80035fa:	4ba8      	ldr	r3, [pc, #672]	@ (800389c <main+0x91c>)
 80035fc:	ed93 5a00 	vldr	s10, [r3]
 8003600:	eef0 2a45 	vmov.f32	s5, s10
 8003604:	eeb0 2a65 	vmov.f32	s4, s11
 8003608:	eef0 1a46 	vmov.f32	s3, s12
 800360c:	eeb0 1a66 	vmov.f32	s2, s13
 8003610:	eef0 0a47 	vmov.f32	s1, s14
 8003614:	eeb0 0a67 	vmov.f32	s0, s15
 8003618:	f7ff fa4a 	bl	8002ab0 <pid_equation>
       InputYaw=PIDReturn[0]; 
 800361c:	4b90      	ldr	r3, [pc, #576]	@ (8003860 <main+0x8e0>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a9f      	ldr	r2, [pc, #636]	@ (80038a0 <main+0x920>)
 8003622:	6013      	str	r3, [r2, #0]
       PrevErrorRateYaw=PIDReturn[1]; 
 8003624:	4b8e      	ldr	r3, [pc, #568]	@ (8003860 <main+0x8e0>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	4a9b      	ldr	r2, [pc, #620]	@ (8003898 <main+0x918>)
 800362a:	6013      	str	r3, [r2, #0]
       PrevItermRateYaw=PIDReturn[2];
 800362c:	4b8c      	ldr	r3, [pc, #560]	@ (8003860 <main+0x8e0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4a9a      	ldr	r2, [pc, #616]	@ (800389c <main+0x91c>)
 8003632:	6013      	str	r3, [r2, #0]

  if (InputThrottle > 1800) InputThrottle = 1800;	
 8003634:	4b9b      	ldr	r3, [pc, #620]	@ (80038a4 <main+0x924>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 80038a8 <main+0x928>
 800363e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003646:	dd02      	ble.n	800364e <main+0x6ce>
 8003648:	4b96      	ldr	r3, [pc, #600]	@ (80038a4 <main+0x924>)
 800364a:	4a98      	ldr	r2, [pc, #608]	@ (80038ac <main+0x92c>)
 800364c:	601a      	str	r2, [r3, #0]
  MotorInput1= (InputThrottle-InputRoll-InputPitch-InputYaw);
 800364e:	4b95      	ldr	r3, [pc, #596]	@ (80038a4 <main+0x924>)
 8003650:	ed93 7a00 	vldr	s14, [r3]
 8003654:	4b96      	ldr	r3, [pc, #600]	@ (80038b0 <main+0x930>)
 8003656:	edd3 7a00 	vldr	s15, [r3]
 800365a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800365e:	4b89      	ldr	r3, [pc, #548]	@ (8003884 <main+0x904>)
 8003660:	edd3 7a00 	vldr	s15, [r3]
 8003664:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003668:	4b8d      	ldr	r3, [pc, #564]	@ (80038a0 <main+0x920>)
 800366a:	edd3 7a00 	vldr	s15, [r3]
 800366e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003672:	4b90      	ldr	r3, [pc, #576]	@ (80038b4 <main+0x934>)
 8003674:	edc3 7a00 	vstr	s15, [r3]
  MotorInput2= (InputThrottle-InputRoll+InputPitch+InputYaw);
 8003678:	4b8a      	ldr	r3, [pc, #552]	@ (80038a4 <main+0x924>)
 800367a:	ed93 7a00 	vldr	s14, [r3]
 800367e:	4b8c      	ldr	r3, [pc, #560]	@ (80038b0 <main+0x930>)
 8003680:	edd3 7a00 	vldr	s15, [r3]
 8003684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003688:	4b7e      	ldr	r3, [pc, #504]	@ (8003884 <main+0x904>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003692:	4b83      	ldr	r3, [pc, #524]	@ (80038a0 <main+0x920>)
 8003694:	edd3 7a00 	vldr	s15, [r3]
 8003698:	ee77 7a27 	vadd.f32	s15, s14, s15
 800369c:	4b86      	ldr	r3, [pc, #536]	@ (80038b8 <main+0x938>)
 800369e:	edc3 7a00 	vstr	s15, [r3]
  MotorInput3= (InputThrottle+InputRoll+InputPitch-InputYaw);
 80036a2:	4b80      	ldr	r3, [pc, #512]	@ (80038a4 <main+0x924>)
 80036a4:	ed93 7a00 	vldr	s14, [r3]
 80036a8:	4b81      	ldr	r3, [pc, #516]	@ (80038b0 <main+0x930>)
 80036aa:	edd3 7a00 	vldr	s15, [r3]
 80036ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036b2:	4b74      	ldr	r3, [pc, #464]	@ (8003884 <main+0x904>)
 80036b4:	edd3 7a00 	vldr	s15, [r3]
 80036b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036bc:	4b78      	ldr	r3, [pc, #480]	@ (80038a0 <main+0x920>)
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036c6:	4b7d      	ldr	r3, [pc, #500]	@ (80038bc <main+0x93c>)
 80036c8:	edc3 7a00 	vstr	s15, [r3]
  MotorInput4= (InputThrottle+InputRoll-InputPitch+InputYaw);
 80036cc:	4b75      	ldr	r3, [pc, #468]	@ (80038a4 <main+0x924>)
 80036ce:	ed93 7a00 	vldr	s14, [r3]
 80036d2:	4b77      	ldr	r3, [pc, #476]	@ (80038b0 <main+0x930>)
 80036d4:	edd3 7a00 	vldr	s15, [r3]
 80036d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036dc:	4b69      	ldr	r3, [pc, #420]	@ (8003884 <main+0x904>)
 80036de:	edd3 7a00 	vldr	s15, [r3]
 80036e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036e6:	4b6e      	ldr	r3, [pc, #440]	@ (80038a0 <main+0x920>)
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f0:	4b73      	ldr	r3, [pc, #460]	@ (80038c0 <main+0x940>)
 80036f2:	edc3 7a00 	vstr	s15, [r3]
	
  if (MotorInput1 > 1999)MotorInput1 = 1999;
 80036f6:	4b6f      	ldr	r3, [pc, #444]	@ (80038b4 <main+0x934>)
 80036f8:	edd3 7a00 	vldr	s15, [r3]
 80036fc:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80038c4 <main+0x944>
 8003700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003708:	dd02      	ble.n	8003710 <main+0x790>
 800370a:	4b6a      	ldr	r3, [pc, #424]	@ (80038b4 <main+0x934>)
 800370c:	4a6e      	ldr	r2, [pc, #440]	@ (80038c8 <main+0x948>)
 800370e:	601a      	str	r2, [r3, #0]
  if (MotorInput2 > 1999)MotorInput2 = 1999; 
 8003710:	4b69      	ldr	r3, [pc, #420]	@ (80038b8 <main+0x938>)
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80038c4 <main+0x944>
 800371a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	dd02      	ble.n	800372a <main+0x7aa>
 8003724:	4b64      	ldr	r3, [pc, #400]	@ (80038b8 <main+0x938>)
 8003726:	4a68      	ldr	r2, [pc, #416]	@ (80038c8 <main+0x948>)
 8003728:	601a      	str	r2, [r3, #0]
  if (MotorInput3 > 1999)MotorInput3 = 1999; 
 800372a:	4b64      	ldr	r3, [pc, #400]	@ (80038bc <main+0x93c>)
 800372c:	edd3 7a00 	vldr	s15, [r3]
 8003730:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80038c4 <main+0x944>
 8003734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	dd02      	ble.n	8003744 <main+0x7c4>
 800373e:	4b5f      	ldr	r3, [pc, #380]	@ (80038bc <main+0x93c>)
 8003740:	4a61      	ldr	r2, [pc, #388]	@ (80038c8 <main+0x948>)
 8003742:	601a      	str	r2, [r3, #0]
  if (MotorInput4 > 1999)MotorInput4 = 1999;
 8003744:	4b5e      	ldr	r3, [pc, #376]	@ (80038c0 <main+0x940>)
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80038c4 <main+0x944>
 800374e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003756:	dd02      	ble.n	800375e <main+0x7de>
 8003758:	4b59      	ldr	r3, [pc, #356]	@ (80038c0 <main+0x940>)
 800375a:	4a5b      	ldr	r2, [pc, #364]	@ (80038c8 <main+0x948>)
 800375c:	601a      	str	r2, [r3, #0]
  
  int ThrottleIdle = 1180;
 800375e:	f240 439c 	movw	r3, #1180	@ 0x49c
 8003762:	60bb      	str	r3, [r7, #8]
  if (MotorInput1 < ThrottleIdle) MotorInput1 = ThrottleIdle;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800376e:	4b51      	ldr	r3, [pc, #324]	@ (80038b4 <main+0x934>)
 8003770:	edd3 7a00 	vldr	s15, [r3]
 8003774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377c:	dd07      	ble.n	800378e <main+0x80e>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	ee07 3a90 	vmov	s15, r3
 8003784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003788:	4b4a      	ldr	r3, [pc, #296]	@ (80038b4 <main+0x934>)
 800378a:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput2 < ThrottleIdle) MotorInput2 = ThrottleIdle;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003798:	4b47      	ldr	r3, [pc, #284]	@ (80038b8 <main+0x938>)
 800379a:	edd3 7a00 	vldr	s15, [r3]
 800379e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a6:	dd07      	ble.n	80037b8 <main+0x838>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b2:	4b41      	ldr	r3, [pc, #260]	@ (80038b8 <main+0x938>)
 80037b4:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput3 < ThrottleIdle) MotorInput3 = ThrottleIdle;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c2:	4b3e      	ldr	r3, [pc, #248]	@ (80038bc <main+0x93c>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	dd07      	ble.n	80037e2 <main+0x862>
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037dc:	4b37      	ldr	r3, [pc, #220]	@ (80038bc <main+0x93c>)
 80037de:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput4 < ThrottleIdle) MotorInput4 = ThrottleIdle;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	ee07 3a90 	vmov	s15, r3
 80037e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ec:	4b34      	ldr	r3, [pc, #208]	@ (80038c0 <main+0x940>)
 80037ee:	edd3 7a00 	vldr	s15, [r3]
 80037f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fa:	dd07      	ble.n	800380c <main+0x88c>
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003806:	4b2e      	ldr	r3, [pc, #184]	@ (80038c0 <main+0x940>)
 8003808:	edc3 7a00 	vstr	s15, [r3]
  
  int ThrottleCutOff = 1000;
 800380c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003810:	607b      	str	r3, [r7, #4]
  if (receiver_input_channel_3 < 1050) 
 8003812:	4b2e      	ldr	r3, [pc, #184]	@ (80038cc <main+0x94c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f240 4219 	movw	r2, #1049	@ 0x419
 800381a:	4293      	cmp	r3, r2
 800381c:	dc5a      	bgt.n	80038d4 <main+0x954>
  {  
	MotorInput1=ThrottleCutOff;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	ee07 3a90 	vmov	s15, r3
 8003824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003828:	4b22      	ldr	r3, [pc, #136]	@ (80038b4 <main+0x934>)
 800382a:	edc3 7a00 	vstr	s15, [r3]
    MotorInput2=ThrottleCutOff;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003838:	4b1f      	ldr	r3, [pc, #124]	@ (80038b8 <main+0x938>)
 800383a:	edc3 7a00 	vstr	s15, [r3]
    MotorInput3=ThrottleCutOff; 
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003848:	4b1c      	ldr	r3, [pc, #112]	@ (80038bc <main+0x93c>)
 800384a:	edc3 7a00 	vstr	s15, [r3]
    MotorInput4=ThrottleCutOff;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <main+0x940>)
 800385a:	edc3 7a00 	vstr	s15, [r3]
 800385e:	e037      	b.n	80038d0 <main+0x950>
 8003860:	200004d8 	.word	0x200004d8
 8003864:	200004c0 	.word	0x200004c0
 8003868:	200004cc 	.word	0x200004cc
 800386c:	200004a8 	.word	0x200004a8
 8003870:	20000014 	.word	0x20000014
 8003874:	20000020 	.word	0x20000020
 8003878:	2000002c 	.word	0x2000002c
 800387c:	200004c4 	.word	0x200004c4
 8003880:	200004d0 	.word	0x200004d0
 8003884:	200004b8 	.word	0x200004b8
 8003888:	200004ac 	.word	0x200004ac
 800388c:	20000018 	.word	0x20000018
 8003890:	20000024 	.word	0x20000024
 8003894:	20000030 	.word	0x20000030
 8003898:	200004c8 	.word	0x200004c8
 800389c:	200004d4 	.word	0x200004d4
 80038a0:	200004bc 	.word	0x200004bc
 80038a4:	200004b4 	.word	0x200004b4
 80038a8:	44e10000 	.word	0x44e10000
 80038ac:	44e10000 	.word	0x44e10000
 80038b0:	200004b0 	.word	0x200004b0
 80038b4:	200004e4 	.word	0x200004e4
 80038b8:	200004e8 	.word	0x200004e8
 80038bc:	200004ec 	.word	0x200004ec
 80038c0:	200004f0 	.word	0x200004f0
 80038c4:	44f9e000 	.word	0x44f9e000
 80038c8:	44f9e000 	.word	0x44f9e000
 80038cc:	20000450 	.word	0x20000450
    reset_pid();
 80038d0:	f7ff f9a8 	bl	8002c24 <reset_pid>
  }
	
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,MotorInput1);
 80038d4:	4b2d      	ldr	r3, [pc, #180]	@ (800398c <main+0xa0c>)
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	4b2d      	ldr	r3, [pc, #180]	@ (8003990 <main+0xa10>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038e2:	ee17 2a90 	vmov	r2, s15
 80038e6:	635a      	str	r2, [r3, #52]	@ 0x34
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,MotorInput2);
 80038e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003994 <main+0xa14>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	4b28      	ldr	r3, [pc, #160]	@ (8003990 <main+0xa10>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038f6:	ee17 2a90 	vmov	r2, s15
 80038fa:	639a      	str	r2, [r3, #56]	@ 0x38
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,MotorInput3);
 80038fc:	4b26      	ldr	r3, [pc, #152]	@ (8003998 <main+0xa18>)
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	4b23      	ldr	r3, [pc, #140]	@ (8003990 <main+0xa10>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800390a:	ee17 2a90 	vmov	r2, s15
 800390e:	63da      	str	r2, [r3, #60]	@ 0x3c
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,MotorInput4);
 8003910:	4b22      	ldr	r3, [pc, #136]	@ (800399c <main+0xa1c>)
 8003912:	edd3 7a00 	vldr	s15, [r3]
 8003916:	4b1e      	ldr	r3, [pc, #120]	@ (8003990 <main+0xa10>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800391e:	ee17 2a90 	vmov	r2, s15
 8003922:	641a      	str	r2, [r3, #64]	@ 0x40
	
	/*---------------------------------------------------------------------*/
	// chu ky lay mau T = 4ms , f = 250Hz
	// chu ky lay mau T = 20ms, f = 50Hz
	 	check_time2 = TIM1->CNT;
 8003924:	4b1e      	ldr	r3, [pc, #120]	@ (80039a0 <main+0xa20>)
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003930:	4b1c      	ldr	r3, [pc, #112]	@ (80039a4 <main+0xa24>)
 8003932:	edc3 7a00 	vstr	s15, [r3]
	 	while ( abs(__HAL_TIM_GET_COUNTER(&htim1) - loop_timer) < 4000 ) ;
 8003936:	bf00      	nop
 8003938:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <main+0xa28>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	4a1b      	ldr	r2, [pc, #108]	@ (80039ac <main+0xa2c>)
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	bfb8      	it	lt
 8003948:	425b      	neglt	r3, r3
 800394a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800394e:	dbf3      	blt.n	8003938 <main+0x9b8>
	 		 __HAL_TIM_SET_COUNTER(&htim1,0);
 8003950:	4b15      	ldr	r3, [pc, #84]	@ (80039a8 <main+0xa28>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	625a      	str	r2, [r3, #36]	@ 0x24
	 		 loop_timer = TIM1->CNT;
 8003958:	4b11      	ldr	r3, [pc, #68]	@ (80039a0 <main+0xa20>)
 800395a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395c:	461a      	mov	r2, r3
 800395e:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <main+0xa2c>)
 8003960:	601a      	str	r2, [r3, #0]
	 		check_time3 = check_time2 - check_time1;
 8003962:	4b10      	ldr	r3, [pc, #64]	@ (80039a4 <main+0xa24>)
 8003964:	ed93 7a00 	vldr	s14, [r3]
 8003968:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <main+0xa30>)
 800396a:	edd3 7a00 	vldr	s15, [r3]
 800396e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003972:	4b10      	ldr	r3, [pc, #64]	@ (80039b4 <main+0xa34>)
 8003974:	edc3 7a00 	vstr	s15, [r3]
	 		 check_time1 = 0; check_time2 = 0;
 8003978:	4b0d      	ldr	r3, [pc, #52]	@ (80039b0 <main+0xa30>)
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <main+0xa24>)
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
  {
 8003988:	f7ff bbb8 	b.w	80030fc <main+0x17c>
 800398c:	200004e4 	.word	0x200004e4
 8003990:	20000790 	.word	0x20000790
 8003994:	200004e8 	.word	0x200004e8
 8003998:	200004ec 	.word	0x200004ec
 800399c:	200004f0 	.word	0x200004f0
 80039a0:	40010000 	.word	0x40010000
 80039a4:	200002f0 	.word	0x200002f0
 80039a8:	20000700 	.word	0x20000700
 80039ac:	20000444 	.word	0x20000444
 80039b0:	200002ec 	.word	0x200002ec
 80039b4:	200002f4 	.word	0x200002f4

080039b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b094      	sub	sp, #80	@ 0x50
 80039bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039be:	f107 0320 	add.w	r3, r7, #32
 80039c2:	2230      	movs	r2, #48	@ 0x30
 80039c4:	2100      	movs	r1, #0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f006 fa9e 	bl	8009f08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	605a      	str	r2, [r3, #4]
 80039d6:	609a      	str	r2, [r3, #8]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	2300      	movs	r3, #0
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	4b28      	ldr	r3, [pc, #160]	@ (8003a84 <SystemClock_Config+0xcc>)
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	4a27      	ldr	r2, [pc, #156]	@ (8003a84 <SystemClock_Config+0xcc>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80039ec:	4b25      	ldr	r3, [pc, #148]	@ (8003a84 <SystemClock_Config+0xcc>)
 80039ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039f8:	2300      	movs	r3, #0
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	4b22      	ldr	r3, [pc, #136]	@ (8003a88 <SystemClock_Config+0xd0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a21      	ldr	r2, [pc, #132]	@ (8003a88 <SystemClock_Config+0xd0>)
 8003a02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b1f      	ldr	r3, [pc, #124]	@ (8003a88 <SystemClock_Config+0xd0>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a14:	2302      	movs	r3, #2
 8003a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a20:	2302      	movs	r3, #2
 8003a22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a24:	2300      	movs	r3, #0
 8003a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a28:	2308      	movs	r3, #8
 8003a2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003a2c:	23a8      	movs	r3, #168	@ 0xa8
 8003a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a30:	2302      	movs	r3, #2
 8003a32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a34:	2304      	movs	r3, #4
 8003a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a38:	f107 0320 	add.w	r3, r7, #32
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f003 fb31 	bl	80070a4 <HAL_RCC_OscConfig>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a48:	f000 fbcc 	bl	80041e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a4c:	230f      	movs	r3, #15
 8003a4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a50:	2302      	movs	r3, #2
 8003a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a58:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003a5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	2105      	movs	r1, #5
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 fd92 	bl	8007594 <HAL_RCC_ClockConfig>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a76:	f000 fbb5 	bl	80041e4 <Error_Handler>
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3750      	adds	r7, #80	@ 0x50
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40007000 	.word	0x40007000

08003a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a90:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003a92:	4a13      	ldr	r2, [pc, #76]	@ (8003ae0 <MX_I2C1_Init+0x54>)
 8003a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003a96:	4b11      	ldr	r3, [pc, #68]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003a98:	4a12      	ldr	r2, [pc, #72]	@ (8003ae4 <MX_I2C1_Init+0x58>)
 8003a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003aae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003abc:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ac8:	4804      	ldr	r0, [pc, #16]	@ (8003adc <MX_I2C1_Init+0x50>)
 8003aca:	f002 fafb 	bl	80060c4 <HAL_I2C_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ad4:	f000 fb86 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000544 	.word	0x20000544
 8003ae0:	40005400 	.word	0x40005400
 8003ae4:	00061a80 	.word	0x00061a80

08003ae8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003aec:	4b12      	ldr	r3, [pc, #72]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003aee:	4a13      	ldr	r2, [pc, #76]	@ (8003b3c <MX_I2C2_Init+0x54>)
 8003af0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003af2:	4b11      	ldr	r3, [pc, #68]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003af4:	4a12      	ldr	r2, [pc, #72]	@ (8003b40 <MX_I2C2_Init+0x58>)
 8003af6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003af8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003afe:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b04:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003b06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003b12:	4b09      	ldr	r3, [pc, #36]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b18:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b1e:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003b24:	4804      	ldr	r0, [pc, #16]	@ (8003b38 <MX_I2C2_Init+0x50>)
 8003b26:	f002 facd 	bl	80060c4 <HAL_I2C_Init>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003b30:	f000 fb58 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000598 	.word	0x20000598
 8003b3c:	40005800 	.word	0x40005800
 8003b40:	00061a80 	.word	0x00061a80

08003b44 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b48:	4b12      	ldr	r3, [pc, #72]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b4a:	4a13      	ldr	r2, [pc, #76]	@ (8003b98 <MX_I2C3_Init+0x54>)
 8003b4c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003b4e:	4b11      	ldr	r3, [pc, #68]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b50:	4a12      	ldr	r2, [pc, #72]	@ (8003b9c <MX_I2C3_Init+0x58>)
 8003b52:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b54:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b60:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b66:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b74:	4b07      	ldr	r3, [pc, #28]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b80:	4804      	ldr	r0, [pc, #16]	@ (8003b94 <MX_I2C3_Init+0x50>)
 8003b82:	f002 fa9f 	bl	80060c4 <HAL_I2C_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003b8c:	f000 fb2a 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200005ec 	.word	0x200005ec
 8003b98:	40005c00 	.word	0x40005c00
 8003b9c:	000186a0 	.word	0x000186a0

08003ba0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ba6:	f107 0308 	add.w	r3, r7, #8
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bb4:	463b      	mov	r3, r7
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8003c3c <MX_TIM1_Init+0x9c>)
 8003bc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003bc4:	22a7      	movs	r2, #167	@ 0xa7
 8003bc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003bce:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003bd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd6:	4b18      	ldr	r3, [pc, #96]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bdc:	4b16      	ldr	r3, [pc, #88]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003be2:	4b15      	ldr	r3, [pc, #84]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003be8:	4813      	ldr	r0, [pc, #76]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003bea:	f003 feb3 	bl	8007954 <HAL_TIM_Base_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003bf4:	f000 faf6 	bl	80041e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	4619      	mov	r1, r3
 8003c04:	480c      	ldr	r0, [pc, #48]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003c06:	f004 faaf 	bl	8008168 <HAL_TIM_ConfigClockSource>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003c10:	f000 fae8 	bl	80041e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c14:	2300      	movs	r3, #0
 8003c16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4805      	ldr	r0, [pc, #20]	@ (8003c38 <MX_TIM1_Init+0x98>)
 8003c22:	f004 fea1 	bl	8008968 <HAL_TIMEx_MasterConfigSynchronization>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003c2c:	f000 fada 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003c30:	bf00      	nop
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000700 	.word	0x20000700
 8003c3c:	40010000 	.word	0x40010000

08003c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	601a      	str	r2, [r3, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
 8003c50:	609a      	str	r2, [r3, #8]
 8003c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c54:	463b      	mov	r3, r7
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd4 <MX_TIM2_Init+0x94>)
 8003c5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003c64:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <MX_TIM2_Init+0x94>)
 8003c66:	2253      	movs	r2, #83	@ 0x53
 8003c68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd4 <MX_TIM2_Init+0x94>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8003c70:	4b18      	ldr	r3, [pc, #96]	@ (8003cd4 <MX_TIM2_Init+0x94>)
 8003c72:	f06f 0201 	mvn.w	r2, #1
 8003c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c78:	4b16      	ldr	r3, [pc, #88]	@ (8003cd4 <MX_TIM2_Init+0x94>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c7e:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <MX_TIM2_Init+0x94>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c84:	4813      	ldr	r0, [pc, #76]	@ (8003cd4 <MX_TIM2_Init+0x94>)
 8003c86:	f003 fe65 	bl	8007954 <HAL_TIM_Base_Init>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003c90:	f000 faa8 	bl	80041e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	480c      	ldr	r0, [pc, #48]	@ (8003cd4 <MX_TIM2_Init+0x94>)
 8003ca2:	f004 fa61 	bl	8008168 <HAL_TIM_ConfigClockSource>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003cac:	f000 fa9a 	bl	80041e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cb8:	463b      	mov	r3, r7
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4805      	ldr	r0, [pc, #20]	@ (8003cd4 <MX_TIM2_Init+0x94>)
 8003cbe:	f004 fe53 	bl	8008968 <HAL_TIMEx_MasterConfigSynchronization>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003cc8:	f000 fa8c 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ccc:	bf00      	nop
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000748 	.word	0x20000748

08003cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	@ 0x28
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cde:	f107 0320 	add.w	r3, r7, #32
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	2200      	movs	r2, #0
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	605a      	str	r2, [r3, #4]
 8003cf0:	609a      	str	r2, [r3, #8]
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	611a      	str	r2, [r3, #16]
 8003cf6:	615a      	str	r2, [r3, #20]
 8003cf8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cfa:	4b32      	ldr	r3, [pc, #200]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003cfc:	4a32      	ldr	r2, [pc, #200]	@ (8003dc8 <MX_TIM3_Init+0xf0>)
 8003cfe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003d00:	4b30      	ldr	r3, [pc, #192]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d02:	2253      	movs	r2, #83	@ 0x53
 8003d04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d06:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d0e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003d12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d14:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d20:	4828      	ldr	r0, [pc, #160]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d22:	f003 ff3f 	bl	8007ba4 <HAL_TIM_PWM_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003d2c:	f000 fa5a 	bl	80041e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d30:	2300      	movs	r3, #0
 8003d32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d38:	f107 0320 	add.w	r3, r7, #32
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4821      	ldr	r0, [pc, #132]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d40:	f004 fe12 	bl	8008968 <HAL_TIMEx_MasterConfigSynchronization>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003d4a:	f000 fa4b 	bl	80041e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d4e:	2360      	movs	r3, #96	@ 0x60
 8003d50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	2200      	movs	r2, #0
 8003d62:	4619      	mov	r1, r3
 8003d64:	4817      	ldr	r0, [pc, #92]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d66:	f004 f93d 	bl	8007fe4 <HAL_TIM_PWM_ConfigChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003d70:	f000 fa38 	bl	80041e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	2204      	movs	r2, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4812      	ldr	r0, [pc, #72]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d7c:	f004 f932 	bl	8007fe4 <HAL_TIM_PWM_ConfigChannel>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003d86:	f000 fa2d 	bl	80041e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	4619      	mov	r1, r3
 8003d90:	480c      	ldr	r0, [pc, #48]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003d92:	f004 f927 	bl	8007fe4 <HAL_TIM_PWM_ConfigChannel>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003d9c:	f000 fa22 	bl	80041e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003da0:	1d3b      	adds	r3, r7, #4
 8003da2:	220c      	movs	r2, #12
 8003da4:	4619      	mov	r1, r3
 8003da6:	4807      	ldr	r0, [pc, #28]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003da8:	f004 f91c 	bl	8007fe4 <HAL_TIM_PWM_ConfigChannel>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8003db2:	f000 fa17 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003db6:	4803      	ldr	r0, [pc, #12]	@ (8003dc4 <MX_TIM3_Init+0xec>)
 8003db8:	f000 fc52 	bl	8004660 <HAL_TIM_MspPostInit>

}
 8003dbc:	bf00      	nop
 8003dbe:	3728      	adds	r7, #40	@ 0x28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000790 	.word	0x20000790
 8003dc8:	40000400 	.word	0x40000400

08003dcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dd2:	f107 0308 	add.w	r3, r7, #8
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
 8003dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003de0:	463b      	mov	r3, r7
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003de8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <MX_TIM4_Init+0x94>)
 8003dea:	4a1e      	ldr	r2, [pc, #120]	@ (8003e64 <MX_TIM4_Init+0x98>)
 8003dec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8003dee:	4b1c      	ldr	r3, [pc, #112]	@ (8003e60 <MX_TIM4_Init+0x94>)
 8003df0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003df4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e60 <MX_TIM4_Init+0x94>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1249;
 8003dfc:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <MX_TIM4_Init+0x94>)
 8003dfe:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8003e02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e04:	4b16      	ldr	r3, [pc, #88]	@ (8003e60 <MX_TIM4_Init+0x94>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e0a:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <MX_TIM4_Init+0x94>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e10:	4813      	ldr	r0, [pc, #76]	@ (8003e60 <MX_TIM4_Init+0x94>)
 8003e12:	f003 fd9f 	bl	8007954 <HAL_TIM_Base_Init>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003e1c:	f000 f9e2 	bl	80041e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e26:	f107 0308 	add.w	r3, r7, #8
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	480c      	ldr	r0, [pc, #48]	@ (8003e60 <MX_TIM4_Init+0x94>)
 8003e2e:	f004 f99b 	bl	8008168 <HAL_TIM_ConfigClockSource>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003e38:	f000 f9d4 	bl	80041e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e44:	463b      	mov	r3, r7
 8003e46:	4619      	mov	r1, r3
 8003e48:	4805      	ldr	r0, [pc, #20]	@ (8003e60 <MX_TIM4_Init+0x94>)
 8003e4a:	f004 fd8d 	bl	8008968 <HAL_TIMEx_MasterConfigSynchronization>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003e54:	f000 f9c6 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e58:	bf00      	nop
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	200007d8 	.word	0x200007d8
 8003e64:	40000800 	.word	0x40000800

08003e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e6c:	4b11      	ldr	r3, [pc, #68]	@ (8003eb4 <MX_USART2_UART_Init+0x4c>)
 8003e6e:	4a12      	ldr	r2, [pc, #72]	@ (8003eb8 <MX_USART2_UART_Init+0x50>)
 8003e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e72:	4b10      	ldr	r3, [pc, #64]	@ (8003eb4 <MX_USART2_UART_Init+0x4c>)
 8003e74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb4 <MX_USART2_UART_Init+0x4c>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e80:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <MX_USART2_UART_Init+0x4c>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e86:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb4 <MX_USART2_UART_Init+0x4c>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e8c:	4b09      	ldr	r3, [pc, #36]	@ (8003eb4 <MX_USART2_UART_Init+0x4c>)
 8003e8e:	220c      	movs	r2, #12
 8003e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e92:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <MX_USART2_UART_Init+0x4c>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e98:	4b06      	ldr	r3, [pc, #24]	@ (8003eb4 <MX_USART2_UART_Init+0x4c>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e9e:	4805      	ldr	r0, [pc, #20]	@ (8003eb4 <MX_USART2_UART_Init+0x4c>)
 8003ea0:	f004 fdf2 	bl	8008a88 <HAL_UART_Init>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003eaa:	f000 f99b 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000820 	.word	0x20000820
 8003eb8:	40004400 	.word	0x40004400

08003ebc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ec0:	4b11      	ldr	r3, [pc, #68]	@ (8003f08 <MX_USART3_UART_Init+0x4c>)
 8003ec2:	4a12      	ldr	r2, [pc, #72]	@ (8003f0c <MX_USART3_UART_Init+0x50>)
 8003ec4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003ec6:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <MX_USART3_UART_Init+0x4c>)
 8003ec8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003ecc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ece:	4b0e      	ldr	r3, [pc, #56]	@ (8003f08 <MX_USART3_UART_Init+0x4c>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f08 <MX_USART3_UART_Init+0x4c>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003eda:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <MX_USART3_UART_Init+0x4c>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003ee0:	4b09      	ldr	r3, [pc, #36]	@ (8003f08 <MX_USART3_UART_Init+0x4c>)
 8003ee2:	220c      	movs	r2, #12
 8003ee4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ee6:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <MX_USART3_UART_Init+0x4c>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <MX_USART3_UART_Init+0x4c>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003ef2:	4805      	ldr	r0, [pc, #20]	@ (8003f08 <MX_USART3_UART_Init+0x4c>)
 8003ef4:	f004 fdc8 	bl	8008a88 <HAL_UART_Init>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003efe:	f000 f971 	bl	80041e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000864 	.word	0x20000864
 8003f0c:	40004800 	.word	0x40004800

08003f10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	4b20      	ldr	r3, [pc, #128]	@ (8003f9c <MX_DMA_Init+0x8c>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f9c <MX_DMA_Init+0x8c>)
 8003f20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f26:	4b1d      	ldr	r3, [pc, #116]	@ (8003f9c <MX_DMA_Init+0x8c>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2100      	movs	r1, #0
 8003f36:	200b      	movs	r0, #11
 8003f38:	f001 f963 	bl	8005202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003f3c:	200b      	movs	r0, #11
 8003f3e:	f001 f97c 	bl	800523a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003f42:	2200      	movs	r2, #0
 8003f44:	2100      	movs	r1, #0
 8003f46:	200c      	movs	r0, #12
 8003f48:	f001 f95b 	bl	8005202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003f4c:	200c      	movs	r0, #12
 8003f4e:	f001 f974 	bl	800523a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003f52:	2200      	movs	r2, #0
 8003f54:	2100      	movs	r1, #0
 8003f56:	200e      	movs	r0, #14
 8003f58:	f001 f953 	bl	8005202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003f5c:	200e      	movs	r0, #14
 8003f5e:	f001 f96c 	bl	800523a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	2010      	movs	r0, #16
 8003f68:	f001 f94b 	bl	8005202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003f6c:	2010      	movs	r0, #16
 8003f6e:	f001 f964 	bl	800523a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003f72:	2200      	movs	r2, #0
 8003f74:	2100      	movs	r1, #0
 8003f76:	2011      	movs	r0, #17
 8003f78:	f001 f943 	bl	8005202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003f7c:	2011      	movs	r0, #17
 8003f7e:	f001 f95c 	bl	800523a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2100      	movs	r1, #0
 8003f86:	202f      	movs	r0, #47	@ 0x2f
 8003f88:	f001 f93b 	bl	8005202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003f8c:	202f      	movs	r0, #47	@ 0x2f
 8003f8e:	f001 f954 	bl	800523a <HAL_NVIC_EnableIRQ>

}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023800 	.word	0x40023800

08003fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	@ 0x28
 8003fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa6:	f107 0314 	add.w	r3, r7, #20
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
 8003fb2:	60da      	str	r2, [r3, #12]
 8003fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	4b38      	ldr	r3, [pc, #224]	@ (800409c <MX_GPIO_Init+0xfc>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fbe:	4a37      	ldr	r2, [pc, #220]	@ (800409c <MX_GPIO_Init+0xfc>)
 8003fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc6:	4b35      	ldr	r3, [pc, #212]	@ (800409c <MX_GPIO_Init+0xfc>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	4b31      	ldr	r3, [pc, #196]	@ (800409c <MX_GPIO_Init+0xfc>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	4a30      	ldr	r2, [pc, #192]	@ (800409c <MX_GPIO_Init+0xfc>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	@ (800409c <MX_GPIO_Init+0xfc>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800409c <MX_GPIO_Init+0xfc>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	4a29      	ldr	r2, [pc, #164]	@ (800409c <MX_GPIO_Init+0xfc>)
 8003ff8:	f043 0302 	orr.w	r3, r3, #2
 8003ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffe:	4b27      	ldr	r3, [pc, #156]	@ (800409c <MX_GPIO_Init+0xfc>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	4b23      	ldr	r3, [pc, #140]	@ (800409c <MX_GPIO_Init+0xfc>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004012:	4a22      	ldr	r2, [pc, #136]	@ (800409c <MX_GPIO_Init+0xfc>)
 8004014:	f043 0308 	orr.w	r3, r3, #8
 8004018:	6313      	str	r3, [r2, #48]	@ 0x30
 800401a:	4b20      	ldr	r3, [pc, #128]	@ (800409c <MX_GPIO_Init+0xfc>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	603b      	str	r3, [r7, #0]
 800402a:	4b1c      	ldr	r3, [pc, #112]	@ (800409c <MX_GPIO_Init+0xfc>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	4a1b      	ldr	r2, [pc, #108]	@ (800409c <MX_GPIO_Init+0xfc>)
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	6313      	str	r3, [r2, #48]	@ 0x30
 8004036:	4b19      	ldr	r3, [pc, #100]	@ (800409c <MX_GPIO_Init+0xfc>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8004042:	2200      	movs	r2, #0
 8004044:	2103      	movs	r1, #3
 8004046:	4816      	ldr	r0, [pc, #88]	@ (80040a0 <MX_GPIO_Init+0x100>)
 8004048:	f002 f80a 	bl	8006060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800404c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004052:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	4619      	mov	r1, r3
 8004062:	4810      	ldr	r0, [pc, #64]	@ (80040a4 <MX_GPIO_Init+0x104>)
 8004064:	f001 fd64 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004068:	2303      	movs	r3, #3
 800406a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406c:	2301      	movs	r3, #1
 800406e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004074:	2300      	movs	r3, #0
 8004076:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004078:	f107 0314 	add.w	r3, r7, #20
 800407c:	4619      	mov	r1, r3
 800407e:	4808      	ldr	r0, [pc, #32]	@ (80040a0 <MX_GPIO_Init+0x100>)
 8004080:	f001 fd56 	bl	8005b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004084:	2200      	movs	r2, #0
 8004086:	2100      	movs	r1, #0
 8004088:	2028      	movs	r0, #40	@ 0x28
 800408a:	f001 f8ba 	bl	8005202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800408e:	2028      	movs	r0, #40	@ 0x28
 8004090:	f001 f8d3 	bl	800523a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004094:	bf00      	nop
 8004096:	3728      	adds	r7, #40	@ 0x28
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800
 80040a0:	40020c00 	.word	0x40020c00
 80040a4:	40020400 	.word	0x40020400

080040a8 <Receive_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Receive_Throttle_Min(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
	if(ch[2]<1020) return 1;
 80040ac:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <Receive_Throttle_Min+0x20>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 7f7f 	cmp.w	r3, #1020	@ 0x3fc
 80040b4:	da01      	bge.n	80040ba <Receive_Throttle_Min+0x12>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <Receive_Throttle_Min+0x14>
	else return 0;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	200003dc 	.word	0x200003dc

080040cc <Calib_Gyro>:

void Calib_Gyro(void){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
	for( int i = 0; i < 2000; i++){
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	e03f      	b.n	8004158 <Calib_Gyro+0x8c>
		if(MPU6050_Read_Data() != HAL_OK)
 80040d8:	f7fe f81e 	bl	8002118 <MPU6050_Read_Data>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <Calib_Gyro+0x1a>
		{
			Reset_MPU6050();
 80040e2:	f000 f86d 	bl	80041c0 <Reset_MPU6050>
		}
		Gyro_X_Calib += Gx;
 80040e6:	4b2f      	ldr	r3, [pc, #188]	@ (80041a4 <Calib_Gyro+0xd8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f2:	4b2d      	ldr	r3, [pc, #180]	@ (80041a8 <Calib_Gyro+0xdc>)
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004100:	ee17 2a90 	vmov	r2, s15
 8004104:	4b27      	ldr	r3, [pc, #156]	@ (80041a4 <Calib_Gyro+0xd8>)
 8004106:	601a      	str	r2, [r3, #0]
		Gyro_Y_Calib += Gy;
 8004108:	4b28      	ldr	r3, [pc, #160]	@ (80041ac <Calib_Gyro+0xe0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004114:	4b26      	ldr	r3, [pc, #152]	@ (80041b0 <Calib_Gyro+0xe4>)
 8004116:	edd3 7a00 	vldr	s15, [r3]
 800411a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004122:	ee17 2a90 	vmov	r2, s15
 8004126:	4b21      	ldr	r3, [pc, #132]	@ (80041ac <Calib_Gyro+0xe0>)
 8004128:	601a      	str	r2, [r3, #0]
		Gyro_Z_Calib += Gz;
 800412a:	4b22      	ldr	r3, [pc, #136]	@ (80041b4 <Calib_Gyro+0xe8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004136:	4b20      	ldr	r3, [pc, #128]	@ (80041b8 <Calib_Gyro+0xec>)
 8004138:	edd3 7a00 	vldr	s15, [r3]
 800413c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004144:	ee17 2a90 	vmov	r2, s15
 8004148:	4b1a      	ldr	r3, [pc, #104]	@ (80041b4 <Calib_Gyro+0xe8>)
 800414a:	601a      	str	r2, [r3, #0]
		HAL_Delay(6);
 800414c:	2006      	movs	r0, #6
 800414e:	f000 ff59 	bl	8005004 <HAL_Delay>
	for( int i = 0; i < 2000; i++){
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3301      	adds	r3, #1
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800415e:	dbbb      	blt.n	80040d8 <Calib_Gyro+0xc>
	}
	Gyro_X_Calib /= 2000;
 8004160:	4b10      	ldr	r3, [pc, #64]	@ (80041a4 <Calib_Gyro+0xd8>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a15      	ldr	r2, [pc, #84]	@ (80041bc <Calib_Gyro+0xf0>)
 8004166:	fb82 1203 	smull	r1, r2, r2, r3
 800416a:	11d2      	asrs	r2, r2, #7
 800416c:	17db      	asrs	r3, r3, #31
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	4a0c      	ldr	r2, [pc, #48]	@ (80041a4 <Calib_Gyro+0xd8>)
 8004172:	6013      	str	r3, [r2, #0]
	Gyro_Y_Calib /= 2000;
 8004174:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <Calib_Gyro+0xe0>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a10      	ldr	r2, [pc, #64]	@ (80041bc <Calib_Gyro+0xf0>)
 800417a:	fb82 1203 	smull	r1, r2, r2, r3
 800417e:	11d2      	asrs	r2, r2, #7
 8004180:	17db      	asrs	r3, r3, #31
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	4a09      	ldr	r2, [pc, #36]	@ (80041ac <Calib_Gyro+0xe0>)
 8004186:	6013      	str	r3, [r2, #0]
	Gyro_Z_Calib /= 2000;
 8004188:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <Calib_Gyro+0xe8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0b      	ldr	r2, [pc, #44]	@ (80041bc <Calib_Gyro+0xf0>)
 800418e:	fb82 1203 	smull	r1, r2, r2, r3
 8004192:	11d2      	asrs	r2, r2, #7
 8004194:	17db      	asrs	r3, r3, #31
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	4a06      	ldr	r2, [pc, #24]	@ (80041b4 <Calib_Gyro+0xe8>)
 800419a:	6013      	str	r3, [r2, #0]
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	20000438 	.word	0x20000438
 80041a8:	2000042c 	.word	0x2000042c
 80041ac:	2000043c 	.word	0x2000043c
 80041b0:	20000430 	.word	0x20000430
 80041b4:	20000440 	.word	0x20000440
 80041b8:	20000434 	.word	0x20000434
 80041bc:	10624dd3 	.word	0x10624dd3

080041c0 <Reset_MPU6050>:

void Reset_MPU6050(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 80041c4:	4806      	ldr	r0, [pc, #24]	@ (80041e0 <Reset_MPU6050+0x20>)
 80041c6:	f002 f8c1 	bl	800634c <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 80041ca:	4805      	ldr	r0, [pc, #20]	@ (80041e0 <Reset_MPU6050+0x20>)
 80041cc:	f001 ff7a 	bl	80060c4 <HAL_I2C_Init>
	MX_I2C1_Init();
 80041d0:	f7ff fc5c 	bl	8003a8c <MX_I2C1_Init>
	MPU6050_Init();
 80041d4:	f7fd ff1a 	bl	800200c <MPU6050_Init>
	MPU6050_Read_Data();
 80041d8:	f7fd ff9e 	bl	8002118 <MPU6050_Read_Data>
}
 80041dc:	bf00      	nop
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000544 	.word	0x20000544

080041e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041e8:	b672      	cpsid	i
}
 80041ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <Error_Handler+0x8>

080041f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <HAL_MspInit+0x4c>)
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	4a0f      	ldr	r2, [pc, #60]	@ (800423c <HAL_MspInit+0x4c>)
 8004200:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004204:	6453      	str	r3, [r2, #68]	@ 0x44
 8004206:	4b0d      	ldr	r3, [pc, #52]	@ (800423c <HAL_MspInit+0x4c>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	603b      	str	r3, [r7, #0]
 8004216:	4b09      	ldr	r3, [pc, #36]	@ (800423c <HAL_MspInit+0x4c>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421a:	4a08      	ldr	r2, [pc, #32]	@ (800423c <HAL_MspInit+0x4c>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	@ 0x40
 8004222:	4b06      	ldr	r3, [pc, #24]	@ (800423c <HAL_MspInit+0x4c>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422a:	603b      	str	r3, [r7, #0]
 800422c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40023800 	.word	0x40023800

08004240 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08e      	sub	sp, #56	@ 0x38
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	609a      	str	r2, [r3, #8]
 8004254:	60da      	str	r2, [r3, #12]
 8004256:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a8b      	ldr	r2, [pc, #556]	@ (800448c <HAL_I2C_MspInit+0x24c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	f040 808b 	bne.w	800437a <HAL_I2C_MspInit+0x13a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004264:	2300      	movs	r3, #0
 8004266:	623b      	str	r3, [r7, #32]
 8004268:	4b89      	ldr	r3, [pc, #548]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	4a88      	ldr	r2, [pc, #544]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 800426e:	f043 0302 	orr.w	r3, r3, #2
 8004272:	6313      	str	r3, [r2, #48]	@ 0x30
 8004274:	4b86      	ldr	r3, [pc, #536]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	623b      	str	r3, [r7, #32]
 800427e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004280:	23c0      	movs	r3, #192	@ 0xc0
 8004282:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004284:	2312      	movs	r3, #18
 8004286:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004288:	2301      	movs	r3, #1
 800428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800428c:	2303      	movs	r3, #3
 800428e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004290:	2304      	movs	r3, #4
 8004292:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004298:	4619      	mov	r1, r3
 800429a:	487e      	ldr	r0, [pc, #504]	@ (8004494 <HAL_I2C_MspInit+0x254>)
 800429c:	f001 fc48 	bl	8005b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	4b7a      	ldr	r3, [pc, #488]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	4a79      	ldr	r2, [pc, #484]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 80042aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80042b0:	4b77      	ldr	r3, [pc, #476]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b8:	61fb      	str	r3, [r7, #28]
 80042ba:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80042bc:	4b76      	ldr	r3, [pc, #472]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042be:	4a77      	ldr	r2, [pc, #476]	@ (800449c <HAL_I2C_MspInit+0x25c>)
 80042c0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80042c2:	4b75      	ldr	r3, [pc, #468]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042c8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042ca:	4b73      	ldr	r3, [pc, #460]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042d0:	4b71      	ldr	r3, [pc, #452]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042d6:	4b70      	ldr	r3, [pc, #448]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042de:	4b6e      	ldr	r3, [pc, #440]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042e4:	4b6c      	ldr	r3, [pc, #432]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80042ea:	4b6b      	ldr	r3, [pc, #428]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80042f0:	4b69      	ldr	r3, [pc, #420]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042f2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80042f6:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042f8:	4b67      	ldr	r3, [pc, #412]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80042fe:	4866      	ldr	r0, [pc, #408]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 8004300:	f000 ffb6 	bl	8005270 <HAL_DMA_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 800430a:	f7ff ff6b 	bl	80041e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a61      	ldr	r2, [pc, #388]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 8004312:	639a      	str	r2, [r3, #56]	@ 0x38
 8004314:	4a60      	ldr	r2, [pc, #384]	@ (8004498 <HAL_I2C_MspInit+0x258>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 800431a:	4b61      	ldr	r3, [pc, #388]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 800431c:	4a61      	ldr	r2, [pc, #388]	@ (80044a4 <HAL_I2C_MspInit+0x264>)
 800431e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004320:	4b5f      	ldr	r3, [pc, #380]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 8004322:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004326:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004328:	4b5d      	ldr	r3, [pc, #372]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 800432a:	2240      	movs	r2, #64	@ 0x40
 800432c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800432e:	4b5c      	ldr	r3, [pc, #368]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 8004330:	2200      	movs	r2, #0
 8004332:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004334:	4b5a      	ldr	r3, [pc, #360]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 8004336:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800433a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800433c:	4b58      	ldr	r3, [pc, #352]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 800433e:	2200      	movs	r2, #0
 8004340:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004342:	4b57      	ldr	r3, [pc, #348]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 8004344:	2200      	movs	r2, #0
 8004346:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004348:	4b55      	ldr	r3, [pc, #340]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 800434a:	2200      	movs	r2, #0
 800434c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800434e:	4b54      	ldr	r3, [pc, #336]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 8004350:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004354:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004356:	4b52      	ldr	r3, [pc, #328]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 8004358:	2200      	movs	r2, #0
 800435a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800435c:	4850      	ldr	r0, [pc, #320]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 800435e:	f000 ff87 	bl	8005270 <HAL_DMA_Init>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8004368:	f7ff ff3c 	bl	80041e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a4c      	ldr	r2, [pc, #304]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 8004370:	635a      	str	r2, [r3, #52]	@ 0x34
 8004372:	4a4b      	ldr	r2, [pc, #300]	@ (80044a0 <HAL_I2C_MspInit+0x260>)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004378:	e083      	b.n	8004482 <HAL_I2C_MspInit+0x242>
  else if(hi2c->Instance==I2C2)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a4a      	ldr	r2, [pc, #296]	@ (80044a8 <HAL_I2C_MspInit+0x268>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d12d      	bne.n	80043e0 <HAL_I2C_MspInit+0x1a0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	4b41      	ldr	r3, [pc, #260]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	4a40      	ldr	r2, [pc, #256]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 800438e:	f043 0302 	orr.w	r3, r3, #2
 8004392:	6313      	str	r3, [r2, #48]	@ 0x30
 8004394:	4b3e      	ldr	r3, [pc, #248]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043a6:	2312      	movs	r3, #18
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043aa:	2301      	movs	r3, #1
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ae:	2303      	movs	r3, #3
 80043b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043b2:	2304      	movs	r3, #4
 80043b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043ba:	4619      	mov	r1, r3
 80043bc:	4835      	ldr	r0, [pc, #212]	@ (8004494 <HAL_I2C_MspInit+0x254>)
 80043be:	f001 fbb7 	bl	8005b30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	4b32      	ldr	r3, [pc, #200]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ca:	4a31      	ldr	r2, [pc, #196]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 80043cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]
}
 80043de:	e050      	b.n	8004482 <HAL_I2C_MspInit+0x242>
  else if(hi2c->Instance==I2C3)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a31      	ldr	r2, [pc, #196]	@ (80044ac <HAL_I2C_MspInit+0x26c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d14b      	bne.n	8004482 <HAL_I2C_MspInit+0x242>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	4b28      	ldr	r3, [pc, #160]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	4a27      	ldr	r2, [pc, #156]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 80043f4:	f043 0304 	orr.w	r3, r3, #4
 80043f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80043fa:	4b25      	ldr	r3, [pc, #148]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	4b21      	ldr	r3, [pc, #132]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440e:	4a20      	ldr	r2, [pc, #128]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	6313      	str	r3, [r2, #48]	@ 0x30
 8004416:	4b1e      	ldr	r3, [pc, #120]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004426:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004428:	2312      	movs	r3, #18
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800442c:	2301      	movs	r3, #1
 800442e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004430:	2303      	movs	r3, #3
 8004432:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004434:	2304      	movs	r3, #4
 8004436:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004438:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800443c:	4619      	mov	r1, r3
 800443e:	481c      	ldr	r0, [pc, #112]	@ (80044b0 <HAL_I2C_MspInit+0x270>)
 8004440:	f001 fb76 	bl	8005b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004444:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800444a:	2312      	movs	r3, #18
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800444e:	2301      	movs	r3, #1
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004452:	2303      	movs	r3, #3
 8004454:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004456:	2304      	movs	r3, #4
 8004458:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800445e:	4619      	mov	r1, r3
 8004460:	4814      	ldr	r0, [pc, #80]	@ (80044b4 <HAL_I2C_MspInit+0x274>)
 8004462:	f001 fb65 	bl	8005b30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	4a08      	ldr	r2, [pc, #32]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 8004470:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004474:	6413      	str	r3, [r2, #64]	@ 0x40
 8004476:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <HAL_I2C_MspInit+0x250>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
}
 8004482:	bf00      	nop
 8004484:	3738      	adds	r7, #56	@ 0x38
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40005400 	.word	0x40005400
 8004490:	40023800 	.word	0x40023800
 8004494:	40020400 	.word	0x40020400
 8004498:	20000640 	.word	0x20000640
 800449c:	40026010 	.word	0x40026010
 80044a0:	200006a0 	.word	0x200006a0
 80044a4:	400260b8 	.word	0x400260b8
 80044a8:	40005800 	.word	0x40005800
 80044ac:	40005c00 	.word	0x40005c00
 80044b0:	40020800 	.word	0x40020800
 80044b4:	40020000 	.word	0x40020000

080044b8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a25      	ldr	r2, [pc, #148]	@ (800455c <HAL_I2C_MspDeInit+0xa4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d118      	bne.n	80044fc <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80044ca:	4b25      	ldr	r3, [pc, #148]	@ (8004560 <HAL_I2C_MspDeInit+0xa8>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	4a24      	ldr	r2, [pc, #144]	@ (8004560 <HAL_I2C_MspDeInit+0xa8>)
 80044d0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044d4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80044d6:	2140      	movs	r1, #64	@ 0x40
 80044d8:	4822      	ldr	r0, [pc, #136]	@ (8004564 <HAL_I2C_MspDeInit+0xac>)
 80044da:	f001 fcc5 	bl	8005e68 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80044de:	2180      	movs	r1, #128	@ 0x80
 80044e0:	4820      	ldr	r0, [pc, #128]	@ (8004564 <HAL_I2C_MspDeInit+0xac>)
 80044e2:	f001 fcc1 	bl	8005e68 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 ff6e 	bl	80053cc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 ff69 	bl	80053cc <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80044fa:	e02a      	b.n	8004552 <HAL_I2C_MspDeInit+0x9a>
  else if(hi2c->Instance==I2C2)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a19      	ldr	r2, [pc, #100]	@ (8004568 <HAL_I2C_MspDeInit+0xb0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d110      	bne.n	8004528 <HAL_I2C_MspDeInit+0x70>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004506:	4b16      	ldr	r3, [pc, #88]	@ (8004560 <HAL_I2C_MspDeInit+0xa8>)
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <HAL_I2C_MspDeInit+0xa8>)
 800450c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004510:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8004512:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004516:	4813      	ldr	r0, [pc, #76]	@ (8004564 <HAL_I2C_MspDeInit+0xac>)
 8004518:	f001 fca6 	bl	8005e68 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800451c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004520:	4810      	ldr	r0, [pc, #64]	@ (8004564 <HAL_I2C_MspDeInit+0xac>)
 8004522:	f001 fca1 	bl	8005e68 <HAL_GPIO_DeInit>
}
 8004526:	e014      	b.n	8004552 <HAL_I2C_MspDeInit+0x9a>
  else if(hi2c->Instance==I2C3)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0f      	ldr	r2, [pc, #60]	@ (800456c <HAL_I2C_MspDeInit+0xb4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10f      	bne.n	8004552 <HAL_I2C_MspDeInit+0x9a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004532:	4b0b      	ldr	r3, [pc, #44]	@ (8004560 <HAL_I2C_MspDeInit+0xa8>)
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <HAL_I2C_MspDeInit+0xa8>)
 8004538:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800453c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800453e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004542:	480b      	ldr	r0, [pc, #44]	@ (8004570 <HAL_I2C_MspDeInit+0xb8>)
 8004544:	f001 fc90 	bl	8005e68 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8004548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800454c:	4809      	ldr	r0, [pc, #36]	@ (8004574 <HAL_I2C_MspDeInit+0xbc>)
 800454e:	f001 fc8b 	bl	8005e68 <HAL_GPIO_DeInit>
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40005400 	.word	0x40005400
 8004560:	40023800 	.word	0x40023800
 8004564:	40020400 	.word	0x40020400
 8004568:	40005800 	.word	0x40005800
 800456c:	40005c00 	.word	0x40005c00
 8004570:	40020800 	.word	0x40020800
 8004574:	40020000 	.word	0x40020000

08004578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a22      	ldr	r2, [pc, #136]	@ (8004610 <HAL_TIM_Base_MspInit+0x98>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d10e      	bne.n	80045a8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <HAL_TIM_Base_MspInit+0x9c>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004592:	4a20      	ldr	r2, [pc, #128]	@ (8004614 <HAL_TIM_Base_MspInit+0x9c>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6453      	str	r3, [r2, #68]	@ 0x44
 800459a:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <HAL_TIM_Base_MspInit+0x9c>)
 800459c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80045a6:	e02e      	b.n	8004606 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	4b17      	ldr	r3, [pc, #92]	@ (8004614 <HAL_TIM_Base_MspInit+0x9c>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ba:	4a16      	ldr	r2, [pc, #88]	@ (8004614 <HAL_TIM_Base_MspInit+0x9c>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045c2:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <HAL_TIM_Base_MspInit+0x9c>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]
}
 80045ce:	e01a      	b.n	8004606 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a10      	ldr	r2, [pc, #64]	@ (8004618 <HAL_TIM_Base_MspInit+0xa0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d115      	bne.n	8004606 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <HAL_TIM_Base_MspInit+0x9c>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004614 <HAL_TIM_Base_MspInit+0x9c>)
 80045e4:	f043 0304 	orr.w	r3, r3, #4
 80045e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <HAL_TIM_Base_MspInit+0x9c>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80045f6:	2200      	movs	r2, #0
 80045f8:	2100      	movs	r1, #0
 80045fa:	201e      	movs	r0, #30
 80045fc:	f000 fe01 	bl	8005202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004600:	201e      	movs	r0, #30
 8004602:	f000 fe1a 	bl	800523a <HAL_NVIC_EnableIRQ>
}
 8004606:	bf00      	nop
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40010000 	.word	0x40010000
 8004614:	40023800 	.word	0x40023800
 8004618:	40000800 	.word	0x40000800

0800461c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a0b      	ldr	r2, [pc, #44]	@ (8004658 <HAL_TIM_PWM_MspInit+0x3c>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d10d      	bne.n	800464a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	4b0a      	ldr	r3, [pc, #40]	@ (800465c <HAL_TIM_PWM_MspInit+0x40>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	4a09      	ldr	r2, [pc, #36]	@ (800465c <HAL_TIM_PWM_MspInit+0x40>)
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	6413      	str	r3, [r2, #64]	@ 0x40
 800463e:	4b07      	ldr	r3, [pc, #28]	@ (800465c <HAL_TIM_PWM_MspInit+0x40>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800464a:	bf00      	nop
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40000400 	.word	0x40000400
 800465c:	40023800 	.word	0x40023800

08004660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	@ 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004668:	f107 0314 	add.w	r3, r7, #20
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	605a      	str	r2, [r3, #4]
 8004672:	609a      	str	r2, [r3, #8]
 8004674:	60da      	str	r2, [r3, #12]
 8004676:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a21      	ldr	r2, [pc, #132]	@ (8004704 <HAL_TIM_MspPostInit+0xa4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d13b      	bne.n	80046fa <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	4b20      	ldr	r3, [pc, #128]	@ (8004708 <HAL_TIM_MspPostInit+0xa8>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	4a1f      	ldr	r2, [pc, #124]	@ (8004708 <HAL_TIM_MspPostInit+0xa8>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6313      	str	r3, [r2, #48]	@ 0x30
 8004692:	4b1d      	ldr	r3, [pc, #116]	@ (8004708 <HAL_TIM_MspPostInit+0xa8>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	4b19      	ldr	r3, [pc, #100]	@ (8004708 <HAL_TIM_MspPostInit+0xa8>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <HAL_TIM_MspPostInit+0xa8>)
 80046a8:	f043 0302 	orr.w	r3, r3, #2
 80046ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ae:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <HAL_TIM_MspPostInit+0xa8>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046ba:	23c0      	movs	r3, #192	@ 0xc0
 80046bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046be:	2302      	movs	r3, #2
 80046c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046c6:	2300      	movs	r3, #0
 80046c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046ca:	2302      	movs	r3, #2
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046ce:	f107 0314 	add.w	r3, r7, #20
 80046d2:	4619      	mov	r1, r3
 80046d4:	480d      	ldr	r0, [pc, #52]	@ (800470c <HAL_TIM_MspPostInit+0xac>)
 80046d6:	f001 fa2b 	bl	8005b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80046da:	2303      	movs	r3, #3
 80046dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	2302      	movs	r3, #2
 80046e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e6:	2300      	movs	r3, #0
 80046e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046ea:	2302      	movs	r3, #2
 80046ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	4619      	mov	r1, r3
 80046f4:	4806      	ldr	r0, [pc, #24]	@ (8004710 <HAL_TIM_MspPostInit+0xb0>)
 80046f6:	f001 fa1b 	bl	8005b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80046fa:	bf00      	nop
 80046fc:	3728      	adds	r7, #40	@ 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40000400 	.word	0x40000400
 8004708:	40023800 	.word	0x40023800
 800470c:	40020000 	.word	0x40020000
 8004710:	40020400 	.word	0x40020400

08004714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08c      	sub	sp, #48	@ 0x30
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800471c:	f107 031c 	add.w	r3, r7, #28
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	605a      	str	r2, [r3, #4]
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a99      	ldr	r2, [pc, #612]	@ (8004998 <HAL_UART_MspInit+0x284>)
 8004732:	4293      	cmp	r3, r2
 8004734:	f040 8093 	bne.w	800485e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
 800473c:	4b97      	ldr	r3, [pc, #604]	@ (800499c <HAL_UART_MspInit+0x288>)
 800473e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004740:	4a96      	ldr	r2, [pc, #600]	@ (800499c <HAL_UART_MspInit+0x288>)
 8004742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004746:	6413      	str	r3, [r2, #64]	@ 0x40
 8004748:	4b94      	ldr	r3, [pc, #592]	@ (800499c <HAL_UART_MspInit+0x288>)
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	4b90      	ldr	r3, [pc, #576]	@ (800499c <HAL_UART_MspInit+0x288>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475c:	4a8f      	ldr	r2, [pc, #572]	@ (800499c <HAL_UART_MspInit+0x288>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6313      	str	r3, [r2, #48]	@ 0x30
 8004764:	4b8d      	ldr	r3, [pc, #564]	@ (800499c <HAL_UART_MspInit+0x288>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004770:	230c      	movs	r3, #12
 8004772:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004778:	2300      	movs	r3, #0
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477c:	2303      	movs	r3, #3
 800477e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004780:	2307      	movs	r3, #7
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004784:	f107 031c 	add.w	r3, r7, #28
 8004788:	4619      	mov	r1, r3
 800478a:	4885      	ldr	r0, [pc, #532]	@ (80049a0 <HAL_UART_MspInit+0x28c>)
 800478c:	f001 f9d0 	bl	8005b30 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004790:	4b84      	ldr	r3, [pc, #528]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 8004792:	4a85      	ldr	r2, [pc, #532]	@ (80049a8 <HAL_UART_MspInit+0x294>)
 8004794:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004796:	4b83      	ldr	r3, [pc, #524]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 8004798:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800479c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800479e:	4b81      	ldr	r3, [pc, #516]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047a4:	4b7f      	ldr	r3, [pc, #508]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047aa:	4b7e      	ldr	r3, [pc, #504]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047b2:	4b7c      	ldr	r3, [pc, #496]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047b8:	4b7a      	ldr	r3, [pc, #488]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80047be:	4b79      	ldr	r3, [pc, #484]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80047c4:	4b77      	ldr	r3, [pc, #476]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047ca:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80047cc:	4b75      	ldr	r3, [pc, #468]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80047d2:	4874      	ldr	r0, [pc, #464]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047d4:	f000 fd4c 	bl	8005270 <HAL_DMA_Init>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80047de:	f7ff fd01 	bl	80041e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a6f      	ldr	r2, [pc, #444]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80047e8:	4a6e      	ldr	r2, [pc, #440]	@ (80049a4 <HAL_UART_MspInit+0x290>)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80047ee:	4b6f      	ldr	r3, [pc, #444]	@ (80049ac <HAL_UART_MspInit+0x298>)
 80047f0:	4a6f      	ldr	r2, [pc, #444]	@ (80049b0 <HAL_UART_MspInit+0x29c>)
 80047f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80047f4:	4b6d      	ldr	r3, [pc, #436]	@ (80049ac <HAL_UART_MspInit+0x298>)
 80047f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80047fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047fc:	4b6b      	ldr	r3, [pc, #428]	@ (80049ac <HAL_UART_MspInit+0x298>)
 80047fe:	2240      	movs	r2, #64	@ 0x40
 8004800:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004802:	4b6a      	ldr	r3, [pc, #424]	@ (80049ac <HAL_UART_MspInit+0x298>)
 8004804:	2200      	movs	r2, #0
 8004806:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004808:	4b68      	ldr	r3, [pc, #416]	@ (80049ac <HAL_UART_MspInit+0x298>)
 800480a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800480e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004810:	4b66      	ldr	r3, [pc, #408]	@ (80049ac <HAL_UART_MspInit+0x298>)
 8004812:	2200      	movs	r2, #0
 8004814:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004816:	4b65      	ldr	r3, [pc, #404]	@ (80049ac <HAL_UART_MspInit+0x298>)
 8004818:	2200      	movs	r2, #0
 800481a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800481c:	4b63      	ldr	r3, [pc, #396]	@ (80049ac <HAL_UART_MspInit+0x298>)
 800481e:	2200      	movs	r2, #0
 8004820:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004822:	4b62      	ldr	r3, [pc, #392]	@ (80049ac <HAL_UART_MspInit+0x298>)
 8004824:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004828:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800482a:	4b60      	ldr	r3, [pc, #384]	@ (80049ac <HAL_UART_MspInit+0x298>)
 800482c:	2200      	movs	r2, #0
 800482e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004830:	485e      	ldr	r0, [pc, #376]	@ (80049ac <HAL_UART_MspInit+0x298>)
 8004832:	f000 fd1d 	bl	8005270 <HAL_DMA_Init>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800483c:	f7ff fcd2 	bl	80041e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a5a      	ldr	r2, [pc, #360]	@ (80049ac <HAL_UART_MspInit+0x298>)
 8004844:	635a      	str	r2, [r3, #52]	@ 0x34
 8004846:	4a59      	ldr	r2, [pc, #356]	@ (80049ac <HAL_UART_MspInit+0x298>)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800484c:	2200      	movs	r2, #0
 800484e:	2100      	movs	r1, #0
 8004850:	2026      	movs	r0, #38	@ 0x26
 8004852:	f000 fcd6 	bl	8005202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004856:	2026      	movs	r0, #38	@ 0x26
 8004858:	f000 fcef 	bl	800523a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800485c:	e097      	b.n	800498e <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART3)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a54      	ldr	r2, [pc, #336]	@ (80049b4 <HAL_UART_MspInit+0x2a0>)
 8004864:	4293      	cmp	r3, r2
 8004866:	f040 8092 	bne.w	800498e <HAL_UART_MspInit+0x27a>
    __HAL_RCC_USART3_CLK_ENABLE();
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	4b4b      	ldr	r3, [pc, #300]	@ (800499c <HAL_UART_MspInit+0x288>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	4a4a      	ldr	r2, [pc, #296]	@ (800499c <HAL_UART_MspInit+0x288>)
 8004874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004878:	6413      	str	r3, [r2, #64]	@ 0x40
 800487a:	4b48      	ldr	r3, [pc, #288]	@ (800499c <HAL_UART_MspInit+0x288>)
 800487c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	4b44      	ldr	r3, [pc, #272]	@ (800499c <HAL_UART_MspInit+0x288>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488e:	4a43      	ldr	r2, [pc, #268]	@ (800499c <HAL_UART_MspInit+0x288>)
 8004890:	f043 0308 	orr.w	r3, r3, #8
 8004894:	6313      	str	r3, [r2, #48]	@ 0x30
 8004896:	4b41      	ldr	r3, [pc, #260]	@ (800499c <HAL_UART_MspInit+0x288>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80048a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a8:	2302      	movs	r3, #2
 80048aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048b0:	2303      	movs	r3, #3
 80048b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048b4:	2307      	movs	r3, #7
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b8:	f107 031c 	add.w	r3, r7, #28
 80048bc:	4619      	mov	r1, r3
 80048be:	483e      	ldr	r0, [pc, #248]	@ (80049b8 <HAL_UART_MspInit+0x2a4>)
 80048c0:	f001 f936 	bl	8005b30 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80048c4:	4b3d      	ldr	r3, [pc, #244]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 80048c6:	4a3e      	ldr	r2, [pc, #248]	@ (80049c0 <HAL_UART_MspInit+0x2ac>)
 80048c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80048ca:	4b3c      	ldr	r3, [pc, #240]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 80048cc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80048d0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048d2:	4b3a      	ldr	r3, [pc, #232]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 80048d4:	2200      	movs	r2, #0
 80048d6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048d8:	4b38      	ldr	r3, [pc, #224]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 80048da:	2200      	movs	r2, #0
 80048dc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048de:	4b37      	ldr	r3, [pc, #220]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 80048e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048e4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048e6:	4b35      	ldr	r3, [pc, #212]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048ec:	4b33      	ldr	r3, [pc, #204]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80048f2:	4b32      	ldr	r3, [pc, #200]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 80048f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048f8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048fa:	4b30      	ldr	r3, [pc, #192]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004900:	4b2e      	ldr	r3, [pc, #184]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 8004902:	2200      	movs	r2, #0
 8004904:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004906:	482d      	ldr	r0, [pc, #180]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 8004908:	f000 fcb2 	bl	8005270 <HAL_DMA_Init>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_UART_MspInit+0x202>
      Error_Handler();
 8004912:	f7ff fc67 	bl	80041e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a28      	ldr	r2, [pc, #160]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 800491a:	639a      	str	r2, [r3, #56]	@ 0x38
 800491c:	4a27      	ldr	r2, [pc, #156]	@ (80049bc <HAL_UART_MspInit+0x2a8>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004922:	4b28      	ldr	r3, [pc, #160]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 8004924:	4a28      	ldr	r2, [pc, #160]	@ (80049c8 <HAL_UART_MspInit+0x2b4>)
 8004926:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004928:	4b26      	ldr	r3, [pc, #152]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 800492a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800492e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004930:	4b24      	ldr	r3, [pc, #144]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 8004932:	2240      	movs	r2, #64	@ 0x40
 8004934:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004936:	4b23      	ldr	r3, [pc, #140]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 8004938:	2200      	movs	r2, #0
 800493a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800493c:	4b21      	ldr	r3, [pc, #132]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 800493e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004942:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004944:	4b1f      	ldr	r3, [pc, #124]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 8004946:	2200      	movs	r2, #0
 8004948:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800494a:	4b1e      	ldr	r3, [pc, #120]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 800494c:	2200      	movs	r2, #0
 800494e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004950:	4b1c      	ldr	r3, [pc, #112]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 8004952:	2200      	movs	r2, #0
 8004954:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004956:	4b1b      	ldr	r3, [pc, #108]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800495c:	4b19      	ldr	r3, [pc, #100]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 800495e:	2200      	movs	r2, #0
 8004960:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004962:	4818      	ldr	r0, [pc, #96]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 8004964:	f000 fc84 	bl	8005270 <HAL_DMA_Init>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800496e:	f7ff fc39 	bl	80041e4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a13      	ldr	r2, [pc, #76]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 8004976:	635a      	str	r2, [r3, #52]	@ 0x34
 8004978:	4a12      	ldr	r2, [pc, #72]	@ (80049c4 <HAL_UART_MspInit+0x2b0>)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800497e:	2200      	movs	r2, #0
 8004980:	2101      	movs	r1, #1
 8004982:	2027      	movs	r0, #39	@ 0x27
 8004984:	f000 fc3d 	bl	8005202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004988:	2027      	movs	r0, #39	@ 0x27
 800498a:	f000 fc56 	bl	800523a <HAL_NVIC_EnableIRQ>
}
 800498e:	bf00      	nop
 8004990:	3730      	adds	r7, #48	@ 0x30
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40004400 	.word	0x40004400
 800499c:	40023800 	.word	0x40023800
 80049a0:	40020000 	.word	0x40020000
 80049a4:	200008a8 	.word	0x200008a8
 80049a8:	40026088 	.word	0x40026088
 80049ac:	20000908 	.word	0x20000908
 80049b0:	400260a0 	.word	0x400260a0
 80049b4:	40004800 	.word	0x40004800
 80049b8:	40020c00 	.word	0x40020c00
 80049bc:	20000968 	.word	0x20000968
 80049c0:	40026028 	.word	0x40026028
 80049c4:	200009c8 	.word	0x200009c8
 80049c8:	40026058 	.word	0x40026058

080049cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049d0:	bf00      	nop
 80049d2:	e7fd      	b.n	80049d0 <NMI_Handler+0x4>

080049d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <HardFault_Handler+0x4>

080049dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049e0:	bf00      	nop
 80049e2:	e7fd      	b.n	80049e0 <MemManage_Handler+0x4>

080049e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <BusFault_Handler+0x4>

080049ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <UsageFault_Handler+0x4>

080049f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049f8:	bf00      	nop
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a22:	f000 facf 	bl	8004fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004a30:	4802      	ldr	r0, [pc, #8]	@ (8004a3c <DMA1_Stream0_IRQHandler+0x10>)
 8004a32:	f000 fe13 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000640 	.word	0x20000640

08004a40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004a44:	4802      	ldr	r0, [pc, #8]	@ (8004a50 <DMA1_Stream1_IRQHandler+0x10>)
 8004a46:	f000 fe09 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20000968 	.word	0x20000968

08004a54 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004a58:	4802      	ldr	r0, [pc, #8]	@ (8004a64 <DMA1_Stream3_IRQHandler+0x10>)
 8004a5a:	f000 fdff 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200009c8 	.word	0x200009c8

08004a68 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a6c:	4802      	ldr	r0, [pc, #8]	@ (8004a78 <DMA1_Stream5_IRQHandler+0x10>)
 8004a6e:	f000 fdf5 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	200008a8 	.word	0x200008a8

08004a7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a80:	4802      	ldr	r0, [pc, #8]	@ (8004a8c <DMA1_Stream6_IRQHandler+0x10>)
 8004a82:	f000 fdeb 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000908 	.word	0x20000908

08004a90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004a94:	4802      	ldr	r0, [pc, #8]	@ (8004aa0 <TIM4_IRQHandler+0x10>)
 8004a96:	f003 f99d 	bl	8007dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004a9a:	bf00      	nop
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	200007d8 	.word	0x200007d8

08004aa4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004aa8:	4802      	ldr	r0, [pc, #8]	@ (8004ab4 <USART2_IRQHandler+0x10>)
 8004aaa:	f004 f94f 	bl	8008d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004aae:	bf00      	nop
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000820 	.word	0x20000820

08004ab8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004abc:	4802      	ldr	r0, [pc, #8]	@ (8004ac8 <USART3_IRQHandler+0x10>)
 8004abe:	f004 f945 	bl	8008d4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000864 	.word	0x20000864

08004acc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004ad0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004ad4:	f001 fade 	bl	8006094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ad8:	bf00      	nop
 8004ada:	bd80      	pop	{r7, pc}

08004adc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004ae0:	4802      	ldr	r0, [pc, #8]	@ (8004aec <DMA1_Stream7_IRQHandler+0x10>)
 8004ae2:	f000 fdbb 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	200006a0 	.word	0x200006a0

08004af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004af4:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <SystemInit+0x20>)
 8004af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afa:	4a05      	ldr	r2, [pc, #20]	@ (8004b10 <SystemInit+0x20>)
 8004afc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	e000ed00 	.word	0xe000ed00

08004b14 <twiSend>:

#include "stm32f4xx_hal.h"
#include "wire.h"
#include "DelayUs.h"
void twiSend(uint8_t address, uint8_t command, uint8_t length)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	71fb      	strb	r3, [r7, #7]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	71bb      	strb	r3, [r7, #6]
 8004b22:	4613      	mov	r3, r2
 8004b24:	717b      	strb	r3, [r7, #5]
    I2C2->CR1 |= I2C_CR1_START; //START condition
 8004b26:	4b22      	ldr	r3, [pc, #136]	@ (8004bb0 <twiSend+0x9c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a21      	ldr	r2, [pc, #132]	@ (8004bb0 <twiSend+0x9c>)
 8004b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b30:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8004b32:	bf00      	nop
 8004b34:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb0 <twiSend+0x9c>)
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0f9      	beq.n	8004b34 <twiSend+0x20>
    I2C2->DR=(address<<1|0); //sending address of the device, 0 = sending
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb0 <twiSend+0x9c>)
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	6113      	str	r3, [r2, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2));
 8004b48:	bf00      	nop
 8004b4a:	4b19      	ldr	r3, [pc, #100]	@ (8004bb0 <twiSend+0x9c>)
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	4b14      	ldr	r3, [pc, #80]	@ (8004bb0 <twiSend+0x9c>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1eb      	bne.n	8004b4a <twiSend+0x36>
    I2C2->DR=command; //filling data register with byte, if single - command, multiple - command(s) and data
 8004b72:	4a0f      	ldr	r2, [pc, #60]	@ (8004bb0 <twiSend+0x9c>)
 8004b74:	79bb      	ldrb	r3, [r7, #6]
 8004b76:	6113      	str	r3, [r2, #16]
    for (uint8_t i=0;i<length;i++)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	73fb      	strb	r3, [r7, #15]
 8004b7c:	e00a      	b.n	8004b94 <twiSend+0x80>
    {
        I2C2->DR=buffer[i]; //filling buffer with command or data
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb4 <twiSend+0xa0>)
 8004b82:	5cd2      	ldrb	r2, [r2, r3]
 8004b84:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb0 <twiSend+0x9c>)
 8004b86:	611a      	str	r2, [r3, #16]
        delay(60);
 8004b88:	203c      	movs	r0, #60	@ 0x3c
 8004b8a:	f7fc f9cf 	bl	8000f2c <delay>
    for (uint8_t i=0;i<length;i++)
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	3301      	adds	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
 8004b94:	7bfa      	ldrb	r2, [r7, #15]
 8004b96:	797b      	ldrb	r3, [r7, #5]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d3f0      	bcc.n	8004b7e <twiSend+0x6a>
    }
    I2C2->CR1 |= I2C_CR1_STOP;
 8004b9c:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <twiSend+0x9c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a03      	ldr	r2, [pc, #12]	@ (8004bb0 <twiSend+0x9c>)
 8004ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ba6:	6013      	str	r3, [r2, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40005800 	.word	0x40005800
 8004bb4:	200001ec 	.word	0x200001ec

08004bb8 <twiReceive>:

void twiReceive(uint8_t address, uint8_t command, uint8_t length)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	71bb      	strb	r3, [r7, #6]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	717b      	strb	r3, [r7, #5]
    I2C2->CR1 |= I2C_CR1_ACK;
 8004bca:	4b74      	ldr	r3, [pc, #464]	@ (8004d9c <twiReceive+0x1e4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a73      	ldr	r2, [pc, #460]	@ (8004d9c <twiReceive+0x1e4>)
 8004bd0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bd4:	6013      	str	r3, [r2, #0]
  I2C2->CR1 |= I2C_CR1_START; //start pulse
 8004bd6:	4b71      	ldr	r3, [pc, #452]	@ (8004d9c <twiReceive+0x1e4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a70      	ldr	r2, [pc, #448]	@ (8004d9c <twiReceive+0x1e4>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be0:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8004be2:	bf00      	nop
 8004be4:	4b6d      	ldr	r3, [pc, #436]	@ (8004d9c <twiReceive+0x1e4>)
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0f9      	beq.n	8004be4 <twiReceive+0x2c>
    I2C2->DR=(address<<1|0); //sending address of the device, 0 = sending
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	4a6a      	ldr	r2, [pc, #424]	@ (8004d9c <twiReceive+0x1e4>)
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	6113      	str	r3, [r2, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2 & I2C_SR2_BUSY));
 8004bf8:	bf00      	nop
 8004bfa:	4b68      	ldr	r3, [pc, #416]	@ (8004d9c <twiReceive+0x1e4>)
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	bf0c      	ite	eq
 8004c06:	2301      	moveq	r3, #1
 8004c08:	2300      	movne	r3, #0
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	4b63      	ldr	r3, [pc, #396]	@ (8004d9c <twiReceive+0x1e4>)
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	bf0c      	ite	eq
 8004c18:	2301      	moveq	r3, #1
 8004c1a:	2300      	movne	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e9      	bne.n	8004bfa <twiReceive+0x42>
    I2C2->DR=command; //sending command to the device in order to request data
 8004c26:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <twiReceive+0x1e4>)
 8004c28:	79bb      	ldrb	r3, [r7, #6]
 8004c2a:	6113      	str	r3, [r2, #16]
    I2C2->CR1 |= I2C_CR1_START; //REPEATED START condition to change from sending address + command to receive data
 8004c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8004d9c <twiReceive+0x1e4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a5a      	ldr	r2, [pc, #360]	@ (8004d9c <twiReceive+0x1e4>)
 8004c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c36:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8004c38:	bf00      	nop
 8004c3a:	4b58      	ldr	r3, [pc, #352]	@ (8004d9c <twiReceive+0x1e4>)
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0f9      	beq.n	8004c3a <twiReceive+0x82>
    I2C2->DR=(address<<1|1); //sending address of the device, 1 = reading
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	f043 0201 	orr.w	r2, r3, #1
 8004c4e:	4b53      	ldr	r3, [pc, #332]	@ (8004d9c <twiReceive+0x1e4>)
 8004c50:	611a      	str	r2, [r3, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2));
 8004c52:	bf00      	nop
 8004c54:	4b51      	ldr	r3, [pc, #324]	@ (8004d9c <twiReceive+0x1e4>)
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4b4d      	ldr	r3, [pc, #308]	@ (8004d9c <twiReceive+0x1e4>)
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf0c      	ite	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	2300      	movne	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	4313      	orrs	r3, r2
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1eb      	bne.n	8004c54 <twiReceive+0x9c>

if (length==1)  //receiving single byte, N=1
 8004c7c:	797b      	ldrb	r3, [r7, #5]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d123      	bne.n	8004cca <twiReceive+0x112>
    {
        while(!(I2C2->SR1)|!(I2C2->SR2));
 8004c82:	bf00      	nop
 8004c84:	4b45      	ldr	r3, [pc, #276]	@ (8004d9c <twiReceive+0x1e4>)
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2301      	moveq	r3, #1
 8004c8e:	2300      	movne	r3, #0
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	4b42      	ldr	r3, [pc, #264]	@ (8004d9c <twiReceive+0x1e4>)
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ed      	bne.n	8004c84 <twiReceive+0xcc>
        I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) to signal it is last byte
 8004ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8004d9c <twiReceive+0x1e4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a3b      	ldr	r2, [pc, #236]	@ (8004d9c <twiReceive+0x1e4>)
 8004cae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cb2:	6013      	str	r3, [r2, #0]
        I2C2->CR1 |= I2C_CR1_STOP; //issuing STOP condition before (!) reading byte
 8004cb4:	4b39      	ldr	r3, [pc, #228]	@ (8004d9c <twiReceive+0x1e4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a38      	ldr	r2, [pc, #224]	@ (8004d9c <twiReceive+0x1e4>)
 8004cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004cbe:	6013      	str	r3, [r2, #0]
        buffer[0]=I2C2->DR; //single byte is read AFTER NAK (!) and STOP condition
 8004cc0:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <twiReceive+0x1e4>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	4b36      	ldr	r3, [pc, #216]	@ (8004da0 <twiReceive+0x1e8>)
 8004cc8:	701a      	strb	r2, [r3, #0]
    }
    if (length==2) //receiving two bytes, N=2
 8004cca:	797b      	ldrb	r3, [r7, #5]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d13d      	bne.n	8004d4c <twiReceive+0x194>
    {
        while(!(I2C2->SR1)|!(I2C2->SR2));
 8004cd0:	bf00      	nop
 8004cd2:	4b32      	ldr	r3, [pc, #200]	@ (8004d9c <twiReceive+0x1e4>)
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bf0c      	ite	eq
 8004cda:	2301      	moveq	r3, #1
 8004cdc:	2300      	movne	r3, #0
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d9c <twiReceive+0x1e4>)
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	bf0c      	ite	eq
 8004ce8:	2301      	moveq	r3, #1
 8004cea:	2300      	movne	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1ed      	bne.n	8004cd2 <twiReceive+0x11a>
        I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) before last byte
 8004cf6:	4b29      	ldr	r3, [pc, #164]	@ (8004d9c <twiReceive+0x1e4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a28      	ldr	r2, [pc, #160]	@ (8004d9c <twiReceive+0x1e4>)
 8004cfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d00:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_STOP;
 8004d02:	4b26      	ldr	r3, [pc, #152]	@ (8004d9c <twiReceive+0x1e4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a25      	ldr	r2, [pc, #148]	@ (8004d9c <twiReceive+0x1e4>)
 8004d08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d0c:	6013      	str	r3, [r2, #0]
        buffer[0]=I2C2->DR; //reading N-1 byte, next to last byte is in DR, last one still in shift register
 8004d0e:	4b23      	ldr	r3, [pc, #140]	@ (8004d9c <twiReceive+0x1e4>)
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	4b22      	ldr	r3, [pc, #136]	@ (8004da0 <twiReceive+0x1e8>)
 8004d16:	701a      	strb	r2, [r3, #0]
        while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004d18:	bf00      	nop
 8004d1a:	4b20      	ldr	r3, [pc, #128]	@ (8004d9c <twiReceive+0x1e4>)
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bf0c      	ite	eq
 8004d26:	2301      	moveq	r3, #1
 8004d28:	2300      	movne	r3, #0
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d9c <twiReceive+0x1e4>)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1eb      	bne.n	8004d1a <twiReceive+0x162>
        buffer[1]=I2C2->DR; //read last N byte now available
 8004d42:	4b16      	ldr	r3, [pc, #88]	@ (8004d9c <twiReceive+0x1e4>)
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	b2da      	uxtb	r2, r3
 8004d48:	4b15      	ldr	r3, [pc, #84]	@ (8004da0 <twiReceive+0x1e8>)
 8004d4a:	705a      	strb	r2, [r3, #1]
    }
  if (length>2) //receiving more than two bytes, N>2
 8004d4c:	797b      	ldrb	r3, [r7, #5]
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	f240 80b1 	bls.w	8004eb6 <twiReceive+0x2fe>
    {

      for (uint8_t i=0;i<length;i++)
 8004d54:	2300      	movs	r3, #0
 8004d56:	73fb      	strb	r3, [r7, #15]
 8004d58:	e0a8      	b.n	8004eac <twiReceive+0x2f4>
      {

          if (i<(length-3))      // if it is not N-2, then read all bytes
 8004d5a:	7bfa      	ldrb	r2, [r7, #15]
 8004d5c:	797b      	ldrb	r3, [r7, #5]
 8004d5e:	3b03      	subs	r3, #3
 8004d60:	429a      	cmp	r2, r3
 8004d62:	da1f      	bge.n	8004da4 <twiReceive+0x1ec>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004d64:	bf00      	nop
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <twiReceive+0x1e4>)
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	bf0c      	ite	eq
 8004d72:	2301      	moveq	r3, #1
 8004d74:	2300      	movne	r3, #0
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	4b08      	ldr	r3, [pc, #32]	@ (8004d9c <twiReceive+0x1e4>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	4313      	orrs	r3, r2
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1eb      	bne.n	8004d66 <twiReceive+0x1ae>
                buffer[i]=I2C2->DR;
 8004d8e:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <twiReceive+0x1e4>)
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	b2d1      	uxtb	r1, r2
 8004d96:	4a02      	ldr	r2, [pc, #8]	@ (8004da0 <twiReceive+0x1e8>)
 8004d98:	54d1      	strb	r1, [r2, r3]
 8004d9a:	e084      	b.n	8004ea6 <twiReceive+0x2ee>
 8004d9c:	40005800 	.word	0x40005800
 8004da0:	200001ec 	.word	0x200001ec
            }
          else if (i==length-3) // if it is N-2 then read
 8004da4:	7bfa      	ldrb	r2, [r7, #15]
 8004da6:	797b      	ldrb	r3, [r7, #5]
 8004da8:	3b03      	subs	r3, #3
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d13a      	bne.n	8004e24 <twiReceive+0x26c>
            {
                while(!(I2C2->SR1)|!(I2C2->SR2));
 8004dae:	bf00      	nop
 8004db0:	4b44      	ldr	r3, [pc, #272]	@ (8004ec4 <twiReceive+0x30c>)
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf0c      	ite	eq
 8004db8:	2301      	moveq	r3, #1
 8004dba:	2300      	movne	r3, #0
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	4b41      	ldr	r3, [pc, #260]	@ (8004ec4 <twiReceive+0x30c>)
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	bf0c      	ite	eq
 8004dc6:	2301      	moveq	r3, #1
 8004dc8:	2300      	movne	r3, #0
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1ed      	bne.n	8004db0 <twiReceive+0x1f8>
                buffer[i]=I2C2->DR;
 8004dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec4 <twiReceive+0x30c>)
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	b2d1      	uxtb	r1, r2
 8004ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8004ec8 <twiReceive+0x310>)
 8004dde:	54d1      	strb	r1, [r2, r3]
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004de0:	bf00      	nop
 8004de2:	4b38      	ldr	r3, [pc, #224]	@ (8004ec4 <twiReceive+0x30c>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf0c      	ite	eq
 8004dee:	2301      	moveq	r3, #1
 8004df0:	2300      	movne	r3, #0
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	4b33      	ldr	r3, [pc, #204]	@ (8004ec4 <twiReceive+0x30c>)
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	4313      	orrs	r3, r2
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1eb      	bne.n	8004de2 <twiReceive+0x22a>
                I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) before last byte
 8004e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec4 <twiReceive+0x30c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec4 <twiReceive+0x30c>)
 8004e10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e14:	6013      	str	r3, [r2, #0]
                I2C2->CR1 |= I2C_CR1_STOP;
 8004e16:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec4 <twiReceive+0x30c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec4 <twiReceive+0x30c>)
 8004e1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e040      	b.n	8004ea6 <twiReceive+0x2ee>
            }
        else if (i==length-2) // if it is N-1 then read
 8004e24:	7bfa      	ldrb	r2, [r7, #15]
 8004e26:	797b      	ldrb	r3, [r7, #5]
 8004e28:	3b02      	subs	r3, #2
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d11b      	bne.n	8004e66 <twiReceive+0x2ae>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004e2e:	bf00      	nop
 8004e30:	4b24      	ldr	r3, [pc, #144]	@ (8004ec4 <twiReceive+0x30c>)
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b20      	ldr	r3, [pc, #128]	@ (8004ec4 <twiReceive+0x30c>)
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	bf0c      	ite	eq
 8004e4a:	2301      	moveq	r3, #1
 8004e4c:	2300      	movne	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	4313      	orrs	r3, r2
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1eb      	bne.n	8004e30 <twiReceive+0x278>
                buffer[i]=I2C2->DR;
 8004e58:	4b1a      	ldr	r3, [pc, #104]	@ (8004ec4 <twiReceive+0x30c>)
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	b2d1      	uxtb	r1, r2
 8004e60:	4a19      	ldr	r2, [pc, #100]	@ (8004ec8 <twiReceive+0x310>)
 8004e62:	54d1      	strb	r1, [r2, r3]
 8004e64:	e01f      	b.n	8004ea6 <twiReceive+0x2ee>
            }
            else if (i==length-1) // else it is N byte
 8004e66:	7bfa      	ldrb	r2, [r7, #15]
 8004e68:	797b      	ldrb	r3, [r7, #5]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d11a      	bne.n	8004ea6 <twiReceive+0x2ee>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2)){};
 8004e70:	bf00      	nop
 8004e72:	4b14      	ldr	r3, [pc, #80]	@ (8004ec4 <twiReceive+0x30c>)
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bf0c      	ite	eq
 8004e7e:	2301      	moveq	r3, #1
 8004e80:	2300      	movne	r3, #0
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec4 <twiReceive+0x30c>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2301      	moveq	r3, #1
 8004e8e:	2300      	movne	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	4313      	orrs	r3, r2
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1eb      	bne.n	8004e72 <twiReceive+0x2ba>
            buffer[i]=I2C2->DR;
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <twiReceive+0x30c>)
 8004e9c:	691a      	ldr	r2, [r3, #16]
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	b2d1      	uxtb	r1, r2
 8004ea2:	4a09      	ldr	r2, [pc, #36]	@ (8004ec8 <twiReceive+0x310>)
 8004ea4:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i=0;i<length;i++)
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	73fb      	strb	r3, [r7, #15]
 8004eac:	7bfa      	ldrb	r2, [r7, #15]
 8004eae:	797b      	ldrb	r3, [r7, #5]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	f4ff af52 	bcc.w	8004d5a <twiReceive+0x1a2>
            }
    }
 }
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40005800 	.word	0x40005800
 8004ec8:	200001ec 	.word	0x200001ec

08004ecc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ecc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004f04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ed0:	480d      	ldr	r0, [pc, #52]	@ (8004f08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ed2:	490e      	ldr	r1, [pc, #56]	@ (8004f0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ed4:	4a0e      	ldr	r2, [pc, #56]	@ (8004f10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ed8:	e002      	b.n	8004ee0 <LoopCopyDataInit>

08004eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ede:	3304      	adds	r3, #4

08004ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ee4:	d3f9      	bcc.n	8004eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8004f14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8004f18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004eec:	e001      	b.n	8004ef2 <LoopFillZerobss>

08004eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ef0:	3204      	adds	r2, #4

08004ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ef4:	d3fb      	bcc.n	8004eee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ef6:	f7ff fdfb 	bl	8004af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004efa:	f005 f813 	bl	8009f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004efe:	f7fe f83f 	bl	8002f80 <main>
  bx  lr    
 8004f02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f0c:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8004f10:	0800c678 	.word	0x0800c678
  ldr r2, =_sbss
 8004f14:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8004f18:	20000b88 	.word	0x20000b88

08004f1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f1c:	e7fe      	b.n	8004f1c <ADC_IRQHandler>
	...

08004f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f24:	4b0e      	ldr	r3, [pc, #56]	@ (8004f60 <HAL_Init+0x40>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a0d      	ldr	r2, [pc, #52]	@ (8004f60 <HAL_Init+0x40>)
 8004f2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_Init+0x40>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a0a      	ldr	r2, [pc, #40]	@ (8004f60 <HAL_Init+0x40>)
 8004f36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f3c:	4b08      	ldr	r3, [pc, #32]	@ (8004f60 <HAL_Init+0x40>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a07      	ldr	r2, [pc, #28]	@ (8004f60 <HAL_Init+0x40>)
 8004f42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f48:	2003      	movs	r0, #3
 8004f4a:	f000 f94f 	bl	80051ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f4e:	200f      	movs	r0, #15
 8004f50:	f000 f808 	bl	8004f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f54:	f7ff f94c 	bl	80041f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40023c00 	.word	0x40023c00

08004f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f6c:	4b12      	ldr	r3, [pc, #72]	@ (8004fb8 <HAL_InitTick+0x54>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b12      	ldr	r3, [pc, #72]	@ (8004fbc <HAL_InitTick+0x58>)
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	4619      	mov	r1, r3
 8004f76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f967 	bl	8005256 <HAL_SYSTICK_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e00e      	b.n	8004fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b0f      	cmp	r3, #15
 8004f96:	d80a      	bhi.n	8004fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f98:	2200      	movs	r2, #0
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa0:	f000 f92f 	bl	8005202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fa4:	4a06      	ldr	r2, [pc, #24]	@ (8004fc0 <HAL_InitTick+0x5c>)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e000      	b.n	8004fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000058 	.word	0x20000058
 8004fbc:	20000060 	.word	0x20000060
 8004fc0:	2000005c 	.word	0x2000005c

08004fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fc8:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <HAL_IncTick+0x20>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <HAL_IncTick+0x24>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	4a04      	ldr	r2, [pc, #16]	@ (8004fe8 <HAL_IncTick+0x24>)
 8004fd6:	6013      	str	r3, [r2, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000060 	.word	0x20000060
 8004fe8:	20000a4c 	.word	0x20000a4c

08004fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return uwTick;
 8004ff0:	4b03      	ldr	r3, [pc, #12]	@ (8005000 <HAL_GetTick+0x14>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000a4c 	.word	0x20000a4c

08005004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800500c:	f7ff ffee 	bl	8004fec <HAL_GetTick>
 8005010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501c:	d005      	beq.n	800502a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800501e:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <HAL_Delay+0x44>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	461a      	mov	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800502a:	bf00      	nop
 800502c:	f7ff ffde 	bl	8004fec <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	429a      	cmp	r2, r3
 800503a:	d8f7      	bhi.n	800502c <HAL_Delay+0x28>
  {
  }
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000060 	.word	0x20000060

0800504c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800505c:	4b0c      	ldr	r3, [pc, #48]	@ (8005090 <__NVIC_SetPriorityGrouping+0x44>)
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005068:	4013      	ands	r3, r2
 800506a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800507c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800507e:	4a04      	ldr	r2, [pc, #16]	@ (8005090 <__NVIC_SetPriorityGrouping+0x44>)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	60d3      	str	r3, [r2, #12]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000ed00 	.word	0xe000ed00

08005094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005098:	4b04      	ldr	r3, [pc, #16]	@ (80050ac <__NVIC_GetPriorityGrouping+0x18>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	0a1b      	lsrs	r3, r3, #8
 800509e:	f003 0307 	and.w	r3, r3, #7
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	4603      	mov	r3, r0
 80050b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	db0b      	blt.n	80050da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	f003 021f 	and.w	r2, r3, #31
 80050c8:	4907      	ldr	r1, [pc, #28]	@ (80050e8 <__NVIC_EnableIRQ+0x38>)
 80050ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	2001      	movs	r0, #1
 80050d2:	fa00 f202 	lsl.w	r2, r0, r2
 80050d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	e000e100 	.word	0xe000e100

080050ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	6039      	str	r1, [r7, #0]
 80050f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	db0a      	blt.n	8005116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	b2da      	uxtb	r2, r3
 8005104:	490c      	ldr	r1, [pc, #48]	@ (8005138 <__NVIC_SetPriority+0x4c>)
 8005106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510a:	0112      	lsls	r2, r2, #4
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	440b      	add	r3, r1
 8005110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005114:	e00a      	b.n	800512c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	b2da      	uxtb	r2, r3
 800511a:	4908      	ldr	r1, [pc, #32]	@ (800513c <__NVIC_SetPriority+0x50>)
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	3b04      	subs	r3, #4
 8005124:	0112      	lsls	r2, r2, #4
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	440b      	add	r3, r1
 800512a:	761a      	strb	r2, [r3, #24]
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	e000e100 	.word	0xe000e100
 800513c:	e000ed00 	.word	0xe000ed00

08005140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005140:	b480      	push	{r7}
 8005142:	b089      	sub	sp, #36	@ 0x24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	f1c3 0307 	rsb	r3, r3, #7
 800515a:	2b04      	cmp	r3, #4
 800515c:	bf28      	it	cs
 800515e:	2304      	movcs	r3, #4
 8005160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	3304      	adds	r3, #4
 8005166:	2b06      	cmp	r3, #6
 8005168:	d902      	bls.n	8005170 <NVIC_EncodePriority+0x30>
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	3b03      	subs	r3, #3
 800516e:	e000      	b.n	8005172 <NVIC_EncodePriority+0x32>
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005174:	f04f 32ff 	mov.w	r2, #4294967295
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	43da      	mvns	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	401a      	ands	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005188:	f04f 31ff 	mov.w	r1, #4294967295
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	fa01 f303 	lsl.w	r3, r1, r3
 8005192:	43d9      	mvns	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005198:	4313      	orrs	r3, r2
         );
}
 800519a:	4618      	mov	r0, r3
 800519c:	3724      	adds	r7, #36	@ 0x24
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051b8:	d301      	bcc.n	80051be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051ba:	2301      	movs	r3, #1
 80051bc:	e00f      	b.n	80051de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051be:	4a0a      	ldr	r2, [pc, #40]	@ (80051e8 <SysTick_Config+0x40>)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051c6:	210f      	movs	r1, #15
 80051c8:	f04f 30ff 	mov.w	r0, #4294967295
 80051cc:	f7ff ff8e 	bl	80050ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051d0:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <SysTick_Config+0x40>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051d6:	4b04      	ldr	r3, [pc, #16]	@ (80051e8 <SysTick_Config+0x40>)
 80051d8:	2207      	movs	r2, #7
 80051da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	e000e010 	.word	0xe000e010

080051ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f7ff ff29 	bl	800504c <__NVIC_SetPriorityGrouping>
}
 80051fa:	bf00      	nop
 80051fc:	3708      	adds	r7, #8
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005202:	b580      	push	{r7, lr}
 8005204:	b086      	sub	sp, #24
 8005206:	af00      	add	r7, sp, #0
 8005208:	4603      	mov	r3, r0
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
 800520e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005214:	f7ff ff3e 	bl	8005094 <__NVIC_GetPriorityGrouping>
 8005218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	68b9      	ldr	r1, [r7, #8]
 800521e:	6978      	ldr	r0, [r7, #20]
 8005220:	f7ff ff8e 	bl	8005140 <NVIC_EncodePriority>
 8005224:	4602      	mov	r2, r0
 8005226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800522a:	4611      	mov	r1, r2
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff ff5d 	bl	80050ec <__NVIC_SetPriority>
}
 8005232:	bf00      	nop
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b082      	sub	sp, #8
 800523e:	af00      	add	r7, sp, #0
 8005240:	4603      	mov	r3, r0
 8005242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff ff31 	bl	80050b0 <__NVIC_EnableIRQ>
}
 800524e:	bf00      	nop
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff ffa2 	bl	80051a8 <SysTick_Config>
 8005264:	4603      	mov	r3, r0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800527c:	f7ff feb6 	bl	8004fec <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e099      	b.n	80053c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052ac:	e00f      	b.n	80052ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80052ae:	f7ff fe9d 	bl	8004fec <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b05      	cmp	r3, #5
 80052ba:	d908      	bls.n	80052ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2203      	movs	r2, #3
 80052c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e078      	b.n	80053c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e8      	bne.n	80052ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4b38      	ldr	r3, [pc, #224]	@ (80053c8 <HAL_DMA_Init+0x158>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4313      	orrs	r3, r2
 800531e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	2b04      	cmp	r3, #4
 8005326:	d107      	bne.n	8005338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005330:	4313      	orrs	r3, r2
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0307 	bic.w	r3, r3, #7
 800534e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	2b04      	cmp	r3, #4
 8005360:	d117      	bne.n	8005392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00e      	beq.n	8005392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fb5f 	bl	8005a38 <DMA_CheckFifoParam>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2240      	movs	r2, #64	@ 0x40
 8005384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800538e:	2301      	movs	r3, #1
 8005390:	e016      	b.n	80053c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb16 	bl	80059cc <DMA_CalcBaseAndBitshift>
 80053a0:	4603      	mov	r3, r0
 80053a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a8:	223f      	movs	r2, #63	@ 0x3f
 80053aa:	409a      	lsls	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	f010803f 	.word	0xf010803f

080053cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e050      	b.n	8005480 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d101      	bne.n	80053ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80053ea:	2302      	movs	r3, #2
 80053ec:	e048      	b.n	8005480 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2200      	movs	r2, #0
 8005414:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2200      	movs	r2, #0
 800541c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2200      	movs	r2, #0
 8005424:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2221      	movs	r2, #33	@ 0x21
 800542c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 facc 	bl	80059cc <DMA_CalcBaseAndBitshift>
 8005434:	4603      	mov	r3, r0
 8005436:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005460:	223f      	movs	r2, #63	@ 0x3f
 8005462:	409a      	lsls	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_DMA_Start_IT+0x26>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e040      	b.n	8005530 <HAL_DMA_Start_IT+0xa8>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d12f      	bne.n	8005522 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fa4a 	bl	8005970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e0:	223f      	movs	r2, #63	@ 0x3f
 80054e2:	409a      	lsls	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0216 	orr.w	r2, r2, #22
 80054f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0208 	orr.w	r2, r2, #8
 800550e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e005      	b.n	800552e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800552a:	2302      	movs	r3, #2
 800552c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800552e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005544:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005546:	f7ff fd51 	bl	8004fec <HAL_GetTick>
 800554a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d008      	beq.n	800556a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2280      	movs	r2, #128	@ 0x80
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e052      	b.n	8005610 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0216 	bic.w	r2, r2, #22
 8005578:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005588:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <HAL_DMA_Abort+0x62>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0208 	bic.w	r2, r2, #8
 80055a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0201 	bic.w	r2, r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ba:	e013      	b.n	80055e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055bc:	f7ff fd16 	bl	8004fec <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d90c      	bls.n	80055e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2203      	movs	r2, #3
 80055d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e015      	b.n	8005610 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e4      	bne.n	80055bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f6:	223f      	movs	r2, #63	@ 0x3f
 80055f8:	409a      	lsls	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d004      	beq.n	8005636 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2280      	movs	r2, #128	@ 0x80
 8005630:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e00c      	b.n	8005650 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2205      	movs	r2, #5
 800563a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005668:	4b8e      	ldr	r3, [pc, #568]	@ (80058a4 <HAL_DMA_IRQHandler+0x248>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a8e      	ldr	r2, [pc, #568]	@ (80058a8 <HAL_DMA_IRQHandler+0x24c>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	0a9b      	lsrs	r3, r3, #10
 8005674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005686:	2208      	movs	r2, #8
 8005688:	409a      	lsls	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01a      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d013      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0204 	bic.w	r2, r2, #4
 80056ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b4:	2208      	movs	r2, #8
 80056b6:	409a      	lsls	r2, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	f043 0201 	orr.w	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	2201      	movs	r2, #1
 80056ce:	409a      	lsls	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d012      	beq.n	80056fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ea:	2201      	movs	r2, #1
 80056ec:	409a      	lsls	r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f6:	f043 0202 	orr.w	r2, r3, #2
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005702:	2204      	movs	r2, #4
 8005704:	409a      	lsls	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d012      	beq.n	8005734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005720:	2204      	movs	r2, #4
 8005722:	409a      	lsls	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572c:	f043 0204 	orr.w	r2, r3, #4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005738:	2210      	movs	r2, #16
 800573a:	409a      	lsls	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d043      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d03c      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005756:	2210      	movs	r2, #16
 8005758:	409a      	lsls	r2, r3
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d018      	beq.n	800579e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d024      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
 800578a:	e01f      	b.n	80057cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01b      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
 800579c:	e016      	b.n	80057cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d107      	bne.n	80057bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0208 	bic.w	r2, r2, #8
 80057ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d0:	2220      	movs	r2, #32
 80057d2:	409a      	lsls	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 808f 	beq.w	80058fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8087 	beq.w	80058fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f2:	2220      	movs	r2, #32
 80057f4:	409a      	lsls	r2, r3
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b05      	cmp	r3, #5
 8005804:	d136      	bne.n	8005874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0216 	bic.w	r2, r2, #22
 8005814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d103      	bne.n	8005836 <HAL_DMA_IRQHandler+0x1da>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0208 	bic.w	r2, r2, #8
 8005844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584a:	223f      	movs	r2, #63	@ 0x3f
 800584c:	409a      	lsls	r2, r3
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005866:	2b00      	cmp	r3, #0
 8005868:	d07e      	beq.n	8005968 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
        }
        return;
 8005872:	e079      	b.n	8005968 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01d      	beq.n	80058be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10d      	bne.n	80058ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005894:	2b00      	cmp	r3, #0
 8005896:	d031      	beq.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
 80058a0:	e02c      	b.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
 80058a2:	bf00      	nop
 80058a4:	20000058 	.word	0x20000058
 80058a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d023      	beq.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
 80058bc:	e01e      	b.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10f      	bne.n	80058ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0210 	bic.w	r2, r2, #16
 80058da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005900:	2b00      	cmp	r3, #0
 8005902:	d032      	beq.n	800596a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d022      	beq.n	8005956 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2205      	movs	r2, #5
 8005914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0201 	bic.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	3301      	adds	r3, #1
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	429a      	cmp	r2, r3
 8005932:	d307      	bcc.n	8005944 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f2      	bne.n	8005928 <HAL_DMA_IRQHandler+0x2cc>
 8005942:	e000      	b.n	8005946 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005944:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
 8005966:	e000      	b.n	800596a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005968:	bf00      	nop
    }
  }
}
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800598c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b40      	cmp	r3, #64	@ 0x40
 800599c:	d108      	bne.n	80059b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059ae:	e007      	b.n	80059c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	60da      	str	r2, [r3, #12]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	3b10      	subs	r3, #16
 80059dc:	4a14      	ldr	r2, [pc, #80]	@ (8005a30 <DMA_CalcBaseAndBitshift+0x64>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059e6:	4a13      	ldr	r2, [pc, #76]	@ (8005a34 <DMA_CalcBaseAndBitshift+0x68>)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d909      	bls.n	8005a0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a0c:	e007      	b.n	8005a1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	aaaaaaab 	.word	0xaaaaaaab
 8005a34:	0800c3e4 	.word	0x0800c3e4

08005a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d11f      	bne.n	8005a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d856      	bhi.n	8005b06 <DMA_CheckFifoParam+0xce>
 8005a58:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <DMA_CheckFifoParam+0x28>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a71 	.word	0x08005a71
 8005a64:	08005a83 	.word	0x08005a83
 8005a68:	08005a71 	.word	0x08005a71
 8005a6c:	08005b07 	.word	0x08005b07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d046      	beq.n	8005b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a80:	e043      	b.n	8005b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a8a:	d140      	bne.n	8005b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a90:	e03d      	b.n	8005b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a9a:	d121      	bne.n	8005ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d837      	bhi.n	8005b12 <DMA_CheckFifoParam+0xda>
 8005aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <DMA_CheckFifoParam+0x70>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005abf 	.word	0x08005abf
 8005ab0:	08005ab9 	.word	0x08005ab9
 8005ab4:	08005ad1 	.word	0x08005ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
      break;
 8005abc:	e030      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d025      	beq.n	8005b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ace:	e022      	b.n	8005b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ad8:	d11f      	bne.n	8005b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ade:	e01c      	b.n	8005b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d903      	bls.n	8005aee <DMA_CheckFifoParam+0xb6>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d003      	beq.n	8005af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005aec:	e018      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
      break;
 8005af2:	e015      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
      break;
 8005b04:	e00b      	b.n	8005b1e <DMA_CheckFifoParam+0xe6>
      break;
 8005b06:	bf00      	nop
 8005b08:	e00a      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e008      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e006      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b12:	bf00      	nop
 8005b14:	e004      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b16:	bf00      	nop
 8005b18:	e002      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop

08005b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b089      	sub	sp, #36	@ 0x24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	e16b      	b.n	8005e24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	f040 815a 	bne.w	8005e1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d005      	beq.n	8005b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d130      	bne.n	8005be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bb8:	2201      	movs	r2, #1
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 0201 	and.w	r2, r3, #1
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d017      	beq.n	8005c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4013      	ands	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d123      	bne.n	8005c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	08da      	lsrs	r2, r3, #3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3208      	adds	r2, #8
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	220f      	movs	r2, #15
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	08da      	lsrs	r2, r3, #3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3208      	adds	r2, #8
 8005c6e:	69b9      	ldr	r1, [r7, #24]
 8005c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	2203      	movs	r2, #3
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f003 0203 	and.w	r2, r3, #3
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80b4 	beq.w	8005e1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	4b60      	ldr	r3, [pc, #384]	@ (8005e3c <HAL_GPIO_Init+0x30c>)
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbe:	4a5f      	ldr	r2, [pc, #380]	@ (8005e3c <HAL_GPIO_Init+0x30c>)
 8005cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e3c <HAL_GPIO_Init+0x30c>)
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8005e40 <HAL_GPIO_Init+0x310>)
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	089b      	lsrs	r3, r3, #2
 8005cd8:	3302      	adds	r3, #2
 8005cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	220f      	movs	r2, #15
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a52      	ldr	r2, [pc, #328]	@ (8005e44 <HAL_GPIO_Init+0x314>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02b      	beq.n	8005d56 <HAL_GPIO_Init+0x226>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a51      	ldr	r2, [pc, #324]	@ (8005e48 <HAL_GPIO_Init+0x318>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d025      	beq.n	8005d52 <HAL_GPIO_Init+0x222>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a50      	ldr	r2, [pc, #320]	@ (8005e4c <HAL_GPIO_Init+0x31c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01f      	beq.n	8005d4e <HAL_GPIO_Init+0x21e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a4f      	ldr	r2, [pc, #316]	@ (8005e50 <HAL_GPIO_Init+0x320>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d019      	beq.n	8005d4a <HAL_GPIO_Init+0x21a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a4e      	ldr	r2, [pc, #312]	@ (8005e54 <HAL_GPIO_Init+0x324>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <HAL_GPIO_Init+0x216>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a4d      	ldr	r2, [pc, #308]	@ (8005e58 <HAL_GPIO_Init+0x328>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00d      	beq.n	8005d42 <HAL_GPIO_Init+0x212>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a4c      	ldr	r2, [pc, #304]	@ (8005e5c <HAL_GPIO_Init+0x32c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <HAL_GPIO_Init+0x20e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a4b      	ldr	r2, [pc, #300]	@ (8005e60 <HAL_GPIO_Init+0x330>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_GPIO_Init+0x20a>
 8005d36:	2307      	movs	r3, #7
 8005d38:	e00e      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	e00c      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d3e:	2306      	movs	r3, #6
 8005d40:	e00a      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d42:	2305      	movs	r3, #5
 8005d44:	e008      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d46:	2304      	movs	r3, #4
 8005d48:	e006      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e004      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e002      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d56:	2300      	movs	r3, #0
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	f002 0203 	and.w	r2, r2, #3
 8005d5e:	0092      	lsls	r2, r2, #2
 8005d60:	4093      	lsls	r3, r2
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d68:	4935      	ldr	r1, [pc, #212]	@ (8005e40 <HAL_GPIO_Init+0x310>)
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	089b      	lsrs	r3, r3, #2
 8005d6e:	3302      	adds	r3, #2
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d76:	4b3b      	ldr	r3, [pc, #236]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d9a:	4a32      	ldr	r2, [pc, #200]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005da0:	4b30      	ldr	r3, [pc, #192]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005dc4:	4a27      	ldr	r2, [pc, #156]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005dca:	4b26      	ldr	r3, [pc, #152]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005dee:	4a1d      	ldr	r2, [pc, #116]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005df4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e18:	4a12      	ldr	r2, [pc, #72]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	3301      	adds	r3, #1
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	f67f ae90 	bls.w	8005b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	3724      	adds	r7, #36	@ 0x24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	40013800 	.word	0x40013800
 8005e44:	40020000 	.word	0x40020000
 8005e48:	40020400 	.word	0x40020400
 8005e4c:	40020800 	.word	0x40020800
 8005e50:	40020c00 	.word	0x40020c00
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40021400 	.word	0x40021400
 8005e5c:	40021800 	.word	0x40021800
 8005e60:	40021c00 	.word	0x40021c00
 8005e64:	40013c00 	.word	0x40013c00

08005e68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b087      	sub	sp, #28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e7e:	2300      	movs	r3, #0
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e0cd      	b.n	8006020 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e84:	2201      	movs	r2, #1
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	4013      	ands	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	f040 80bd 	bne.w	800601a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005ea0:	4a65      	ldr	r2, [pc, #404]	@ (8006038 <HAL_GPIO_DeInit+0x1d0>)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	089b      	lsrs	r3, r3, #2
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eac:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	220f      	movs	r2, #15
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800603c <HAL_GPIO_DeInit+0x1d4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d02b      	beq.n	8005f22 <HAL_GPIO_DeInit+0xba>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a5c      	ldr	r2, [pc, #368]	@ (8006040 <HAL_GPIO_DeInit+0x1d8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d025      	beq.n	8005f1e <HAL_GPIO_DeInit+0xb6>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a5b      	ldr	r2, [pc, #364]	@ (8006044 <HAL_GPIO_DeInit+0x1dc>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01f      	beq.n	8005f1a <HAL_GPIO_DeInit+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a5a      	ldr	r2, [pc, #360]	@ (8006048 <HAL_GPIO_DeInit+0x1e0>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d019      	beq.n	8005f16 <HAL_GPIO_DeInit+0xae>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a59      	ldr	r2, [pc, #356]	@ (800604c <HAL_GPIO_DeInit+0x1e4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_GPIO_DeInit+0xaa>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a58      	ldr	r2, [pc, #352]	@ (8006050 <HAL_GPIO_DeInit+0x1e8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00d      	beq.n	8005f0e <HAL_GPIO_DeInit+0xa6>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a57      	ldr	r2, [pc, #348]	@ (8006054 <HAL_GPIO_DeInit+0x1ec>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d007      	beq.n	8005f0a <HAL_GPIO_DeInit+0xa2>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a56      	ldr	r2, [pc, #344]	@ (8006058 <HAL_GPIO_DeInit+0x1f0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d101      	bne.n	8005f06 <HAL_GPIO_DeInit+0x9e>
 8005f02:	2307      	movs	r3, #7
 8005f04:	e00e      	b.n	8005f24 <HAL_GPIO_DeInit+0xbc>
 8005f06:	2308      	movs	r3, #8
 8005f08:	e00c      	b.n	8005f24 <HAL_GPIO_DeInit+0xbc>
 8005f0a:	2306      	movs	r3, #6
 8005f0c:	e00a      	b.n	8005f24 <HAL_GPIO_DeInit+0xbc>
 8005f0e:	2305      	movs	r3, #5
 8005f10:	e008      	b.n	8005f24 <HAL_GPIO_DeInit+0xbc>
 8005f12:	2304      	movs	r3, #4
 8005f14:	e006      	b.n	8005f24 <HAL_GPIO_DeInit+0xbc>
 8005f16:	2303      	movs	r3, #3
 8005f18:	e004      	b.n	8005f24 <HAL_GPIO_DeInit+0xbc>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e002      	b.n	8005f24 <HAL_GPIO_DeInit+0xbc>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e000      	b.n	8005f24 <HAL_GPIO_DeInit+0xbc>
 8005f22:	2300      	movs	r3, #0
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	f002 0203 	and.w	r2, r2, #3
 8005f2a:	0092      	lsls	r2, r2, #2
 8005f2c:	4093      	lsls	r3, r2
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d132      	bne.n	8005f9a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005f34:	4b49      	ldr	r3, [pc, #292]	@ (800605c <HAL_GPIO_DeInit+0x1f4>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	4947      	ldr	r1, [pc, #284]	@ (800605c <HAL_GPIO_DeInit+0x1f4>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005f42:	4b46      	ldr	r3, [pc, #280]	@ (800605c <HAL_GPIO_DeInit+0x1f4>)
 8005f44:	685a      	ldr	r2, [r3, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	4944      	ldr	r1, [pc, #272]	@ (800605c <HAL_GPIO_DeInit+0x1f4>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005f50:	4b42      	ldr	r3, [pc, #264]	@ (800605c <HAL_GPIO_DeInit+0x1f4>)
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	4940      	ldr	r1, [pc, #256]	@ (800605c <HAL_GPIO_DeInit+0x1f4>)
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005f5e:	4b3f      	ldr	r3, [pc, #252]	@ (800605c <HAL_GPIO_DeInit+0x1f4>)
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	43db      	mvns	r3, r3
 8005f66:	493d      	ldr	r1, [pc, #244]	@ (800605c <HAL_GPIO_DeInit+0x1f4>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	220f      	movs	r2, #15
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8006038 <HAL_GPIO_DeInit+0x1d0>)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	089b      	lsrs	r3, r3, #2
 8005f82:	3302      	adds	r3, #2
 8005f84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	43da      	mvns	r2, r3
 8005f8c:	482a      	ldr	r0, [pc, #168]	@ (8006038 <HAL_GPIO_DeInit+0x1d0>)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	089b      	lsrs	r3, r3, #2
 8005f92:	400a      	ands	r2, r1
 8005f94:	3302      	adds	r3, #2
 8005f96:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	2103      	movs	r1, #3
 8005fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	401a      	ands	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	08da      	lsrs	r2, r3, #3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3208      	adds	r2, #8
 8005fb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	220f      	movs	r2, #15
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	08d2      	lsrs	r2, r2, #3
 8005fd0:	4019      	ands	r1, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3208      	adds	r2, #8
 8005fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	2103      	movs	r1, #3
 8005fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe8:	43db      	mvns	r3, r3
 8005fea:	401a      	ands	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	401a      	ands	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	2103      	movs	r1, #3
 800600e:	fa01 f303 	lsl.w	r3, r1, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	401a      	ands	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	3301      	adds	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	f67f af2e 	bls.w	8005e84 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40013800 	.word	0x40013800
 800603c:	40020000 	.word	0x40020000
 8006040:	40020400 	.word	0x40020400
 8006044:	40020800 	.word	0x40020800
 8006048:	40020c00 	.word	0x40020c00
 800604c:	40021000 	.word	0x40021000
 8006050:	40021400 	.word	0x40021400
 8006054:	40021800 	.word	0x40021800
 8006058:	40021c00 	.word	0x40021c00
 800605c:	40013c00 	.word	0x40013c00

08006060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
 800606c:	4613      	mov	r3, r2
 800606e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006070:	787b      	ldrb	r3, [r7, #1]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800607c:	e003      	b.n	8006086 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800607e:	887b      	ldrh	r3, [r7, #2]
 8006080:	041a      	lsls	r2, r3, #16
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	619a      	str	r2, [r3, #24]
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
	...

08006094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800609e:	4b08      	ldr	r3, [pc, #32]	@ (80060c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d006      	beq.n	80060b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060aa:	4a05      	ldr	r2, [pc, #20]	@ (80060c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fb ff60 	bl	8001f78 <HAL_GPIO_EXTI_Callback>
  }
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40013c00 	.word	0x40013c00

080060c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d101      	bne.n	80060d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e12b      	b.n	800632e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d106      	bne.n	80060f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fe f8a8 	bl	8004240 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2224      	movs	r2, #36	@ 0x24
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006116:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006126:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006128:	f001 fbec 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 800612c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4a81      	ldr	r2, [pc, #516]	@ (8006338 <HAL_I2C_Init+0x274>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d807      	bhi.n	8006148 <HAL_I2C_Init+0x84>
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a80      	ldr	r2, [pc, #512]	@ (800633c <HAL_I2C_Init+0x278>)
 800613c:	4293      	cmp	r3, r2
 800613e:	bf94      	ite	ls
 8006140:	2301      	movls	r3, #1
 8006142:	2300      	movhi	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	e006      	b.n	8006156 <HAL_I2C_Init+0x92>
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4a7d      	ldr	r2, [pc, #500]	@ (8006340 <HAL_I2C_Init+0x27c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	bf94      	ite	ls
 8006150:	2301      	movls	r3, #1
 8006152:	2300      	movhi	r3, #0
 8006154:	b2db      	uxtb	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e0e7      	b.n	800632e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a78      	ldr	r2, [pc, #480]	@ (8006344 <HAL_I2C_Init+0x280>)
 8006162:	fba2 2303 	umull	r2, r3, r2, r3
 8006166:	0c9b      	lsrs	r3, r3, #18
 8006168:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	430a      	orrs	r2, r1
 800617c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4a6a      	ldr	r2, [pc, #424]	@ (8006338 <HAL_I2C_Init+0x274>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d802      	bhi.n	8006198 <HAL_I2C_Init+0xd4>
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	3301      	adds	r3, #1
 8006196:	e009      	b.n	80061ac <HAL_I2C_Init+0xe8>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800619e:	fb02 f303 	mul.w	r3, r2, r3
 80061a2:	4a69      	ldr	r2, [pc, #420]	@ (8006348 <HAL_I2C_Init+0x284>)
 80061a4:	fba2 2303 	umull	r2, r3, r2, r3
 80061a8:	099b      	lsrs	r3, r3, #6
 80061aa:	3301      	adds	r3, #1
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	430b      	orrs	r3, r1
 80061b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80061be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	495c      	ldr	r1, [pc, #368]	@ (8006338 <HAL_I2C_Init+0x274>)
 80061c8:	428b      	cmp	r3, r1
 80061ca:	d819      	bhi.n	8006200 <HAL_I2C_Init+0x13c>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	1e59      	subs	r1, r3, #1
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80061da:	1c59      	adds	r1, r3, #1
 80061dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80061e0:	400b      	ands	r3, r1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <HAL_I2C_Init+0x138>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1e59      	subs	r1, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	005b      	lsls	r3, r3, #1
 80061f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80061f4:	3301      	adds	r3, #1
 80061f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061fa:	e051      	b.n	80062a0 <HAL_I2C_Init+0x1dc>
 80061fc:	2304      	movs	r3, #4
 80061fe:	e04f      	b.n	80062a0 <HAL_I2C_Init+0x1dc>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d111      	bne.n	800622c <HAL_I2C_Init+0x168>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	1e58      	subs	r0, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6859      	ldr	r1, [r3, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	440b      	add	r3, r1
 8006216:	fbb0 f3f3 	udiv	r3, r0, r3
 800621a:	3301      	adds	r3, #1
 800621c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006220:	2b00      	cmp	r3, #0
 8006222:	bf0c      	ite	eq
 8006224:	2301      	moveq	r3, #1
 8006226:	2300      	movne	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	e012      	b.n	8006252 <HAL_I2C_Init+0x18e>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	1e58      	subs	r0, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6859      	ldr	r1, [r3, #4]
 8006234:	460b      	mov	r3, r1
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	0099      	lsls	r1, r3, #2
 800623c:	440b      	add	r3, r1
 800623e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006242:	3301      	adds	r3, #1
 8006244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006248:	2b00      	cmp	r3, #0
 800624a:	bf0c      	ite	eq
 800624c:	2301      	moveq	r3, #1
 800624e:	2300      	movne	r3, #0
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <HAL_I2C_Init+0x196>
 8006256:	2301      	movs	r3, #1
 8006258:	e022      	b.n	80062a0 <HAL_I2C_Init+0x1dc>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10e      	bne.n	8006280 <HAL_I2C_Init+0x1bc>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1e58      	subs	r0, r3, #1
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6859      	ldr	r1, [r3, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	440b      	add	r3, r1
 8006270:	fbb0 f3f3 	udiv	r3, r0, r3
 8006274:	3301      	adds	r3, #1
 8006276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800627e:	e00f      	b.n	80062a0 <HAL_I2C_Init+0x1dc>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	1e58      	subs	r0, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6859      	ldr	r1, [r3, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	0099      	lsls	r1, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	fbb0 f3f3 	udiv	r3, r0, r3
 8006296:	3301      	adds	r3, #1
 8006298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800629c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	6809      	ldr	r1, [r1, #0]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69da      	ldr	r2, [r3, #28]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	431a      	orrs	r2, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80062ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6911      	ldr	r1, [r2, #16]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	68d2      	ldr	r2, [r2, #12]
 80062da:	4311      	orrs	r1, r2
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	430b      	orrs	r3, r1
 80062e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	695a      	ldr	r2, [r3, #20]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	000186a0 	.word	0x000186a0
 800633c:	001e847f 	.word	0x001e847f
 8006340:	003d08ff 	.word	0x003d08ff
 8006344:	431bde83 	.word	0x431bde83
 8006348:	10624dd3 	.word	0x10624dd3

0800634c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e021      	b.n	80063a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2224      	movs	r2, #36	@ 0x24
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0201 	bic.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fe f89e 	bl	80044b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3708      	adds	r7, #8
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
	...

080063ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b088      	sub	sp, #32
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	4608      	mov	r0, r1
 80063b6:	4611      	mov	r1, r2
 80063b8:	461a      	mov	r2, r3
 80063ba:	4603      	mov	r3, r0
 80063bc:	817b      	strh	r3, [r7, #10]
 80063be:	460b      	mov	r3, r1
 80063c0:	813b      	strh	r3, [r7, #8]
 80063c2:	4613      	mov	r3, r2
 80063c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063c6:	f7fe fe11 	bl	8004fec <HAL_GetTick>
 80063ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	f040 80d9 	bne.w	800658c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	9300      	str	r3, [sp, #0]
 80063de:	2319      	movs	r3, #25
 80063e0:	2201      	movs	r2, #1
 80063e2:	496d      	ldr	r1, [pc, #436]	@ (8006598 <HAL_I2C_Mem_Write+0x1ec>)
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fc7f 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063f0:	2302      	movs	r3, #2
 80063f2:	e0cc      	b.n	800658e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_I2C_Mem_Write+0x56>
 80063fe:	2302      	movs	r3, #2
 8006400:	e0c5      	b.n	800658e <HAL_I2C_Mem_Write+0x1e2>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b01      	cmp	r3, #1
 8006416:	d007      	beq.n	8006428 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006436:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2221      	movs	r2, #33	@ 0x21
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2240      	movs	r2, #64	@ 0x40
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a3a      	ldr	r2, [r7, #32]
 8006452:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006458:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4a4d      	ldr	r2, [pc, #308]	@ (800659c <HAL_I2C_Mem_Write+0x1f0>)
 8006468:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800646a:	88f8      	ldrh	r0, [r7, #6]
 800646c:	893a      	ldrh	r2, [r7, #8]
 800646e:	8979      	ldrh	r1, [r7, #10]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	4603      	mov	r3, r0
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 fab6 	bl	80069ec <I2C_RequestMemoryWrite>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d052      	beq.n	800652c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e081      	b.n	800658e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fd00 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00d      	beq.n	80064b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d107      	bne.n	80064b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e06b      	b.n	800658e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ba:	781a      	ldrb	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c6:	1c5a      	adds	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d11b      	bne.n	800652c <HAL_I2C_Mem_Write+0x180>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	781a      	ldrb	r2, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1aa      	bne.n	800648a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fcec 	bl	8006f16 <I2C_WaitOnBTFFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00d      	beq.n	8006560 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006548:	2b04      	cmp	r3, #4
 800654a:	d107      	bne.n	800655c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800655a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e016      	b.n	800658e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800656e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2220      	movs	r2, #32
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800658c:	2302      	movs	r3, #2
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	00100002 	.word	0x00100002
 800659c:	ffff0000 	.word	0xffff0000

080065a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	@ 0x30
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	4608      	mov	r0, r1
 80065aa:	4611      	mov	r1, r2
 80065ac:	461a      	mov	r2, r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	817b      	strh	r3, [r7, #10]
 80065b2:	460b      	mov	r3, r1
 80065b4:	813b      	strh	r3, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80065ba:	f7fe fd17 	bl	8004fec <HAL_GetTick>
 80065be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	f040 8208 	bne.w	80069de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	2319      	movs	r3, #25
 80065d4:	2201      	movs	r2, #1
 80065d6:	497b      	ldr	r1, [pc, #492]	@ (80067c4 <HAL_I2C_Mem_Read+0x224>)
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 fb85 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80065e4:	2302      	movs	r3, #2
 80065e6:	e1fb      	b.n	80069e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_I2C_Mem_Read+0x56>
 80065f2:	2302      	movs	r3, #2
 80065f4:	e1f4      	b.n	80069e0 <HAL_I2C_Mem_Read+0x440>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0301 	and.w	r3, r3, #1
 8006608:	2b01      	cmp	r3, #1
 800660a:	d007      	beq.n	800661c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800662a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2222      	movs	r2, #34	@ 0x22
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2240      	movs	r2, #64	@ 0x40
 8006638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006646:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800664c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	4a5b      	ldr	r2, [pc, #364]	@ (80067c8 <HAL_I2C_Mem_Read+0x228>)
 800665c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800665e:	88f8      	ldrh	r0, [r7, #6]
 8006660:	893a      	ldrh	r2, [r7, #8]
 8006662:	8979      	ldrh	r1, [r7, #10]
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	9301      	str	r3, [sp, #4]
 8006668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	4603      	mov	r3, r0
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 fa52 	bl	8006b18 <I2C_RequestMemoryRead>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e1b0      	b.n	80069e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006682:	2b00      	cmp	r3, #0
 8006684:	d113      	bne.n	80066ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006686:	2300      	movs	r3, #0
 8006688:	623b      	str	r3, [r7, #32]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	623b      	str	r3, [r7, #32]
 800669a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	e184      	b.n	80069b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d11b      	bne.n	80066ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c6:	2300      	movs	r3, #0
 80066c8:	61fb      	str	r3, [r7, #28]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	61fb      	str	r3, [r7, #28]
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	61fb      	str	r3, [r7, #28]
 80066da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	e164      	b.n	80069b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d11b      	bne.n	800672e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006704:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006714:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006716:	2300      	movs	r3, #0
 8006718:	61bb      	str	r3, [r7, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	61bb      	str	r3, [r7, #24]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	61bb      	str	r3, [r7, #24]
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	e144      	b.n	80069b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006744:	e138      	b.n	80069b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674a:	2b03      	cmp	r3, #3
 800674c:	f200 80f1 	bhi.w	8006932 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006754:	2b01      	cmp	r3, #1
 8006756:	d123      	bne.n	80067a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800675a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fc1b 	bl	8006f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e139      	b.n	80069e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006776:	b2d2      	uxtb	r2, r2
 8006778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800679e:	e10b      	b.n	80069b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d14e      	bne.n	8006846 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80067a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ae:	2200      	movs	r2, #0
 80067b0:	4906      	ldr	r1, [pc, #24]	@ (80067cc <HAL_I2C_Mem_Read+0x22c>)
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 fa98 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d008      	beq.n	80067d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e10e      	b.n	80069e0 <HAL_I2C_Mem_Read+0x440>
 80067c2:	bf00      	nop
 80067c4:	00100002 	.word	0x00100002
 80067c8:	ffff0000 	.word	0xffff0000
 80067cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691a      	ldr	r2, [r3, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067fc:	3b01      	subs	r3, #1
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006808:	b29b      	uxth	r3, r3
 800680a:	3b01      	subs	r3, #1
 800680c:	b29a      	uxth	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	691a      	ldr	r2, [r3, #16]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800682e:	3b01      	subs	r3, #1
 8006830:	b29a      	uxth	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006844:	e0b8      	b.n	80069b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	9300      	str	r3, [sp, #0]
 800684a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684c:	2200      	movs	r2, #0
 800684e:	4966      	ldr	r1, [pc, #408]	@ (80069e8 <HAL_I2C_Mem_Read+0x448>)
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fa49 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0bf      	b.n	80069e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800686e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	691a      	ldr	r2, [r3, #16]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a8:	2200      	movs	r2, #0
 80068aa:	494f      	ldr	r1, [pc, #316]	@ (80069e8 <HAL_I2C_Mem_Read+0x448>)
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fa1b 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e091      	b.n	80069e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691a      	ldr	r2, [r3, #16]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800691a:	3b01      	subs	r3, #1
 800691c:	b29a      	uxth	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006930:	e042      	b.n	80069b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006934:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 fb2e 	bl	8006f98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e04c      	b.n	80069e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	1c5a      	adds	r2, r3, #1
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006962:	3b01      	subs	r3, #1
 8006964:	b29a      	uxth	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b04      	cmp	r3, #4
 8006984:	d118      	bne.n	80069b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a2:	3b01      	subs	r3, #1
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f47f aec2 	bne.w	8006746 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	e000      	b.n	80069e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80069de:	2302      	movs	r3, #2
  }
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3728      	adds	r7, #40	@ 0x28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	00010004 	.word	0x00010004

080069ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af02      	add	r7, sp, #8
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	4608      	mov	r0, r1
 80069f6:	4611      	mov	r1, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	817b      	strh	r3, [r7, #10]
 80069fe:	460b      	mov	r3, r1
 8006a00:	813b      	strh	r3, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f960 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00d      	beq.n	8006a4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a3c:	d103      	bne.n	8006a46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e05f      	b.n	8006b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a4a:	897b      	ldrh	r3, [r7, #10]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	6a3a      	ldr	r2, [r7, #32]
 8006a5e:	492d      	ldr	r1, [pc, #180]	@ (8006b14 <I2C_RequestMemoryWrite+0x128>)
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f998 	bl	8006d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e04c      	b.n	8006b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a70:	2300      	movs	r3, #0
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	617b      	str	r3, [r7, #20]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a88:	6a39      	ldr	r1, [r7, #32]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fa02 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00d      	beq.n	8006ab2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	2b04      	cmp	r3, #4
 8006a9c:	d107      	bne.n	8006aae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e02b      	b.n	8006b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d105      	bne.n	8006ac4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	611a      	str	r2, [r3, #16]
 8006ac2:	e021      	b.n	8006b08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006ac4:	893b      	ldrh	r3, [r7, #8]
 8006ac6:	0a1b      	lsrs	r3, r3, #8
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ad4:	6a39      	ldr	r1, [r7, #32]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f9dc 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae6:	2b04      	cmp	r3, #4
 8006ae8:	d107      	bne.n	8006afa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e005      	b.n	8006b0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006afe:	893b      	ldrh	r3, [r7, #8]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	00010002 	.word	0x00010002

08006b18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b088      	sub	sp, #32
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	4608      	mov	r0, r1
 8006b22:	4611      	mov	r1, r2
 8006b24:	461a      	mov	r2, r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	817b      	strh	r3, [r7, #10]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	813b      	strh	r3, [r7, #8]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006b40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	6a3b      	ldr	r3, [r7, #32]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f8c2 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00d      	beq.n	8006b86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b78:	d103      	bne.n	8006b82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e0aa      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	6a3a      	ldr	r2, [r7, #32]
 8006b9a:	4952      	ldr	r1, [pc, #328]	@ (8006ce4 <I2C_RequestMemoryRead+0x1cc>)
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f8fa 	bl	8006d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d001      	beq.n	8006bac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e097      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bac:	2300      	movs	r3, #0
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc4:	6a39      	ldr	r1, [r7, #32]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f964 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00d      	beq.n	8006bee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd6:	2b04      	cmp	r3, #4
 8006bd8:	d107      	bne.n	8006bea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006be8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e076      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d105      	bne.n	8006c00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bf4:	893b      	ldrh	r3, [r7, #8]
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	611a      	str	r2, [r3, #16]
 8006bfe:	e021      	b.n	8006c44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c00:	893b      	ldrh	r3, [r7, #8]
 8006c02:	0a1b      	lsrs	r3, r3, #8
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c10:	6a39      	ldr	r1, [r7, #32]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f93e 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00d      	beq.n	8006c3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d107      	bne.n	8006c36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e050      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c3a:	893b      	ldrh	r3, [r7, #8]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c46:	6a39      	ldr	r1, [r7, #32]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f923 	bl	8006e94 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00d      	beq.n	8006c70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d107      	bne.n	8006c6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e035      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f82b 	bl	8006ce8 <I2C_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00d      	beq.n	8006cb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ca6:	d103      	bne.n	8006cb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006cae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e013      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006cb4:	897b      	ldrh	r3, [r7, #10]
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	f043 0301 	orr.w	r3, r3, #1
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	6a3a      	ldr	r2, [r7, #32]
 8006cc8:	4906      	ldr	r1, [pc, #24]	@ (8006ce4 <I2C_RequestMemoryRead+0x1cc>)
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f863 	bl	8006d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	00010002 	.word	0x00010002

08006ce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	603b      	str	r3, [r7, #0]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cf8:	e025      	b.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d00:	d021      	beq.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d02:	f7fe f973 	bl	8004fec <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d302      	bcc.n	8006d18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d116      	bne.n	8006d46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	f043 0220 	orr.w	r2, r3, #32
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e023      	b.n	8006d8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	0c1b      	lsrs	r3, r3, #16
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d10d      	bne.n	8006d6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	695b      	ldr	r3, [r3, #20]
 8006d56:	43da      	mvns	r2, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bf0c      	ite	eq
 8006d62:	2301      	moveq	r3, #1
 8006d64:	2300      	movne	r3, #0
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	461a      	mov	r2, r3
 8006d6a:	e00c      	b.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	43da      	mvns	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	4013      	ands	r3, r2
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf0c      	ite	eq
 8006d7e:	2301      	moveq	r3, #1
 8006d80:	2300      	movne	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d0b6      	beq.n	8006cfa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
 8006da2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006da4:	e051      	b.n	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db4:	d123      	bne.n	8006dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006dc4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006dce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dea:	f043 0204 	orr.w	r2, r3, #4
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e046      	b.n	8006e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e04:	d021      	beq.n	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e06:	f7fe f8f1 	bl	8004fec <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d302      	bcc.n	8006e1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d116      	bne.n	8006e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2220      	movs	r2, #32
 8006e26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e36:	f043 0220 	orr.w	r2, r3, #32
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e020      	b.n	8006e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d10c      	bne.n	8006e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	43da      	mvns	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bf14      	ite	ne
 8006e66:	2301      	movne	r3, #1
 8006e68:	2300      	moveq	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	e00b      	b.n	8006e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	699b      	ldr	r3, [r3, #24]
 8006e74:	43da      	mvns	r2, r3
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf14      	ite	ne
 8006e80:	2301      	movne	r3, #1
 8006e82:	2300      	moveq	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d18d      	bne.n	8006da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ea0:	e02d      	b.n	8006efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f8ce 	bl	8007044 <I2C_IsAcknowledgeFailed>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e02d      	b.n	8006f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb8:	d021      	beq.n	8006efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eba:	f7fe f897 	bl	8004fec <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d302      	bcc.n	8006ed0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d116      	bne.n	8006efe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eea:	f043 0220 	orr.w	r2, r3, #32
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e007      	b.n	8006f0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f08:	2b80      	cmp	r3, #128	@ 0x80
 8006f0a:	d1ca      	bne.n	8006ea2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f22:	e02d      	b.n	8006f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 f88d 	bl	8007044 <I2C_IsAcknowledgeFailed>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e02d      	b.n	8006f90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d021      	beq.n	8006f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3c:	f7fe f856 	bl	8004fec <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d302      	bcc.n	8006f52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d116      	bne.n	8006f80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6c:	f043 0220 	orr.w	r2, r3, #32
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e007      	b.n	8006f90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f003 0304 	and.w	r3, r3, #4
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d1ca      	bne.n	8006f24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fa4:	e042      	b.n	800702c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f003 0310 	and.w	r3, r3, #16
 8006fb0:	2b10      	cmp	r3, #16
 8006fb2:	d119      	bne.n	8006fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f06f 0210 	mvn.w	r2, #16
 8006fbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e029      	b.n	800703c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fe8:	f7fe f800 	bl	8004fec <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d302      	bcc.n	8006ffe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d116      	bne.n	800702c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007018:	f043 0220 	orr.w	r2, r3, #32
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e007      	b.n	800703c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007036:	2b40      	cmp	r3, #64	@ 0x40
 8007038:	d1b5      	bne.n	8006fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007056:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800705a:	d11b      	bne.n	8007094 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007064:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007080:	f043 0204 	orr.w	r2, r3, #4
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
	...

080070a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e267      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d075      	beq.n	80071ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070c2:	4b88      	ldr	r3, [pc, #544]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 030c 	and.w	r3, r3, #12
 80070ca:	2b04      	cmp	r3, #4
 80070cc:	d00c      	beq.n	80070e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070ce:	4b85      	ldr	r3, [pc, #532]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070d6:	2b08      	cmp	r3, #8
 80070d8:	d112      	bne.n	8007100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070da:	4b82      	ldr	r3, [pc, #520]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070e6:	d10b      	bne.n	8007100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e8:	4b7e      	ldr	r3, [pc, #504]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d05b      	beq.n	80071ac <HAL_RCC_OscConfig+0x108>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d157      	bne.n	80071ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e242      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007108:	d106      	bne.n	8007118 <HAL_RCC_OscConfig+0x74>
 800710a:	4b76      	ldr	r3, [pc, #472]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a75      	ldr	r2, [pc, #468]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	e01d      	b.n	8007154 <HAL_RCC_OscConfig+0xb0>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007120:	d10c      	bne.n	800713c <HAL_RCC_OscConfig+0x98>
 8007122:	4b70      	ldr	r3, [pc, #448]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a6f      	ldr	r2, [pc, #444]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	4b6d      	ldr	r3, [pc, #436]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a6c      	ldr	r2, [pc, #432]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007138:	6013      	str	r3, [r2, #0]
 800713a:	e00b      	b.n	8007154 <HAL_RCC_OscConfig+0xb0>
 800713c:	4b69      	ldr	r3, [pc, #420]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a68      	ldr	r2, [pc, #416]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	4b66      	ldr	r3, [pc, #408]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a65      	ldr	r2, [pc, #404]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 800714e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d013      	beq.n	8007184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800715c:	f7fd ff46 	bl	8004fec <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007164:	f7fd ff42 	bl	8004fec <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b64      	cmp	r3, #100	@ 0x64
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e207      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007176:	4b5b      	ldr	r3, [pc, #364]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d0f0      	beq.n	8007164 <HAL_RCC_OscConfig+0xc0>
 8007182:	e014      	b.n	80071ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007184:	f7fd ff32 	bl	8004fec <HAL_GetTick>
 8007188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800718a:	e008      	b.n	800719e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800718c:	f7fd ff2e 	bl	8004fec <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	2b64      	cmp	r3, #100	@ 0x64
 8007198:	d901      	bls.n	800719e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e1f3      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800719e:	4b51      	ldr	r3, [pc, #324]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1f0      	bne.n	800718c <HAL_RCC_OscConfig+0xe8>
 80071aa:	e000      	b.n	80071ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d063      	beq.n	8007282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ba:	4b4a      	ldr	r3, [pc, #296]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f003 030c 	and.w	r3, r3, #12
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071c6:	4b47      	ldr	r3, [pc, #284]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071ce:	2b08      	cmp	r3, #8
 80071d0:	d11c      	bne.n	800720c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071d2:	4b44      	ldr	r3, [pc, #272]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d116      	bne.n	800720c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071de:	4b41      	ldr	r3, [pc, #260]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_RCC_OscConfig+0x152>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d001      	beq.n	80071f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e1c7      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f6:	4b3b      	ldr	r3, [pc, #236]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4937      	ldr	r1, [pc, #220]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800720a:	e03a      	b.n	8007282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d020      	beq.n	8007256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007214:	4b34      	ldr	r3, [pc, #208]	@ (80072e8 <HAL_RCC_OscConfig+0x244>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721a:	f7fd fee7 	bl	8004fec <HAL_GetTick>
 800721e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007222:	f7fd fee3 	bl	8004fec <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e1a8      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007234:	4b2b      	ldr	r3, [pc, #172]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d0f0      	beq.n	8007222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007240:	4b28      	ldr	r3, [pc, #160]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	4925      	ldr	r1, [pc, #148]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]
 8007254:	e015      	b.n	8007282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007256:	4b24      	ldr	r3, [pc, #144]	@ (80072e8 <HAL_RCC_OscConfig+0x244>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725c:	f7fd fec6 	bl	8004fec <HAL_GetTick>
 8007260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007262:	e008      	b.n	8007276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007264:	f7fd fec2 	bl	8004fec <HAL_GetTick>
 8007268:	4602      	mov	r2, r0
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	1ad3      	subs	r3, r2, r3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e187      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007276:	4b1b      	ldr	r3, [pc, #108]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0302 	and.w	r3, r3, #2
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f0      	bne.n	8007264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d036      	beq.n	80072fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007296:	4b15      	ldr	r3, [pc, #84]	@ (80072ec <HAL_RCC_OscConfig+0x248>)
 8007298:	2201      	movs	r2, #1
 800729a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800729c:	f7fd fea6 	bl	8004fec <HAL_GetTick>
 80072a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072a2:	e008      	b.n	80072b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072a4:	f7fd fea2 	bl	8004fec <HAL_GetTick>
 80072a8:	4602      	mov	r2, r0
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d901      	bls.n	80072b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072b2:	2303      	movs	r3, #3
 80072b4:	e167      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072b6:	4b0b      	ldr	r3, [pc, #44]	@ (80072e4 <HAL_RCC_OscConfig+0x240>)
 80072b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ba:	f003 0302 	and.w	r3, r3, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0f0      	beq.n	80072a4 <HAL_RCC_OscConfig+0x200>
 80072c2:	e01b      	b.n	80072fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072c4:	4b09      	ldr	r3, [pc, #36]	@ (80072ec <HAL_RCC_OscConfig+0x248>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ca:	f7fd fe8f 	bl	8004fec <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d0:	e00e      	b.n	80072f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072d2:	f7fd fe8b 	bl	8004fec <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d907      	bls.n	80072f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e150      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
 80072e4:	40023800 	.word	0x40023800
 80072e8:	42470000 	.word	0x42470000
 80072ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f0:	4b88      	ldr	r3, [pc, #544]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80072f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1ea      	bne.n	80072d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8097 	beq.w	8007438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800730a:	2300      	movs	r3, #0
 800730c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800730e:	4b81      	ldr	r3, [pc, #516]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10f      	bne.n	800733a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800731a:	2300      	movs	r3, #0
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	4b7d      	ldr	r3, [pc, #500]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	4a7c      	ldr	r2, [pc, #496]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 8007324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007328:	6413      	str	r3, [r2, #64]	@ 0x40
 800732a:	4b7a      	ldr	r3, [pc, #488]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 800732c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007332:	60bb      	str	r3, [r7, #8]
 8007334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007336:	2301      	movs	r3, #1
 8007338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800733a:	4b77      	ldr	r3, [pc, #476]	@ (8007518 <HAL_RCC_OscConfig+0x474>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d118      	bne.n	8007378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007346:	4b74      	ldr	r3, [pc, #464]	@ (8007518 <HAL_RCC_OscConfig+0x474>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a73      	ldr	r2, [pc, #460]	@ (8007518 <HAL_RCC_OscConfig+0x474>)
 800734c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007352:	f7fd fe4b 	bl	8004fec <HAL_GetTick>
 8007356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007358:	e008      	b.n	800736c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800735a:	f7fd fe47 	bl	8004fec <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b02      	cmp	r3, #2
 8007366:	d901      	bls.n	800736c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007368:	2303      	movs	r3, #3
 800736a:	e10c      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800736c:	4b6a      	ldr	r3, [pc, #424]	@ (8007518 <HAL_RCC_OscConfig+0x474>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007374:	2b00      	cmp	r3, #0
 8007376:	d0f0      	beq.n	800735a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d106      	bne.n	800738e <HAL_RCC_OscConfig+0x2ea>
 8007380:	4b64      	ldr	r3, [pc, #400]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 8007382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007384:	4a63      	ldr	r2, [pc, #396]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	6713      	str	r3, [r2, #112]	@ 0x70
 800738c:	e01c      	b.n	80073c8 <HAL_RCC_OscConfig+0x324>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b05      	cmp	r3, #5
 8007394:	d10c      	bne.n	80073b0 <HAL_RCC_OscConfig+0x30c>
 8007396:	4b5f      	ldr	r3, [pc, #380]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 8007398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800739a:	4a5e      	ldr	r2, [pc, #376]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 800739c:	f043 0304 	orr.w	r3, r3, #4
 80073a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073a2:	4b5c      	ldr	r3, [pc, #368]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80073a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a6:	4a5b      	ldr	r2, [pc, #364]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80073a8:	f043 0301 	orr.w	r3, r3, #1
 80073ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80073ae:	e00b      	b.n	80073c8 <HAL_RCC_OscConfig+0x324>
 80073b0:	4b58      	ldr	r3, [pc, #352]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80073b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b4:	4a57      	ldr	r2, [pc, #348]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80073b6:	f023 0301 	bic.w	r3, r3, #1
 80073ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80073bc:	4b55      	ldr	r3, [pc, #340]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80073be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c0:	4a54      	ldr	r2, [pc, #336]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80073c2:	f023 0304 	bic.w	r3, r3, #4
 80073c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d015      	beq.n	80073fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d0:	f7fd fe0c 	bl	8004fec <HAL_GetTick>
 80073d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073d6:	e00a      	b.n	80073ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d8:	f7fd fe08 	bl	8004fec <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d901      	bls.n	80073ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e0cb      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073ee:	4b49      	ldr	r3, [pc, #292]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80073f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f2:	f003 0302 	and.w	r3, r3, #2
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d0ee      	beq.n	80073d8 <HAL_RCC_OscConfig+0x334>
 80073fa:	e014      	b.n	8007426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073fc:	f7fd fdf6 	bl	8004fec <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007402:	e00a      	b.n	800741a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007404:	f7fd fdf2 	bl	8004fec <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e0b5      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800741a:	4b3e      	ldr	r3, [pc, #248]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1ee      	bne.n	8007404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d105      	bne.n	8007438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800742c:	4b39      	ldr	r3, [pc, #228]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	4a38      	ldr	r2, [pc, #224]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 8007432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 80a1 	beq.w	8007584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007442:	4b34      	ldr	r3, [pc, #208]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 030c 	and.w	r3, r3, #12
 800744a:	2b08      	cmp	r3, #8
 800744c:	d05c      	beq.n	8007508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	2b02      	cmp	r3, #2
 8007454:	d141      	bne.n	80074da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007456:	4b31      	ldr	r3, [pc, #196]	@ (800751c <HAL_RCC_OscConfig+0x478>)
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800745c:	f7fd fdc6 	bl	8004fec <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007462:	e008      	b.n	8007476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007464:	f7fd fdc2 	bl	8004fec <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e087      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007476:	4b27      	ldr	r3, [pc, #156]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1f0      	bne.n	8007464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69da      	ldr	r2, [r3, #28]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007490:	019b      	lsls	r3, r3, #6
 8007492:	431a      	orrs	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	085b      	lsrs	r3, r3, #1
 800749a:	3b01      	subs	r3, #1
 800749c:	041b      	lsls	r3, r3, #16
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a4:	061b      	lsls	r3, r3, #24
 80074a6:	491b      	ldr	r1, [pc, #108]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074ac:	4b1b      	ldr	r3, [pc, #108]	@ (800751c <HAL_RCC_OscConfig+0x478>)
 80074ae:	2201      	movs	r2, #1
 80074b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b2:	f7fd fd9b 	bl	8004fec <HAL_GetTick>
 80074b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074b8:	e008      	b.n	80074cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ba:	f7fd fd97 	bl	8004fec <HAL_GetTick>
 80074be:	4602      	mov	r2, r0
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	1ad3      	subs	r3, r2, r3
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d901      	bls.n	80074cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e05c      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074cc:	4b11      	ldr	r3, [pc, #68]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d0f0      	beq.n	80074ba <HAL_RCC_OscConfig+0x416>
 80074d8:	e054      	b.n	8007584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074da:	4b10      	ldr	r3, [pc, #64]	@ (800751c <HAL_RCC_OscConfig+0x478>)
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e0:	f7fd fd84 	bl	8004fec <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074e8:	f7fd fd80 	bl	8004fec <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e045      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074fa:	4b06      	ldr	r3, [pc, #24]	@ (8007514 <HAL_RCC_OscConfig+0x470>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f0      	bne.n	80074e8 <HAL_RCC_OscConfig+0x444>
 8007506:	e03d      	b.n	8007584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	699b      	ldr	r3, [r3, #24]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d107      	bne.n	8007520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e038      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
 8007514:	40023800 	.word	0x40023800
 8007518:	40007000 	.word	0x40007000
 800751c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007520:	4b1b      	ldr	r3, [pc, #108]	@ (8007590 <HAL_RCC_OscConfig+0x4ec>)
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d028      	beq.n	8007580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007538:	429a      	cmp	r2, r3
 800753a:	d121      	bne.n	8007580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007546:	429a      	cmp	r2, r3
 8007548:	d11a      	bne.n	8007580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007550:	4013      	ands	r3, r2
 8007552:	687a      	ldr	r2, [r7, #4]
 8007554:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007558:	4293      	cmp	r3, r2
 800755a:	d111      	bne.n	8007580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007566:	085b      	lsrs	r3, r3, #1
 8007568:	3b01      	subs	r3, #1
 800756a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800756c:	429a      	cmp	r2, r3
 800756e:	d107      	bne.n	8007580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800757a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800757c:	429a      	cmp	r2, r3
 800757e:	d001      	beq.n	8007584 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	40023800 	.word	0x40023800

08007594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d101      	bne.n	80075a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e0cc      	b.n	8007742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075a8:	4b68      	ldr	r3, [pc, #416]	@ (800774c <HAL_RCC_ClockConfig+0x1b8>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d90c      	bls.n	80075d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075b6:	4b65      	ldr	r3, [pc, #404]	@ (800774c <HAL_RCC_ClockConfig+0x1b8>)
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	b2d2      	uxtb	r2, r2
 80075bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075be:	4b63      	ldr	r3, [pc, #396]	@ (800774c <HAL_RCC_ClockConfig+0x1b8>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0307 	and.w	r3, r3, #7
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d001      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e0b8      	b.n	8007742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d020      	beq.n	800761e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 0304 	and.w	r3, r3, #4
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075e8:	4b59      	ldr	r3, [pc, #356]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	4a58      	ldr	r2, [pc, #352]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 80075ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80075f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d005      	beq.n	800760c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007600:	4b53      	ldr	r3, [pc, #332]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	4a52      	ldr	r2, [pc, #328]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800760a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800760c:	4b50      	ldr	r3, [pc, #320]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	494d      	ldr	r1, [pc, #308]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 800761a:	4313      	orrs	r3, r2
 800761c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b00      	cmp	r3, #0
 8007628:	d044      	beq.n	80076b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d107      	bne.n	8007642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007632:	4b47      	ldr	r3, [pc, #284]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d119      	bne.n	8007672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e07f      	b.n	8007742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b02      	cmp	r3, #2
 8007648:	d003      	beq.n	8007652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800764e:	2b03      	cmp	r3, #3
 8007650:	d107      	bne.n	8007662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007652:	4b3f      	ldr	r3, [pc, #252]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d109      	bne.n	8007672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e06f      	b.n	8007742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007662:	4b3b      	ldr	r3, [pc, #236]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e067      	b.n	8007742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007672:	4b37      	ldr	r3, [pc, #220]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f023 0203 	bic.w	r2, r3, #3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	4934      	ldr	r1, [pc, #208]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007680:	4313      	orrs	r3, r2
 8007682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007684:	f7fd fcb2 	bl	8004fec <HAL_GetTick>
 8007688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768a:	e00a      	b.n	80076a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800768c:	f7fd fcae 	bl	8004fec <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800769a:	4293      	cmp	r3, r2
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e04f      	b.n	8007742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a2:	4b2b      	ldr	r3, [pc, #172]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f003 020c 	and.w	r2, r3, #12
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d1eb      	bne.n	800768c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076b4:	4b25      	ldr	r3, [pc, #148]	@ (800774c <HAL_RCC_ClockConfig+0x1b8>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d20c      	bcs.n	80076dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c2:	4b22      	ldr	r3, [pc, #136]	@ (800774c <HAL_RCC_ClockConfig+0x1b8>)
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ca:	4b20      	ldr	r3, [pc, #128]	@ (800774c <HAL_RCC_ClockConfig+0x1b8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d001      	beq.n	80076dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e032      	b.n	8007742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0304 	and.w	r3, r3, #4
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d008      	beq.n	80076fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076e8:	4b19      	ldr	r3, [pc, #100]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	4916      	ldr	r1, [pc, #88]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0308 	and.w	r3, r3, #8
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007706:	4b12      	ldr	r3, [pc, #72]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	490e      	ldr	r1, [pc, #56]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007716:	4313      	orrs	r3, r2
 8007718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800771a:	f000 f821 	bl	8007760 <HAL_RCC_GetSysClockFreq>
 800771e:	4602      	mov	r2, r0
 8007720:	4b0b      	ldr	r3, [pc, #44]	@ (8007750 <HAL_RCC_ClockConfig+0x1bc>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	490a      	ldr	r1, [pc, #40]	@ (8007754 <HAL_RCC_ClockConfig+0x1c0>)
 800772c:	5ccb      	ldrb	r3, [r1, r3]
 800772e:	fa22 f303 	lsr.w	r3, r2, r3
 8007732:	4a09      	ldr	r2, [pc, #36]	@ (8007758 <HAL_RCC_ClockConfig+0x1c4>)
 8007734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007736:	4b09      	ldr	r3, [pc, #36]	@ (800775c <HAL_RCC_ClockConfig+0x1c8>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4618      	mov	r0, r3
 800773c:	f7fd fc12 	bl	8004f64 <HAL_InitTick>

  return HAL_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40023c00 	.word	0x40023c00
 8007750:	40023800 	.word	0x40023800
 8007754:	0800c3cc 	.word	0x0800c3cc
 8007758:	20000058 	.word	0x20000058
 800775c:	2000005c 	.word	0x2000005c

08007760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007764:	b090      	sub	sp, #64	@ 0x40
 8007766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	637b      	str	r3, [r7, #52]	@ 0x34
 800776c:	2300      	movs	r3, #0
 800776e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007770:	2300      	movs	r3, #0
 8007772:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007774:	2300      	movs	r3, #0
 8007776:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007778:	4b59      	ldr	r3, [pc, #356]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f003 030c 	and.w	r3, r3, #12
 8007780:	2b08      	cmp	r3, #8
 8007782:	d00d      	beq.n	80077a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007784:	2b08      	cmp	r3, #8
 8007786:	f200 80a1 	bhi.w	80078cc <HAL_RCC_GetSysClockFreq+0x16c>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <HAL_RCC_GetSysClockFreq+0x34>
 800778e:	2b04      	cmp	r3, #4
 8007790:	d003      	beq.n	800779a <HAL_RCC_GetSysClockFreq+0x3a>
 8007792:	e09b      	b.n	80078cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007794:	4b53      	ldr	r3, [pc, #332]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007796:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007798:	e09b      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800779a:	4b53      	ldr	r3, [pc, #332]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800779c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800779e:	e098      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077a0:	4b4f      	ldr	r3, [pc, #316]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077aa:	4b4d      	ldr	r3, [pc, #308]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d028      	beq.n	8007808 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077b6:	4b4a      	ldr	r3, [pc, #296]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	099b      	lsrs	r3, r3, #6
 80077bc:	2200      	movs	r2, #0
 80077be:	623b      	str	r3, [r7, #32]
 80077c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80077c8:	2100      	movs	r1, #0
 80077ca:	4b47      	ldr	r3, [pc, #284]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80077cc:	fb03 f201 	mul.w	r2, r3, r1
 80077d0:	2300      	movs	r3, #0
 80077d2:	fb00 f303 	mul.w	r3, r0, r3
 80077d6:	4413      	add	r3, r2
 80077d8:	4a43      	ldr	r2, [pc, #268]	@ (80078e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80077da:	fba0 1202 	umull	r1, r2, r0, r2
 80077de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077e0:	460a      	mov	r2, r1
 80077e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80077e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077e6:	4413      	add	r3, r2
 80077e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ec:	2200      	movs	r2, #0
 80077ee:	61bb      	str	r3, [r7, #24]
 80077f0:	61fa      	str	r2, [r7, #28]
 80077f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80077fa:	f7f9 f9c9 	bl	8000b90 <__aeabi_uldivmod>
 80077fe:	4602      	mov	r2, r0
 8007800:	460b      	mov	r3, r1
 8007802:	4613      	mov	r3, r2
 8007804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007806:	e053      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007808:	4b35      	ldr	r3, [pc, #212]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	099b      	lsrs	r3, r3, #6
 800780e:	2200      	movs	r2, #0
 8007810:	613b      	str	r3, [r7, #16]
 8007812:	617a      	str	r2, [r7, #20]
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800781a:	f04f 0b00 	mov.w	fp, #0
 800781e:	4652      	mov	r2, sl
 8007820:	465b      	mov	r3, fp
 8007822:	f04f 0000 	mov.w	r0, #0
 8007826:	f04f 0100 	mov.w	r1, #0
 800782a:	0159      	lsls	r1, r3, #5
 800782c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007830:	0150      	lsls	r0, r2, #5
 8007832:	4602      	mov	r2, r0
 8007834:	460b      	mov	r3, r1
 8007836:	ebb2 080a 	subs.w	r8, r2, sl
 800783a:	eb63 090b 	sbc.w	r9, r3, fp
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	f04f 0300 	mov.w	r3, #0
 8007846:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800784a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800784e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007852:	ebb2 0408 	subs.w	r4, r2, r8
 8007856:	eb63 0509 	sbc.w	r5, r3, r9
 800785a:	f04f 0200 	mov.w	r2, #0
 800785e:	f04f 0300 	mov.w	r3, #0
 8007862:	00eb      	lsls	r3, r5, #3
 8007864:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007868:	00e2      	lsls	r2, r4, #3
 800786a:	4614      	mov	r4, r2
 800786c:	461d      	mov	r5, r3
 800786e:	eb14 030a 	adds.w	r3, r4, sl
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	eb45 030b 	adc.w	r3, r5, fp
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	f04f 0200 	mov.w	r2, #0
 800787e:	f04f 0300 	mov.w	r3, #0
 8007882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007886:	4629      	mov	r1, r5
 8007888:	028b      	lsls	r3, r1, #10
 800788a:	4621      	mov	r1, r4
 800788c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007890:	4621      	mov	r1, r4
 8007892:	028a      	lsls	r2, r1, #10
 8007894:	4610      	mov	r0, r2
 8007896:	4619      	mov	r1, r3
 8007898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800789a:	2200      	movs	r2, #0
 800789c:	60bb      	str	r3, [r7, #8]
 800789e:	60fa      	str	r2, [r7, #12]
 80078a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078a4:	f7f9 f974 	bl	8000b90 <__aeabi_uldivmod>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4613      	mov	r3, r2
 80078ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078b0:	4b0b      	ldr	r3, [pc, #44]	@ (80078e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	3301      	adds	r3, #1
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80078c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80078ca:	e002      	b.n	80078d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078cc:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80078ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80078d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3740      	adds	r7, #64	@ 0x40
 80078d8:	46bd      	mov	sp, r7
 80078da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078de:	bf00      	nop
 80078e0:	40023800 	.word	0x40023800
 80078e4:	00f42400 	.word	0x00f42400
 80078e8:	017d7840 	.word	0x017d7840

080078ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f0:	4b03      	ldr	r3, [pc, #12]	@ (8007900 <HAL_RCC_GetHCLKFreq+0x14>)
 80078f2:	681b      	ldr	r3, [r3, #0]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20000058 	.word	0x20000058

08007904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007908:	f7ff fff0 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 800790c:	4602      	mov	r2, r0
 800790e:	4b05      	ldr	r3, [pc, #20]	@ (8007924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	0a9b      	lsrs	r3, r3, #10
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	4903      	ldr	r1, [pc, #12]	@ (8007928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800791a:	5ccb      	ldrb	r3, [r1, r3]
 800791c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007920:	4618      	mov	r0, r3
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40023800 	.word	0x40023800
 8007928:	0800c3dc 	.word	0x0800c3dc

0800792c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007930:	f7ff ffdc 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 8007934:	4602      	mov	r2, r0
 8007936:	4b05      	ldr	r3, [pc, #20]	@ (800794c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	0b5b      	lsrs	r3, r3, #13
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	4903      	ldr	r1, [pc, #12]	@ (8007950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007942:	5ccb      	ldrb	r3, [r1, r3]
 8007944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007948:	4618      	mov	r0, r3
 800794a:	bd80      	pop	{r7, pc}
 800794c:	40023800 	.word	0x40023800
 8007950:	0800c3dc 	.word	0x0800c3dc

08007954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e041      	b.n	80079ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d106      	bne.n	8007980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fc fdfc 	bl	8004578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2202      	movs	r2, #2
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	3304      	adds	r3, #4
 8007990:	4619      	mov	r1, r3
 8007992:	4610      	mov	r0, r2
 8007994:	f000 fcd8 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d001      	beq.n	8007a0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e046      	b.n	8007a9a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a23      	ldr	r2, [pc, #140]	@ (8007aa8 <HAL_TIM_Base_Start+0xb4>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d022      	beq.n	8007a64 <HAL_TIM_Base_Start+0x70>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a26:	d01d      	beq.n	8007a64 <HAL_TIM_Base_Start+0x70>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007aac <HAL_TIM_Base_Start+0xb8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d018      	beq.n	8007a64 <HAL_TIM_Base_Start+0x70>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab0 <HAL_TIM_Base_Start+0xbc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <HAL_TIM_Base_Start+0x70>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1c      	ldr	r2, [pc, #112]	@ (8007ab4 <HAL_TIM_Base_Start+0xc0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d00e      	beq.n	8007a64 <HAL_TIM_Base_Start+0x70>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ab8 <HAL_TIM_Base_Start+0xc4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d009      	beq.n	8007a64 <HAL_TIM_Base_Start+0x70>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a19      	ldr	r2, [pc, #100]	@ (8007abc <HAL_TIM_Base_Start+0xc8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d004      	beq.n	8007a64 <HAL_TIM_Base_Start+0x70>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a18      	ldr	r2, [pc, #96]	@ (8007ac0 <HAL_TIM_Base_Start+0xcc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d111      	bne.n	8007a88 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b06      	cmp	r3, #6
 8007a74:	d010      	beq.n	8007a98 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f042 0201 	orr.w	r2, r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a86:	e007      	b.n	8007a98 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40010000 	.word	0x40010000
 8007aac:	40000400 	.word	0x40000400
 8007ab0:	40000800 	.word	0x40000800
 8007ab4:	40000c00 	.word	0x40000c00
 8007ab8:	40010400 	.word	0x40010400
 8007abc:	40014000 	.word	0x40014000
 8007ac0:	40001800 	.word	0x40001800

08007ac4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d001      	beq.n	8007adc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e04e      	b.n	8007b7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a23      	ldr	r2, [pc, #140]	@ (8007b88 <HAL_TIM_Base_Start_IT+0xc4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d022      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x80>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b06:	d01d      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x80>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007b8c <HAL_TIM_Base_Start_IT+0xc8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d018      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x80>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a1e      	ldr	r2, [pc, #120]	@ (8007b90 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d013      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x80>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1c      	ldr	r2, [pc, #112]	@ (8007b94 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00e      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x80>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007b98 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d009      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x80>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a19      	ldr	r2, [pc, #100]	@ (8007b9c <HAL_TIM_Base_Start_IT+0xd8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d004      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x80>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a18      	ldr	r2, [pc, #96]	@ (8007ba0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d111      	bne.n	8007b68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d010      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f042 0201 	orr.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b66:	e007      	b.n	8007b78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40000c00 	.word	0x40000c00
 8007b98:	40010400 	.word	0x40010400
 8007b9c:	40014000 	.word	0x40014000
 8007ba0:	40001800 	.word	0x40001800

08007ba4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e041      	b.n	8007c3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fc fd26 	bl	800461c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4619      	mov	r1, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	f000 fbb0 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
	...

08007c44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d109      	bne.n	8007c68 <HAL_TIM_PWM_Start+0x24>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	bf14      	ite	ne
 8007c60:	2301      	movne	r3, #1
 8007c62:	2300      	moveq	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	e022      	b.n	8007cae <HAL_TIM_PWM_Start+0x6a>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d109      	bne.n	8007c82 <HAL_TIM_PWM_Start+0x3e>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	bf14      	ite	ne
 8007c7a:	2301      	movne	r3, #1
 8007c7c:	2300      	moveq	r3, #0
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	e015      	b.n	8007cae <HAL_TIM_PWM_Start+0x6a>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d109      	bne.n	8007c9c <HAL_TIM_PWM_Start+0x58>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	bf14      	ite	ne
 8007c94:	2301      	movne	r3, #1
 8007c96:	2300      	moveq	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	e008      	b.n	8007cae <HAL_TIM_PWM_Start+0x6a>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	bf14      	ite	ne
 8007ca8:	2301      	movne	r3, #1
 8007caa:	2300      	moveq	r3, #0
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e07c      	b.n	8007db0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <HAL_TIM_PWM_Start+0x82>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cc4:	e013      	b.n	8007cee <HAL_TIM_PWM_Start+0xaa>
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	d104      	bne.n	8007cd6 <HAL_TIM_PWM_Start+0x92>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cd4:	e00b      	b.n	8007cee <HAL_TIM_PWM_Start+0xaa>
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d104      	bne.n	8007ce6 <HAL_TIM_PWM_Start+0xa2>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ce4:	e003      	b.n	8007cee <HAL_TIM_PWM_Start+0xaa>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	6839      	ldr	r1, [r7, #0]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fe10 	bl	800891c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a2d      	ldr	r2, [pc, #180]	@ (8007db8 <HAL_TIM_PWM_Start+0x174>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d004      	beq.n	8007d10 <HAL_TIM_PWM_Start+0xcc>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8007dbc <HAL_TIM_PWM_Start+0x178>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d101      	bne.n	8007d14 <HAL_TIM_PWM_Start+0xd0>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <HAL_TIM_PWM_Start+0xd2>
 8007d14:	2300      	movs	r3, #0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d007      	beq.n	8007d2a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a22      	ldr	r2, [pc, #136]	@ (8007db8 <HAL_TIM_PWM_Start+0x174>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d022      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x136>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d3c:	d01d      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x136>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a1f      	ldr	r2, [pc, #124]	@ (8007dc0 <HAL_TIM_PWM_Start+0x17c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d018      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x136>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8007dc4 <HAL_TIM_PWM_Start+0x180>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d013      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x136>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a1c      	ldr	r2, [pc, #112]	@ (8007dc8 <HAL_TIM_PWM_Start+0x184>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d00e      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x136>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a16      	ldr	r2, [pc, #88]	@ (8007dbc <HAL_TIM_PWM_Start+0x178>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d009      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x136>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a18      	ldr	r2, [pc, #96]	@ (8007dcc <HAL_TIM_PWM_Start+0x188>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d004      	beq.n	8007d7a <HAL_TIM_PWM_Start+0x136>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a16      	ldr	r2, [pc, #88]	@ (8007dd0 <HAL_TIM_PWM_Start+0x18c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d111      	bne.n	8007d9e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b06      	cmp	r3, #6
 8007d8a:	d010      	beq.n	8007dae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0201 	orr.w	r2, r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d9c:	e007      	b.n	8007dae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0201 	orr.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40010000 	.word	0x40010000
 8007dbc:	40010400 	.word	0x40010400
 8007dc0:	40000400 	.word	0x40000400
 8007dc4:	40000800 	.word	0x40000800
 8007dc8:	40000c00 	.word	0x40000c00
 8007dcc:	40014000 	.word	0x40014000
 8007dd0:	40001800 	.word	0x40001800

08007dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d122      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d11b      	bne.n	8007e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f06f 0202 	mvn.w	r2, #2
 8007e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	f003 0303 	and.w	r3, r3, #3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fa77 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007e1c:	e005      	b.n	8007e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa69 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fa7a 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b04      	cmp	r3, #4
 8007e3c:	d122      	bne.n	8007e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f003 0304 	and.w	r3, r3, #4
 8007e48:	2b04      	cmp	r3, #4
 8007e4a:	d11b      	bne.n	8007e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f06f 0204 	mvn.w	r2, #4
 8007e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa4d 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007e70:	e005      	b.n	8007e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa3f 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa50 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	d122      	bne.n	8007ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f003 0308 	and.w	r3, r3, #8
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d11b      	bne.n	8007ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f06f 0208 	mvn.w	r2, #8
 8007ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2204      	movs	r2, #4
 8007eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa23 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007ec4:	e005      	b.n	8007ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fa15 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fa26 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f003 0310 	and.w	r3, r3, #16
 8007ee2:	2b10      	cmp	r3, #16
 8007ee4:	d122      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	f003 0310 	and.w	r3, r3, #16
 8007ef0:	2b10      	cmp	r3, #16
 8007ef2:	d11b      	bne.n	8007f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f06f 0210 	mvn.w	r2, #16
 8007efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2208      	movs	r2, #8
 8007f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f9f9 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007f18:	e005      	b.n	8007f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f9eb 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f9fc 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d10e      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d107      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f06f 0201 	mvn.w	r2, #1
 8007f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f7fa feaa 	bl	8002cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f62:	2b80      	cmp	r3, #128	@ 0x80
 8007f64:	d10e      	bne.n	8007f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f70:	2b80      	cmp	r3, #128	@ 0x80
 8007f72:	d107      	bne.n	8007f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fd78 	bl	8008a74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f8e:	2b40      	cmp	r3, #64	@ 0x40
 8007f90:	d10e      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68db      	ldr	r3, [r3, #12]
 8007f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f9c:	2b40      	cmp	r3, #64	@ 0x40
 8007f9e:	d107      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f9c1 	bl	8008332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d10e      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d107      	bne.n	8007fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0220 	mvn.w	r2, #32
 8007fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 fd42 	bl	8008a60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fdc:	bf00      	nop
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ffe:	2302      	movs	r3, #2
 8008000:	e0ae      	b.n	8008160 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b0c      	cmp	r3, #12
 800800e:	f200 809f 	bhi.w	8008150 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008012:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	0800804d 	.word	0x0800804d
 800801c:	08008151 	.word	0x08008151
 8008020:	08008151 	.word	0x08008151
 8008024:	08008151 	.word	0x08008151
 8008028:	0800808d 	.word	0x0800808d
 800802c:	08008151 	.word	0x08008151
 8008030:	08008151 	.word	0x08008151
 8008034:	08008151 	.word	0x08008151
 8008038:	080080cf 	.word	0x080080cf
 800803c:	08008151 	.word	0x08008151
 8008040:	08008151 	.word	0x08008151
 8008044:	08008151 	.word	0x08008151
 8008048:	0800810f 	.word	0x0800810f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68b9      	ldr	r1, [r7, #8]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 fa18 	bl	8008488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	699a      	ldr	r2, [r3, #24]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f042 0208 	orr.w	r2, r2, #8
 8008066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699a      	ldr	r2, [r3, #24]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0204 	bic.w	r2, r2, #4
 8008076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6999      	ldr	r1, [r3, #24]
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	619a      	str	r2, [r3, #24]
      break;
 800808a:	e064      	b.n	8008156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fa68 	bl	8008568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	699a      	ldr	r2, [r3, #24]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6999      	ldr	r1, [r3, #24]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	021a      	lsls	r2, r3, #8
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	430a      	orrs	r2, r1
 80080ca:	619a      	str	r2, [r3, #24]
      break;
 80080cc:	e043      	b.n	8008156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68b9      	ldr	r1, [r7, #8]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 fabd 	bl	8008654 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69da      	ldr	r2, [r3, #28]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0208 	orr.w	r2, r2, #8
 80080e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69da      	ldr	r2, [r3, #28]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0204 	bic.w	r2, r2, #4
 80080f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69d9      	ldr	r1, [r3, #28]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	61da      	str	r2, [r3, #28]
      break;
 800810c:	e023      	b.n	8008156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68b9      	ldr	r1, [r7, #8]
 8008114:	4618      	mov	r0, r3
 8008116:	f000 fb11 	bl	800873c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	69da      	ldr	r2, [r3, #28]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69da      	ldr	r2, [r3, #28]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	69d9      	ldr	r1, [r3, #28]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	021a      	lsls	r2, r3, #8
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	430a      	orrs	r2, r1
 800814c:	61da      	str	r2, [r3, #28]
      break;
 800814e:	e002      	b.n	8008156 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	75fb      	strb	r3, [r7, #23]
      break;
 8008154:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_TIM_ConfigClockSource+0x1c>
 8008180:	2302      	movs	r3, #2
 8008182:	e0b4      	b.n	80082ee <HAL_TIM_ConfigClockSource+0x186>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80081a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081bc:	d03e      	beq.n	800823c <HAL_TIM_ConfigClockSource+0xd4>
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081c2:	f200 8087 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081ca:	f000 8086 	beq.w	80082da <HAL_TIM_ConfigClockSource+0x172>
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081d2:	d87f      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081d4:	2b70      	cmp	r3, #112	@ 0x70
 80081d6:	d01a      	beq.n	800820e <HAL_TIM_ConfigClockSource+0xa6>
 80081d8:	2b70      	cmp	r3, #112	@ 0x70
 80081da:	d87b      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081dc:	2b60      	cmp	r3, #96	@ 0x60
 80081de:	d050      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0x11a>
 80081e0:	2b60      	cmp	r3, #96	@ 0x60
 80081e2:	d877      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081e4:	2b50      	cmp	r3, #80	@ 0x50
 80081e6:	d03c      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0xfa>
 80081e8:	2b50      	cmp	r3, #80	@ 0x50
 80081ea:	d873      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081ec:	2b40      	cmp	r3, #64	@ 0x40
 80081ee:	d058      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x13a>
 80081f0:	2b40      	cmp	r3, #64	@ 0x40
 80081f2:	d86f      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081f4:	2b30      	cmp	r3, #48	@ 0x30
 80081f6:	d064      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x15a>
 80081f8:	2b30      	cmp	r3, #48	@ 0x30
 80081fa:	d86b      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d060      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008200:	2b20      	cmp	r3, #32
 8008202:	d867      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d05c      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008208:	2b10      	cmp	r3, #16
 800820a:	d05a      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x15a>
 800820c:	e062      	b.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6899      	ldr	r1, [r3, #8]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f000 fb5d 	bl	80088dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	609a      	str	r2, [r3, #8]
      break;
 800823a:	e04f      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	6899      	ldr	r1, [r3, #8]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f000 fb46 	bl	80088dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800825e:	609a      	str	r2, [r3, #8]
      break;
 8008260:	e03c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	6859      	ldr	r1, [r3, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	461a      	mov	r2, r3
 8008270:	f000 faba 	bl	80087e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2150      	movs	r1, #80	@ 0x50
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fb13 	bl	80088a6 <TIM_ITRx_SetConfig>
      break;
 8008280:	e02c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6859      	ldr	r1, [r3, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	461a      	mov	r2, r3
 8008290:	f000 fad9 	bl	8008846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2160      	movs	r1, #96	@ 0x60
 800829a:	4618      	mov	r0, r3
 800829c:	f000 fb03 	bl	80088a6 <TIM_ITRx_SetConfig>
      break;
 80082a0:	e01c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6859      	ldr	r1, [r3, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f000 fa9a 	bl	80087e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2140      	movs	r1, #64	@ 0x40
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 faf3 	bl	80088a6 <TIM_ITRx_SetConfig>
      break;
 80082c0:	e00c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4619      	mov	r1, r3
 80082cc:	4610      	mov	r0, r2
 80082ce:	f000 faea 	bl	80088a6 <TIM_ITRx_SetConfig>
      break;
 80082d2:	e003      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
      break;
 80082d8:	e000      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a40      	ldr	r2, [pc, #256]	@ (800845c <TIM_Base_SetConfig+0x114>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008366:	d00f      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a3d      	ldr	r2, [pc, #244]	@ (8008460 <TIM_Base_SetConfig+0x118>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00b      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a3c      	ldr	r2, [pc, #240]	@ (8008464 <TIM_Base_SetConfig+0x11c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d007      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a3b      	ldr	r2, [pc, #236]	@ (8008468 <TIM_Base_SetConfig+0x120>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d003      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a3a      	ldr	r2, [pc, #232]	@ (800846c <TIM_Base_SetConfig+0x124>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d108      	bne.n	800839a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800838e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a2f      	ldr	r2, [pc, #188]	@ (800845c <TIM_Base_SetConfig+0x114>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d02b      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a8:	d027      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a2c      	ldr	r2, [pc, #176]	@ (8008460 <TIM_Base_SetConfig+0x118>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d023      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a2b      	ldr	r2, [pc, #172]	@ (8008464 <TIM_Base_SetConfig+0x11c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d01f      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a2a      	ldr	r2, [pc, #168]	@ (8008468 <TIM_Base_SetConfig+0x120>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d01b      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a29      	ldr	r2, [pc, #164]	@ (800846c <TIM_Base_SetConfig+0x124>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d017      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a28      	ldr	r2, [pc, #160]	@ (8008470 <TIM_Base_SetConfig+0x128>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d013      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a27      	ldr	r2, [pc, #156]	@ (8008474 <TIM_Base_SetConfig+0x12c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00f      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a26      	ldr	r2, [pc, #152]	@ (8008478 <TIM_Base_SetConfig+0x130>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00b      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a25      	ldr	r2, [pc, #148]	@ (800847c <TIM_Base_SetConfig+0x134>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d007      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a24      	ldr	r2, [pc, #144]	@ (8008480 <TIM_Base_SetConfig+0x138>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d003      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a23      	ldr	r2, [pc, #140]	@ (8008484 <TIM_Base_SetConfig+0x13c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d108      	bne.n	800840c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a0a      	ldr	r2, [pc, #40]	@ (800845c <TIM_Base_SetConfig+0x114>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_Base_SetConfig+0xf8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a0c      	ldr	r2, [pc, #48]	@ (800846c <TIM_Base_SetConfig+0x124>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d103      	bne.n	8008448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	615a      	str	r2, [r3, #20]
}
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40010000 	.word	0x40010000
 8008460:	40000400 	.word	0x40000400
 8008464:	40000800 	.word	0x40000800
 8008468:	40000c00 	.word	0x40000c00
 800846c:	40010400 	.word	0x40010400
 8008470:	40014000 	.word	0x40014000
 8008474:	40014400 	.word	0x40014400
 8008478:	40014800 	.word	0x40014800
 800847c:	40001800 	.word	0x40001800
 8008480:	40001c00 	.word	0x40001c00
 8008484:	40002000 	.word	0x40002000

08008488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a1b      	ldr	r3, [r3, #32]
 8008496:	f023 0201 	bic.w	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 0303 	bic.w	r3, r3, #3
 80084be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f023 0302 	bic.w	r3, r3, #2
 80084d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4313      	orrs	r3, r2
 80084da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a20      	ldr	r2, [pc, #128]	@ (8008560 <TIM_OC1_SetConfig+0xd8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d003      	beq.n	80084ec <TIM_OC1_SetConfig+0x64>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a1f      	ldr	r2, [pc, #124]	@ (8008564 <TIM_OC1_SetConfig+0xdc>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d10c      	bne.n	8008506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f023 0308 	bic.w	r3, r3, #8
 80084f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f023 0304 	bic.w	r3, r3, #4
 8008504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a15      	ldr	r2, [pc, #84]	@ (8008560 <TIM_OC1_SetConfig+0xd8>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d003      	beq.n	8008516 <TIM_OC1_SetConfig+0x8e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a14      	ldr	r2, [pc, #80]	@ (8008564 <TIM_OC1_SetConfig+0xdc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d111      	bne.n	800853a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800851c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4313      	orrs	r3, r2
 800852e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	621a      	str	r2, [r3, #32]
}
 8008554:	bf00      	nop
 8008556:	371c      	adds	r7, #28
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	40010000 	.word	0x40010000
 8008564:	40010400 	.word	0x40010400

08008568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6a1b      	ldr	r3, [r3, #32]
 8008576:	f023 0210 	bic.w	r2, r3, #16
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800859e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	021b      	lsls	r3, r3, #8
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f023 0320 	bic.w	r3, r3, #32
 80085b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	011b      	lsls	r3, r3, #4
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4313      	orrs	r3, r2
 80085be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a22      	ldr	r2, [pc, #136]	@ (800864c <TIM_OC2_SetConfig+0xe4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d003      	beq.n	80085d0 <TIM_OC2_SetConfig+0x68>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a21      	ldr	r2, [pc, #132]	@ (8008650 <TIM_OC2_SetConfig+0xe8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10d      	bne.n	80085ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	011b      	lsls	r3, r3, #4
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a17      	ldr	r2, [pc, #92]	@ (800864c <TIM_OC2_SetConfig+0xe4>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d003      	beq.n	80085fc <TIM_OC2_SetConfig+0x94>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a16      	ldr	r2, [pc, #88]	@ (8008650 <TIM_OC2_SetConfig+0xe8>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d113      	bne.n	8008624 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008602:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800860a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	4313      	orrs	r3, r2
 8008622:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685a      	ldr	r2, [r3, #4]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	621a      	str	r2, [r3, #32]
}
 800863e:	bf00      	nop
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	40010000 	.word	0x40010000
 8008650:	40010400 	.word	0x40010400

08008654 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f023 0303 	bic.w	r3, r3, #3
 800868a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68fa      	ldr	r2, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800869c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a21      	ldr	r2, [pc, #132]	@ (8008734 <TIM_OC3_SetConfig+0xe0>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d003      	beq.n	80086ba <TIM_OC3_SetConfig+0x66>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a20      	ldr	r2, [pc, #128]	@ (8008738 <TIM_OC3_SetConfig+0xe4>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d10d      	bne.n	80086d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80086c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	021b      	lsls	r3, r3, #8
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80086d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a16      	ldr	r2, [pc, #88]	@ (8008734 <TIM_OC3_SetConfig+0xe0>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d003      	beq.n	80086e6 <TIM_OC3_SetConfig+0x92>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	4a15      	ldr	r2, [pc, #84]	@ (8008738 <TIM_OC3_SetConfig+0xe4>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d113      	bne.n	800870e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80086ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80086f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	011b      	lsls	r3, r3, #4
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	4313      	orrs	r3, r2
 8008700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	4313      	orrs	r3, r2
 800870c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	693a      	ldr	r2, [r7, #16]
 8008712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	621a      	str	r2, [r3, #32]
}
 8008728:	bf00      	nop
 800872a:	371c      	adds	r7, #28
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	40010000 	.word	0x40010000
 8008738:	40010400 	.word	0x40010400

0800873c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a1b      	ldr	r3, [r3, #32]
 8008756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800876a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	021b      	lsls	r3, r3, #8
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	4313      	orrs	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	031b      	lsls	r3, r3, #12
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	4313      	orrs	r3, r2
 8008792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a12      	ldr	r2, [pc, #72]	@ (80087e0 <TIM_OC4_SetConfig+0xa4>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d003      	beq.n	80087a4 <TIM_OC4_SetConfig+0x68>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a11      	ldr	r2, [pc, #68]	@ (80087e4 <TIM_OC4_SetConfig+0xa8>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d109      	bne.n	80087b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80087aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	019b      	lsls	r3, r3, #6
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	621a      	str	r2, [r3, #32]
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40010000 	.word	0x40010000
 80087e4:	40010400 	.word	0x40010400

080087e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a1b      	ldr	r3, [r3, #32]
 80087f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	f023 0201 	bic.w	r2, r3, #1
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	699b      	ldr	r3, [r3, #24]
 800880a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	693a      	ldr	r2, [r7, #16]
 800881a:	4313      	orrs	r3, r2
 800881c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	f023 030a 	bic.w	r3, r3, #10
 8008824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4313      	orrs	r3, r2
 800882c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	697a      	ldr	r2, [r7, #20]
 8008838:	621a      	str	r2, [r3, #32]
}
 800883a:	bf00      	nop
 800883c:	371c      	adds	r7, #28
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008846:	b480      	push	{r7}
 8008848:	b087      	sub	sp, #28
 800884a:	af00      	add	r7, sp, #0
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a1b      	ldr	r3, [r3, #32]
 8008856:	f023 0210 	bic.w	r2, r3, #16
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	031b      	lsls	r3, r3, #12
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	693a      	ldr	r2, [r7, #16]
 800888a:	4313      	orrs	r3, r2
 800888c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	621a      	str	r2, [r3, #32]
}
 800889a:	bf00      	nop
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088a6:	b480      	push	{r7}
 80088a8:	b085      	sub	sp, #20
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
 80088ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088be:	683a      	ldr	r2, [r7, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	f043 0307 	orr.w	r3, r3, #7
 80088c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	609a      	str	r2, [r3, #8]
}
 80088d0:	bf00      	nop
 80088d2:	3714      	adds	r7, #20
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	021a      	lsls	r2, r3, #8
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	431a      	orrs	r2, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	4313      	orrs	r3, r2
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	609a      	str	r2, [r3, #8]
}
 8008910:	bf00      	nop
 8008912:	371c      	adds	r7, #28
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800891c:	b480      	push	{r7}
 800891e:	b087      	sub	sp, #28
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	f003 031f 	and.w	r3, r3, #31
 800892e:	2201      	movs	r2, #1
 8008930:	fa02 f303 	lsl.w	r3, r2, r3
 8008934:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a1a      	ldr	r2, [r3, #32]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	43db      	mvns	r3, r3
 800893e:	401a      	ands	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a1a      	ldr	r2, [r3, #32]
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f003 031f 	and.w	r3, r3, #31
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	fa01 f303 	lsl.w	r3, r1, r3
 8008954:	431a      	orrs	r2, r3
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	621a      	str	r2, [r3, #32]
}
 800895a:	bf00      	nop
 800895c:	371c      	adds	r7, #28
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
	...

08008968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008978:	2b01      	cmp	r3, #1
 800897a:	d101      	bne.n	8008980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800897c:	2302      	movs	r3, #2
 800897e:	e05a      	b.n	8008a36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a21      	ldr	r2, [pc, #132]	@ (8008a44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d022      	beq.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089cc:	d01d      	beq.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d018      	beq.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a1b      	ldr	r2, [pc, #108]	@ (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d013      	beq.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a1a      	ldr	r2, [pc, #104]	@ (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00e      	beq.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a18      	ldr	r2, [pc, #96]	@ (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d009      	beq.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a17      	ldr	r2, [pc, #92]	@ (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d004      	beq.n	8008a0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a15      	ldr	r2, [pc, #84]	@ (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d10c      	bne.n	8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	40010000 	.word	0x40010000
 8008a48:	40000400 	.word	0x40000400
 8008a4c:	40000800 	.word	0x40000800
 8008a50:	40000c00 	.word	0x40000c00
 8008a54:	40010400 	.word	0x40010400
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40001800 	.word	0x40001800

08008a60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e03f      	b.n	8008b1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d106      	bne.n	8008ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f7fb fe30 	bl	8004714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2224      	movs	r2, #36	@ 0x24
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 ffa7 	bl	8009a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	691a      	ldr	r2, [r3, #16]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	695a      	ldr	r2, [r3, #20]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2220      	movs	r2, #32
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
	...

08008b24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b08c      	sub	sp, #48	@ 0x30
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	d165      	bne.n	8008c0a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <HAL_UART_Transmit_DMA+0x26>
 8008b44:	88fb      	ldrh	r3, [r7, #6]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e05e      	b.n	8008c0c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_UART_Transmit_DMA+0x38>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e057      	b.n	8008c0c <HAL_UART_Transmit_DMA+0xe8>
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	88fa      	ldrh	r2, [r7, #6]
 8008b6e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	88fa      	ldrh	r2, [r7, #6]
 8008b74:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2221      	movs	r2, #33	@ 0x21
 8008b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b88:	4a22      	ldr	r2, [pc, #136]	@ (8008c14 <HAL_UART_Transmit_DMA+0xf0>)
 8008b8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b90:	4a21      	ldr	r2, [pc, #132]	@ (8008c18 <HAL_UART_Transmit_DMA+0xf4>)
 8008b92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b98:	4a20      	ldr	r2, [pc, #128]	@ (8008c1c <HAL_UART_Transmit_DMA+0xf8>)
 8008b9a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008ba4:	f107 0308 	add.w	r3, r7, #8
 8008ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8008bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb0:	6819      	ldr	r1, [r3, #0]
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	3304      	adds	r3, #4
 8008bb8:	461a      	mov	r2, r3
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	f7fc fc64 	bl	8005488 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008bc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3314      	adds	r3, #20
 8008bd8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	e853 3f00 	ldrex	r3, [r3]
 8008be0:	617b      	str	r3, [r7, #20]
   return(result);
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	3314      	adds	r3, #20
 8008bf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bf2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008bf4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf6:	6a39      	ldr	r1, [r7, #32]
 8008bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e5      	bne.n	8008bd2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008c06:	2300      	movs	r3, #0
 8008c08:	e000      	b.n	8008c0c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008c0a:	2302      	movs	r3, #2
  }
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3730      	adds	r7, #48	@ 0x30
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	080092b9 	.word	0x080092b9
 8008c18:	08009353 	.word	0x08009353
 8008c1c:	080094cb 	.word	0x080094cb

08008c20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	4613      	mov	r3, r2
 8008c2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b20      	cmp	r3, #32
 8008c38:	d11d      	bne.n	8008c76 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d002      	beq.n	8008c46 <HAL_UART_Receive_DMA+0x26>
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d101      	bne.n	8008c4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e016      	b.n	8008c78 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d101      	bne.n	8008c58 <HAL_UART_Receive_DMA+0x38>
 8008c54:	2302      	movs	r3, #2
 8008c56:	e00f      	b.n	8008c78 <HAL_UART_Receive_DMA+0x58>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008c66:	88fb      	ldrh	r3, [r7, #6]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	68b9      	ldr	r1, [r7, #8]
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 fc77 	bl	8009560 <UART_Start_Receive_DMA>
 8008c72:	4603      	mov	r3, r0
 8008c74:	e000      	b.n	8008c78 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c76:	2302      	movs	r3, #2
  }
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08c      	sub	sp, #48	@ 0x30
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	4613      	mov	r3, r2
 8008c8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	d152      	bne.n	8008d40 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008ca0:	88fb      	ldrh	r3, [r7, #6]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e04b      	b.n	8008d42 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d101      	bne.n	8008cb8 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008cb4:	2302      	movs	r3, #2
 8008cb6:	e044      	b.n	8008d42 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008cc6:	88fb      	ldrh	r3, [r7, #6]
 8008cc8:	461a      	mov	r2, r3
 8008cca:	68b9      	ldr	r1, [r7, #8]
 8008ccc:	68f8      	ldr	r0, [r7, #12]
 8008cce:	f000 fc47 	bl	8009560 <UART_Start_Receive_DMA>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d12c      	bne.n	8008d3a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d125      	bne.n	8008d34 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	613b      	str	r3, [r7, #16]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	330c      	adds	r3, #12
 8008d04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	f043 0310 	orr.w	r3, r3, #16
 8008d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	330c      	adds	r3, #12
 8008d1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d1e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d22:	6a39      	ldr	r1, [r7, #32]
 8008d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d26:	e841 2300 	strex	r3, r2, [r1]
 8008d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d1e5      	bne.n	8008cfe <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008d32:	e002      	b.n	8008d3a <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008d3e:	e000      	b.n	8008d42 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008d40:	2302      	movs	r3, #2
  }
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3730      	adds	r7, #48	@ 0x30
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
	...

08008d4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b0ba      	sub	sp, #232	@ 0xe8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d82:	f003 030f 	and.w	r3, r3, #15
 8008d86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008d8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10f      	bne.n	8008db2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d96:	f003 0320 	and.w	r3, r3, #32
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d009      	beq.n	8008db2 <HAL_UART_IRQHandler+0x66>
 8008d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008da2:	f003 0320 	and.w	r3, r3, #32
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d003      	beq.n	8008db2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fd7d 	bl	80098aa <UART_Receive_IT>
      return;
 8008db0:	e256      	b.n	8009260 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80de 	beq.w	8008f78 <HAL_UART_IRQHandler+0x22c>
 8008dbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dc0:	f003 0301 	and.w	r3, r3, #1
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d106      	bne.n	8008dd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dcc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 80d1 	beq.w	8008f78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00b      	beq.n	8008dfa <HAL_UART_IRQHandler+0xae>
 8008de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df2:	f043 0201 	orr.w	r2, r3, #1
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dfe:	f003 0304 	and.w	r3, r3, #4
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00b      	beq.n	8008e1e <HAL_UART_IRQHandler+0xd2>
 8008e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d005      	beq.n	8008e1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e16:	f043 0202 	orr.w	r2, r3, #2
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00b      	beq.n	8008e42 <HAL_UART_IRQHandler+0xf6>
 8008e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d005      	beq.n	8008e42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3a:	f043 0204 	orr.w	r2, r3, #4
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e46:	f003 0308 	and.w	r3, r3, #8
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d011      	beq.n	8008e72 <HAL_UART_IRQHandler+0x126>
 8008e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e52:	f003 0320 	and.w	r3, r3, #32
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d105      	bne.n	8008e66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d005      	beq.n	8008e72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e6a:	f043 0208 	orr.w	r2, r3, #8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	f000 81ed 	beq.w	8009256 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e80:	f003 0320 	and.w	r3, r3, #32
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d008      	beq.n	8008e9a <HAL_UART_IRQHandler+0x14e>
 8008e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e8c:	f003 0320 	and.w	r3, r3, #32
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fd08 	bl	80098aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ea4:	2b40      	cmp	r3, #64	@ 0x40
 8008ea6:	bf0c      	ite	eq
 8008ea8:	2301      	moveq	r3, #1
 8008eaa:	2300      	movne	r3, #0
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb6:	f003 0308 	and.w	r3, r3, #8
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d103      	bne.n	8008ec6 <HAL_UART_IRQHandler+0x17a>
 8008ebe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d04f      	beq.n	8008f66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fc10 	bl	80096ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed6:	2b40      	cmp	r3, #64	@ 0x40
 8008ed8:	d141      	bne.n	8008f5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3314      	adds	r3, #20
 8008ee0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
 8008eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ef4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3314      	adds	r3, #20
 8008f02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008f06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008f12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008f1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1d9      	bne.n	8008eda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d013      	beq.n	8008f56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f32:	4a7d      	ldr	r2, [pc, #500]	@ (8009128 <HAL_UART_IRQHandler+0x3dc>)
 8008f34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fc fb6c 	bl	8005618 <HAL_DMA_Abort_IT>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d016      	beq.n	8008f74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008f50:	4610      	mov	r0, r2
 8008f52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f54:	e00e      	b.n	8008f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 f9a4 	bl	80092a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f5c:	e00a      	b.n	8008f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 f9a0 	bl	80092a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f64:	e006      	b.n	8008f74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f99c 	bl	80092a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008f72:	e170      	b.n	8009256 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f74:	bf00      	nop
    return;
 8008f76:	e16e      	b.n	8009256 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	f040 814a 	bne.w	8009216 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f86:	f003 0310 	and.w	r3, r3, #16
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f000 8143 	beq.w	8009216 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f94:	f003 0310 	and.w	r3, r3, #16
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 813c 	beq.w	8009216 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60bb      	str	r3, [r7, #8]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	60bb      	str	r3, [r7, #8]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	60bb      	str	r3, [r7, #8]
 8008fb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fbe:	2b40      	cmp	r3, #64	@ 0x40
 8008fc0:	f040 80b4 	bne.w	800912c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008fd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	f000 8140 	beq.w	800925a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008fde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	f080 8139 	bcs.w	800925a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008fee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ffa:	f000 8088 	beq.w	800910e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	330c      	adds	r3, #12
 8009004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009014:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800901c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	330c      	adds	r3, #12
 8009026:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800902a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800902e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009036:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800903a:	e841 2300 	strex	r3, r2, [r1]
 800903e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1d9      	bne.n	8008ffe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3314      	adds	r3, #20
 8009050:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800905a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3314      	adds	r3, #20
 800906a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800906e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009072:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009074:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009076:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009080:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e1      	bne.n	800904a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	3314      	adds	r3, #20
 800908c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009090:	e853 3f00 	ldrex	r3, [r3]
 8009094:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800909c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	3314      	adds	r3, #20
 80090a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80090aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80090ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80090b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80090b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1e3      	bne.n	8009086 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2220      	movs	r2, #32
 80090c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	330c      	adds	r3, #12
 80090d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090de:	f023 0310 	bic.w	r3, r3, #16
 80090e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	330c      	adds	r3, #12
 80090ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80090f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80090f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e3      	bne.n	80090cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009108:	4618      	mov	r0, r3
 800910a:	f7fc fa15 	bl	8005538 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009116:	b29b      	uxth	r3, r3
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	b29b      	uxth	r3, r3
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7f9 fdd8 	bl	8002cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009124:	e099      	b.n	800925a <HAL_UART_IRQHandler+0x50e>
 8009126:	bf00      	nop
 8009128:	080097b3 	.word	0x080097b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009134:	b29b      	uxth	r3, r3
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009140:	b29b      	uxth	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 808b 	beq.w	800925e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009148:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800914c:	2b00      	cmp	r3, #0
 800914e:	f000 8086 	beq.w	800925e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	330c      	adds	r3, #12
 8009158:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009164:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009168:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	330c      	adds	r3, #12
 8009172:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009176:	647a      	str	r2, [r7, #68]	@ 0x44
 8009178:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800917c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e3      	bne.n	8009152 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3314      	adds	r3, #20
 8009190:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	623b      	str	r3, [r7, #32]
   return(result);
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	f023 0301 	bic.w	r3, r3, #1
 80091a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3314      	adds	r3, #20
 80091aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80091b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e3      	bne.n	800918a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	330c      	adds	r3, #12
 80091d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	e853 3f00 	ldrex	r3, [r3]
 80091de:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 0310 	bic.w	r3, r3, #16
 80091e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	330c      	adds	r3, #12
 80091f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80091f4:	61fa      	str	r2, [r7, #28]
 80091f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	69b9      	ldr	r1, [r7, #24]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	617b      	str	r3, [r7, #20]
   return(result);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e3      	bne.n	80091d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009208:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f7f9 fd60 	bl	8002cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009214:	e023      	b.n	800925e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800921a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <HAL_UART_IRQHandler+0x4ea>
 8009222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009226:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fad3 	bl	80097da <UART_Transmit_IT>
    return;
 8009234:	e014      	b.n	8009260 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800923a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00e      	beq.n	8009260 <HAL_UART_IRQHandler+0x514>
 8009242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	d008      	beq.n	8009260 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fb13 	bl	800987a <UART_EndTransmit_IT>
    return;
 8009254:	e004      	b.n	8009260 <HAL_UART_IRQHandler+0x514>
    return;
 8009256:	bf00      	nop
 8009258:	e002      	b.n	8009260 <HAL_UART_IRQHandler+0x514>
      return;
 800925a:	bf00      	nop
 800925c:	e000      	b.n	8009260 <HAL_UART_IRQHandler+0x514>
      return;
 800925e:	bf00      	nop
  }
}
 8009260:	37e8      	adds	r7, #232	@ 0xe8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop

08009268 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b090      	sub	sp, #64	@ 0x40
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d137      	bne.n	8009344 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80092d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d6:	2200      	movs	r2, #0
 80092d8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80092da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3314      	adds	r3, #20
 80092e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	623b      	str	r3, [r7, #32]
   return(result);
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80092f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3314      	adds	r3, #20
 80092f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80092fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e5      	bne.n	80092da <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800930e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	330c      	adds	r3, #12
 8009314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	60fb      	str	r3, [r7, #12]
   return(result);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009324:	637b      	str	r3, [r7, #52]	@ 0x34
 8009326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	330c      	adds	r3, #12
 800932c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800932e:	61fa      	str	r2, [r7, #28]
 8009330:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	69b9      	ldr	r1, [r7, #24]
 8009334:	69fa      	ldr	r2, [r7, #28]
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	617b      	str	r3, [r7, #20]
   return(result);
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e5      	bne.n	800930e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009342:	e002      	b.n	800934a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009344:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009346:	f7ff ff8f 	bl	8009268 <HAL_UART_TxCpltCallback>
}
 800934a:	bf00      	nop
 800934c:	3740      	adds	r7, #64	@ 0x40
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800935e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f7ff ff8b 	bl	800927c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b09c      	sub	sp, #112	@ 0x70
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009386:	2b00      	cmp	r3, #0
 8009388:	d172      	bne.n	8009470 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800938a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800938c:	2200      	movs	r2, #0
 800938e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	330c      	adds	r3, #12
 8009396:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80093a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	330c      	adds	r3, #12
 80093ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80093b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80093b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80093b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093b8:	e841 2300 	strex	r3, r2, [r1]
 80093bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80093be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e5      	bne.n	8009390 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3314      	adds	r3, #20
 80093ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d6:	f023 0301 	bic.w	r3, r3, #1
 80093da:	667b      	str	r3, [r7, #100]	@ 0x64
 80093dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3314      	adds	r3, #20
 80093e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80093e4:	647a      	str	r2, [r7, #68]	@ 0x44
 80093e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e5      	bne.n	80093c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	3314      	adds	r3, #20
 80093fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	623b      	str	r3, [r7, #32]
   return(result);
 8009408:	6a3b      	ldr	r3, [r7, #32]
 800940a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800940e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3314      	adds	r3, #20
 8009416:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009418:	633a      	str	r2, [r7, #48]	@ 0x30
 800941a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800941e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e5      	bne.n	80093f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800942c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800942e:	2220      	movs	r2, #32
 8009430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009438:	2b01      	cmp	r3, #1
 800943a:	d119      	bne.n	8009470 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800943c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	330c      	adds	r3, #12
 8009442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	60fb      	str	r3, [r7, #12]
   return(result);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f023 0310 	bic.w	r3, r3, #16
 8009452:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	330c      	adds	r3, #12
 800945a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800945c:	61fa      	str	r2, [r7, #28]
 800945e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	69b9      	ldr	r1, [r7, #24]
 8009462:	69fa      	ldr	r2, [r7, #28]
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	617b      	str	r3, [r7, #20]
   return(result);
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e5      	bne.n	800943c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009474:	2b01      	cmp	r3, #1
 8009476:	d106      	bne.n	8009486 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009478:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800947a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800947c:	4619      	mov	r1, r3
 800947e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009480:	f7f9 fc28 	bl	8002cd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009484:	e002      	b.n	800948c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009486:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009488:	f7f9 fd48 	bl	8002f1c <HAL_UART_RxCpltCallback>
}
 800948c:	bf00      	nop
 800948e:	3770      	adds	r7, #112	@ 0x70
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d108      	bne.n	80094bc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80094ae:	085b      	lsrs	r3, r3, #1
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	4619      	mov	r1, r3
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f7f9 fc0d 	bl	8002cd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094ba:	e002      	b.n	80094c2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f7ff fee7 	bl	8009290 <HAL_UART_RxHalfCpltCallback>
}
 80094c2:	bf00      	nop
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094e6:	2b80      	cmp	r3, #128	@ 0x80
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b21      	cmp	r3, #33	@ 0x21
 80094fc:	d108      	bne.n	8009510 <UART_DMAError+0x46>
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2200      	movs	r2, #0
 8009508:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800950a:	68b8      	ldr	r0, [r7, #8]
 800950c:	f000 f8c6 	bl	800969c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951a:	2b40      	cmp	r3, #64	@ 0x40
 800951c:	bf0c      	ite	eq
 800951e:	2301      	moveq	r3, #1
 8009520:	2300      	movne	r3, #0
 8009522:	b2db      	uxtb	r3, r3
 8009524:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800952c:	b2db      	uxtb	r3, r3
 800952e:	2b22      	cmp	r3, #34	@ 0x22
 8009530:	d108      	bne.n	8009544 <UART_DMAError+0x7a>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d005      	beq.n	8009544 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2200      	movs	r2, #0
 800953c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800953e:	68b8      	ldr	r0, [r7, #8]
 8009540:	f000 f8d4 	bl	80096ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009548:	f043 0210 	orr.w	r2, r3, #16
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009550:	68b8      	ldr	r0, [r7, #8]
 8009552:	f7ff fea7 	bl	80092a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
	...

08009560 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b098      	sub	sp, #96	@ 0x60
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4613      	mov	r3, r2
 800956c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	88fa      	ldrh	r2, [r7, #6]
 8009578:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2222      	movs	r2, #34	@ 0x22
 8009584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800958c:	4a40      	ldr	r2, [pc, #256]	@ (8009690 <UART_Start_Receive_DMA+0x130>)
 800958e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009594:	4a3f      	ldr	r2, [pc, #252]	@ (8009694 <UART_Start_Receive_DMA+0x134>)
 8009596:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959c:	4a3e      	ldr	r2, [pc, #248]	@ (8009698 <UART_Start_Receive_DMA+0x138>)
 800959e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a4:	2200      	movs	r2, #0
 80095a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80095a8:	f107 0308 	add.w	r3, r7, #8
 80095ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4619      	mov	r1, r3
 80095ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	88fb      	ldrh	r3, [r7, #6]
 80095c0:	f7fb ff62 	bl	8005488 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80095c4:	2300      	movs	r3, #0
 80095c6:	613b      	str	r3, [r7, #16]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	613b      	str	r3, [r7, #16]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	691b      	ldr	r3, [r3, #16]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d019      	beq.n	800961e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	330c      	adds	r3, #12
 80095f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095f4:	e853 3f00 	ldrex	r3, [r3]
 80095f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009600:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	330c      	adds	r3, #12
 8009608:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800960a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800960c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009612:	e841 2300 	strex	r3, r2, [r1]
 8009616:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1e5      	bne.n	80095ea <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3314      	adds	r3, #20
 8009624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	657b      	str	r3, [r7, #84]	@ 0x54
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3314      	adds	r3, #20
 800963c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800963e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009640:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e5      	bne.n	800961e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3314      	adds	r3, #20
 8009658:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	617b      	str	r3, [r7, #20]
   return(result);
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009668:	653b      	str	r3, [r7, #80]	@ 0x50
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3314      	adds	r3, #20
 8009670:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009672:	627a      	str	r2, [r7, #36]	@ 0x24
 8009674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	6a39      	ldr	r1, [r7, #32]
 8009678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009680:	69fb      	ldr	r3, [r7, #28]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e5      	bne.n	8009652 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3760      	adds	r7, #96	@ 0x60
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	0800936f 	.word	0x0800936f
 8009694:	08009495 	.word	0x08009495
 8009698:	080094cb 	.word	0x080094cb

0800969c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800969c:	b480      	push	{r7}
 800969e:	b089      	sub	sp, #36	@ 0x24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	330c      	adds	r3, #12
 80096aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80096ba:	61fb      	str	r3, [r7, #28]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	330c      	adds	r3, #12
 80096c2:	69fa      	ldr	r2, [r7, #28]
 80096c4:	61ba      	str	r2, [r7, #24]
 80096c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c8:	6979      	ldr	r1, [r7, #20]
 80096ca:	69ba      	ldr	r2, [r7, #24]
 80096cc:	e841 2300 	strex	r3, r2, [r1]
 80096d0:	613b      	str	r3, [r7, #16]
   return(result);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e5      	bne.n	80096a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2220      	movs	r2, #32
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80096e0:	bf00      	nop
 80096e2:	3724      	adds	r7, #36	@ 0x24
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b095      	sub	sp, #84	@ 0x54
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	330c      	adds	r3, #12
 80096fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fe:	e853 3f00 	ldrex	r3, [r3]
 8009702:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800970a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	330c      	adds	r3, #12
 8009712:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009714:	643a      	str	r2, [r7, #64]	@ 0x40
 8009716:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800971a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e5      	bne.n	80096f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3314      	adds	r3, #20
 800972e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	61fb      	str	r3, [r7, #28]
   return(result);
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	f023 0301 	bic.w	r3, r3, #1
 800973e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3314      	adds	r3, #20
 8009746:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009748:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800974a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800974e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e5      	bne.n	8009728 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009760:	2b01      	cmp	r3, #1
 8009762:	d119      	bne.n	8009798 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	330c      	adds	r3, #12
 800976a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	60bb      	str	r3, [r7, #8]
   return(result);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f023 0310 	bic.w	r3, r3, #16
 800977a:	647b      	str	r3, [r7, #68]	@ 0x44
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	330c      	adds	r3, #12
 8009782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009784:	61ba      	str	r2, [r7, #24]
 8009786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	6979      	ldr	r1, [r7, #20]
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	613b      	str	r3, [r7, #16]
   return(result);
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e5      	bne.n	8009764 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80097a6:	bf00      	nop
 80097a8:	3754      	adds	r7, #84	@ 0x54
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f7ff fd69 	bl	80092a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80097da:	b480      	push	{r7}
 80097dc:	b085      	sub	sp, #20
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b21      	cmp	r3, #33	@ 0x21
 80097ec:	d13e      	bne.n	800986c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097f6:	d114      	bne.n	8009822 <UART_Transmit_IT+0x48>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d110      	bne.n	8009822 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009814:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	1c9a      	adds	r2, r3, #2
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	621a      	str	r2, [r3, #32]
 8009820:	e008      	b.n	8009834 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	1c59      	adds	r1, r3, #1
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6211      	str	r1, [r2, #32]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009838:	b29b      	uxth	r3, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	b29b      	uxth	r3, r3
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	4619      	mov	r1, r3
 8009842:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10f      	bne.n	8009868 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009856:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009866:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	e000      	b.n	800986e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800986c:	2302      	movs	r3, #2
  }
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009890:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff fce4 	bl	8009268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b08c      	sub	sp, #48	@ 0x30
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b22      	cmp	r3, #34	@ 0x22
 80098bc:	f040 80ab 	bne.w	8009a16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098c8:	d117      	bne.n	80098fa <UART_Receive_IT+0x50>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d113      	bne.n	80098fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098da:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098f2:	1c9a      	adds	r2, r3, #2
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80098f8:	e026      	b.n	8009948 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009900:	2300      	movs	r3, #0
 8009902:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800990c:	d007      	beq.n	800991e <UART_Receive_IT+0x74>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <UART_Receive_IT+0x82>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	b2da      	uxtb	r2, r3
 8009926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	e008      	b.n	800993e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009938:	b2da      	uxtb	r2, r3
 800993a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800993c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800994c:	b29b      	uxth	r3, r3
 800994e:	3b01      	subs	r3, #1
 8009950:	b29b      	uxth	r3, r3
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	4619      	mov	r1, r3
 8009956:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009958:	2b00      	cmp	r3, #0
 800995a:	d15a      	bne.n	8009a12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68da      	ldr	r2, [r3, #12]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f022 0220 	bic.w	r2, r2, #32
 800996a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68da      	ldr	r2, [r3, #12]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800997a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695a      	ldr	r2, [r3, #20]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f022 0201 	bic.w	r2, r2, #1
 800998a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009998:	2b01      	cmp	r3, #1
 800999a:	d135      	bne.n	8009a08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	330c      	adds	r3, #12
 80099a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	e853 3f00 	ldrex	r3, [r3]
 80099b0:	613b      	str	r3, [r7, #16]
   return(result);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f023 0310 	bic.w	r3, r3, #16
 80099b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	330c      	adds	r3, #12
 80099c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099c2:	623a      	str	r2, [r7, #32]
 80099c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c6:	69f9      	ldr	r1, [r7, #28]
 80099c8:	6a3a      	ldr	r2, [r7, #32]
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1e5      	bne.n	80099a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d10a      	bne.n	80099fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7f9 f967 	bl	8002cd4 <HAL_UARTEx_RxEventCallback>
 8009a06:	e002      	b.n	8009a0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7f9 fa87 	bl	8002f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e002      	b.n	8009a18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e000      	b.n	8009a18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009a16:	2302      	movs	r3, #2
  }
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3730      	adds	r7, #48	@ 0x30
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a24:	b0c0      	sub	sp, #256	@ 0x100
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a3c:	68d9      	ldr	r1, [r3, #12]
 8009a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	ea40 0301 	orr.w	r3, r0, r1
 8009a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009a78:	f021 010c 	bic.w	r1, r1, #12
 8009a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009a86:	430b      	orrs	r3, r1
 8009a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a9a:	6999      	ldr	r1, [r3, #24]
 8009a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	ea40 0301 	orr.w	r3, r0, r1
 8009aa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	4b8f      	ldr	r3, [pc, #572]	@ (8009cec <UART_SetConfig+0x2cc>)
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d005      	beq.n	8009ac0 <UART_SetConfig+0xa0>
 8009ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	4b8d      	ldr	r3, [pc, #564]	@ (8009cf0 <UART_SetConfig+0x2d0>)
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d104      	bne.n	8009aca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ac0:	f7fd ff34 	bl	800792c <HAL_RCC_GetPCLK2Freq>
 8009ac4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009ac8:	e003      	b.n	8009ad2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009aca:	f7fd ff1b 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 8009ace:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009adc:	f040 810c 	bne.w	8009cf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009aea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009aee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009af2:	4622      	mov	r2, r4
 8009af4:	462b      	mov	r3, r5
 8009af6:	1891      	adds	r1, r2, r2
 8009af8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009afa:	415b      	adcs	r3, r3
 8009afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009b02:	4621      	mov	r1, r4
 8009b04:	eb12 0801 	adds.w	r8, r2, r1
 8009b08:	4629      	mov	r1, r5
 8009b0a:	eb43 0901 	adc.w	r9, r3, r1
 8009b0e:	f04f 0200 	mov.w	r2, #0
 8009b12:	f04f 0300 	mov.w	r3, #0
 8009b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b22:	4690      	mov	r8, r2
 8009b24:	4699      	mov	r9, r3
 8009b26:	4623      	mov	r3, r4
 8009b28:	eb18 0303 	adds.w	r3, r8, r3
 8009b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009b30:	462b      	mov	r3, r5
 8009b32:	eb49 0303 	adc.w	r3, r9, r3
 8009b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009b46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009b4e:	460b      	mov	r3, r1
 8009b50:	18db      	adds	r3, r3, r3
 8009b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b54:	4613      	mov	r3, r2
 8009b56:	eb42 0303 	adc.w	r3, r2, r3
 8009b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009b60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009b64:	f7f7 f814 	bl	8000b90 <__aeabi_uldivmod>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4b61      	ldr	r3, [pc, #388]	@ (8009cf4 <UART_SetConfig+0x2d4>)
 8009b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8009b72:	095b      	lsrs	r3, r3, #5
 8009b74:	011c      	lsls	r4, r3, #4
 8009b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009b80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009b84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009b88:	4642      	mov	r2, r8
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	1891      	adds	r1, r2, r2
 8009b8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009b90:	415b      	adcs	r3, r3
 8009b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009b98:	4641      	mov	r1, r8
 8009b9a:	eb12 0a01 	adds.w	sl, r2, r1
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	eb43 0b01 	adc.w	fp, r3, r1
 8009ba4:	f04f 0200 	mov.w	r2, #0
 8009ba8:	f04f 0300 	mov.w	r3, #0
 8009bac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009bb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bb8:	4692      	mov	sl, r2
 8009bba:	469b      	mov	fp, r3
 8009bbc:	4643      	mov	r3, r8
 8009bbe:	eb1a 0303 	adds.w	r3, sl, r3
 8009bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009bc6:	464b      	mov	r3, r9
 8009bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8009bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009be0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009be4:	460b      	mov	r3, r1
 8009be6:	18db      	adds	r3, r3, r3
 8009be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bea:	4613      	mov	r3, r2
 8009bec:	eb42 0303 	adc.w	r3, r2, r3
 8009bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009bf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009bfa:	f7f6 ffc9 	bl	8000b90 <__aeabi_uldivmod>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4611      	mov	r1, r2
 8009c04:	4b3b      	ldr	r3, [pc, #236]	@ (8009cf4 <UART_SetConfig+0x2d4>)
 8009c06:	fba3 2301 	umull	r2, r3, r3, r1
 8009c0a:	095b      	lsrs	r3, r3, #5
 8009c0c:	2264      	movs	r2, #100	@ 0x64
 8009c0e:	fb02 f303 	mul.w	r3, r2, r3
 8009c12:	1acb      	subs	r3, r1, r3
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009c1a:	4b36      	ldr	r3, [pc, #216]	@ (8009cf4 <UART_SetConfig+0x2d4>)
 8009c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8009c20:	095b      	lsrs	r3, r3, #5
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009c28:	441c      	add	r4, r3
 8009c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009c38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	464b      	mov	r3, r9
 8009c40:	1891      	adds	r1, r2, r2
 8009c42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009c44:	415b      	adcs	r3, r3
 8009c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009c4c:	4641      	mov	r1, r8
 8009c4e:	1851      	adds	r1, r2, r1
 8009c50:	6339      	str	r1, [r7, #48]	@ 0x30
 8009c52:	4649      	mov	r1, r9
 8009c54:	414b      	adcs	r3, r1
 8009c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	f04f 0300 	mov.w	r3, #0
 8009c60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009c64:	4659      	mov	r1, fp
 8009c66:	00cb      	lsls	r3, r1, #3
 8009c68:	4651      	mov	r1, sl
 8009c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c6e:	4651      	mov	r1, sl
 8009c70:	00ca      	lsls	r2, r1, #3
 8009c72:	4610      	mov	r0, r2
 8009c74:	4619      	mov	r1, r3
 8009c76:	4603      	mov	r3, r0
 8009c78:	4642      	mov	r2, r8
 8009c7a:	189b      	adds	r3, r3, r2
 8009c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009c80:	464b      	mov	r3, r9
 8009c82:	460a      	mov	r2, r1
 8009c84:	eb42 0303 	adc.w	r3, r2, r3
 8009c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009c98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009c9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	18db      	adds	r3, r3, r3
 8009ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	eb42 0303 	adc.w	r3, r2, r3
 8009cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009cb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009cb6:	f7f6 ff6b 	bl	8000b90 <__aeabi_uldivmod>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf4 <UART_SetConfig+0x2d4>)
 8009cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8009cc4:	095b      	lsrs	r3, r3, #5
 8009cc6:	2164      	movs	r1, #100	@ 0x64
 8009cc8:	fb01 f303 	mul.w	r3, r1, r3
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	3332      	adds	r3, #50	@ 0x32
 8009cd2:	4a08      	ldr	r2, [pc, #32]	@ (8009cf4 <UART_SetConfig+0x2d4>)
 8009cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd8:	095b      	lsrs	r3, r3, #5
 8009cda:	f003 0207 	and.w	r2, r3, #7
 8009cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4422      	add	r2, r4
 8009ce6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ce8:	e106      	b.n	8009ef8 <UART_SetConfig+0x4d8>
 8009cea:	bf00      	nop
 8009cec:	40011000 	.word	0x40011000
 8009cf0:	40011400 	.word	0x40011400
 8009cf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009d06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009d0a:	4642      	mov	r2, r8
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	1891      	adds	r1, r2, r2
 8009d10:	6239      	str	r1, [r7, #32]
 8009d12:	415b      	adcs	r3, r3
 8009d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d1a:	4641      	mov	r1, r8
 8009d1c:	1854      	adds	r4, r2, r1
 8009d1e:	4649      	mov	r1, r9
 8009d20:	eb43 0501 	adc.w	r5, r3, r1
 8009d24:	f04f 0200 	mov.w	r2, #0
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	00eb      	lsls	r3, r5, #3
 8009d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d32:	00e2      	lsls	r2, r4, #3
 8009d34:	4614      	mov	r4, r2
 8009d36:	461d      	mov	r5, r3
 8009d38:	4643      	mov	r3, r8
 8009d3a:	18e3      	adds	r3, r4, r3
 8009d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009d40:	464b      	mov	r3, r9
 8009d42:	eb45 0303 	adc.w	r3, r5, r3
 8009d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009d5a:	f04f 0200 	mov.w	r2, #0
 8009d5e:	f04f 0300 	mov.w	r3, #0
 8009d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009d66:	4629      	mov	r1, r5
 8009d68:	008b      	lsls	r3, r1, #2
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d70:	4621      	mov	r1, r4
 8009d72:	008a      	lsls	r2, r1, #2
 8009d74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009d78:	f7f6 ff0a 	bl	8000b90 <__aeabi_uldivmod>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4b60      	ldr	r3, [pc, #384]	@ (8009f04 <UART_SetConfig+0x4e4>)
 8009d82:	fba3 2302 	umull	r2, r3, r3, r2
 8009d86:	095b      	lsrs	r3, r3, #5
 8009d88:	011c      	lsls	r4, r3, #4
 8009d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009d98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	464b      	mov	r3, r9
 8009da0:	1891      	adds	r1, r2, r2
 8009da2:	61b9      	str	r1, [r7, #24]
 8009da4:	415b      	adcs	r3, r3
 8009da6:	61fb      	str	r3, [r7, #28]
 8009da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dac:	4641      	mov	r1, r8
 8009dae:	1851      	adds	r1, r2, r1
 8009db0:	6139      	str	r1, [r7, #16]
 8009db2:	4649      	mov	r1, r9
 8009db4:	414b      	adcs	r3, r1
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	f04f 0200 	mov.w	r2, #0
 8009dbc:	f04f 0300 	mov.w	r3, #0
 8009dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009dc4:	4659      	mov	r1, fp
 8009dc6:	00cb      	lsls	r3, r1, #3
 8009dc8:	4651      	mov	r1, sl
 8009dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dce:	4651      	mov	r1, sl
 8009dd0:	00ca      	lsls	r2, r1, #3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4642      	mov	r2, r8
 8009dda:	189b      	adds	r3, r3, r2
 8009ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009de0:	464b      	mov	r3, r9
 8009de2:	460a      	mov	r2, r1
 8009de4:	eb42 0303 	adc.w	r3, r2, r3
 8009de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009df6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009df8:	f04f 0200 	mov.w	r2, #0
 8009dfc:	f04f 0300 	mov.w	r3, #0
 8009e00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009e04:	4649      	mov	r1, r9
 8009e06:	008b      	lsls	r3, r1, #2
 8009e08:	4641      	mov	r1, r8
 8009e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e0e:	4641      	mov	r1, r8
 8009e10:	008a      	lsls	r2, r1, #2
 8009e12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009e16:	f7f6 febb 	bl	8000b90 <__aeabi_uldivmod>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	4611      	mov	r1, r2
 8009e20:	4b38      	ldr	r3, [pc, #224]	@ (8009f04 <UART_SetConfig+0x4e4>)
 8009e22:	fba3 2301 	umull	r2, r3, r3, r1
 8009e26:	095b      	lsrs	r3, r3, #5
 8009e28:	2264      	movs	r2, #100	@ 0x64
 8009e2a:	fb02 f303 	mul.w	r3, r2, r3
 8009e2e:	1acb      	subs	r3, r1, r3
 8009e30:	011b      	lsls	r3, r3, #4
 8009e32:	3332      	adds	r3, #50	@ 0x32
 8009e34:	4a33      	ldr	r2, [pc, #204]	@ (8009f04 <UART_SetConfig+0x4e4>)
 8009e36:	fba2 2303 	umull	r2, r3, r2, r3
 8009e3a:	095b      	lsrs	r3, r3, #5
 8009e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009e40:	441c      	add	r4, r3
 8009e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e46:	2200      	movs	r2, #0
 8009e48:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8009e4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009e50:	4642      	mov	r2, r8
 8009e52:	464b      	mov	r3, r9
 8009e54:	1891      	adds	r1, r2, r2
 8009e56:	60b9      	str	r1, [r7, #8]
 8009e58:	415b      	adcs	r3, r3
 8009e5a:	60fb      	str	r3, [r7, #12]
 8009e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e60:	4641      	mov	r1, r8
 8009e62:	1851      	adds	r1, r2, r1
 8009e64:	6039      	str	r1, [r7, #0]
 8009e66:	4649      	mov	r1, r9
 8009e68:	414b      	adcs	r3, r1
 8009e6a:	607b      	str	r3, [r7, #4]
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	f04f 0300 	mov.w	r3, #0
 8009e74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e78:	4659      	mov	r1, fp
 8009e7a:	00cb      	lsls	r3, r1, #3
 8009e7c:	4651      	mov	r1, sl
 8009e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e82:	4651      	mov	r1, sl
 8009e84:	00ca      	lsls	r2, r1, #3
 8009e86:	4610      	mov	r0, r2
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	189b      	adds	r3, r3, r2
 8009e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e92:	464b      	mov	r3, r9
 8009e94:	460a      	mov	r2, r1
 8009e96:	eb42 0303 	adc.w	r3, r2, r3
 8009e9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ea6:	667a      	str	r2, [r7, #100]	@ 0x64
 8009ea8:	f04f 0200 	mov.w	r2, #0
 8009eac:	f04f 0300 	mov.w	r3, #0
 8009eb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	008b      	lsls	r3, r1, #2
 8009eb8:	4641      	mov	r1, r8
 8009eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ebe:	4641      	mov	r1, r8
 8009ec0:	008a      	lsls	r2, r1, #2
 8009ec2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009ec6:	f7f6 fe63 	bl	8000b90 <__aeabi_uldivmod>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	460b      	mov	r3, r1
 8009ece:	4b0d      	ldr	r3, [pc, #52]	@ (8009f04 <UART_SetConfig+0x4e4>)
 8009ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8009ed4:	095b      	lsrs	r3, r3, #5
 8009ed6:	2164      	movs	r1, #100	@ 0x64
 8009ed8:	fb01 f303 	mul.w	r3, r1, r3
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	011b      	lsls	r3, r3, #4
 8009ee0:	3332      	adds	r3, #50	@ 0x32
 8009ee2:	4a08      	ldr	r2, [pc, #32]	@ (8009f04 <UART_SetConfig+0x4e4>)
 8009ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee8:	095b      	lsrs	r3, r3, #5
 8009eea:	f003 020f 	and.w	r2, r3, #15
 8009eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4422      	add	r2, r4
 8009ef6:	609a      	str	r2, [r3, #8]
}
 8009ef8:	bf00      	nop
 8009efa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009efe:	46bd      	mov	sp, r7
 8009f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f04:	51eb851f 	.word	0x51eb851f

08009f08 <memset>:
 8009f08:	4402      	add	r2, r0
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d100      	bne.n	8009f12 <memset+0xa>
 8009f10:	4770      	bx	lr
 8009f12:	f803 1b01 	strb.w	r1, [r3], #1
 8009f16:	e7f9      	b.n	8009f0c <memset+0x4>

08009f18 <__errno>:
 8009f18:	4b01      	ldr	r3, [pc, #4]	@ (8009f20 <__errno+0x8>)
 8009f1a:	6818      	ldr	r0, [r3, #0]
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	20000064 	.word	0x20000064

08009f24 <__libc_init_array>:
 8009f24:	b570      	push	{r4, r5, r6, lr}
 8009f26:	4d0d      	ldr	r5, [pc, #52]	@ (8009f5c <__libc_init_array+0x38>)
 8009f28:	4c0d      	ldr	r4, [pc, #52]	@ (8009f60 <__libc_init_array+0x3c>)
 8009f2a:	1b64      	subs	r4, r4, r5
 8009f2c:	10a4      	asrs	r4, r4, #2
 8009f2e:	2600      	movs	r6, #0
 8009f30:	42a6      	cmp	r6, r4
 8009f32:	d109      	bne.n	8009f48 <__libc_init_array+0x24>
 8009f34:	4d0b      	ldr	r5, [pc, #44]	@ (8009f64 <__libc_init_array+0x40>)
 8009f36:	4c0c      	ldr	r4, [pc, #48]	@ (8009f68 <__libc_init_array+0x44>)
 8009f38:	f002 fa12 	bl	800c360 <_init>
 8009f3c:	1b64      	subs	r4, r4, r5
 8009f3e:	10a4      	asrs	r4, r4, #2
 8009f40:	2600      	movs	r6, #0
 8009f42:	42a6      	cmp	r6, r4
 8009f44:	d105      	bne.n	8009f52 <__libc_init_array+0x2e>
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f4c:	4798      	blx	r3
 8009f4e:	3601      	adds	r6, #1
 8009f50:	e7ee      	b.n	8009f30 <__libc_init_array+0xc>
 8009f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f56:	4798      	blx	r3
 8009f58:	3601      	adds	r6, #1
 8009f5a:	e7f2      	b.n	8009f42 <__libc_init_array+0x1e>
 8009f5c:	0800c670 	.word	0x0800c670
 8009f60:	0800c670 	.word	0x0800c670
 8009f64:	0800c670 	.word	0x0800c670
 8009f68:	0800c674 	.word	0x0800c674

08009f6c <memcpy>:
 8009f6c:	440a      	add	r2, r1
 8009f6e:	4291      	cmp	r1, r2
 8009f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f74:	d100      	bne.n	8009f78 <memcpy+0xc>
 8009f76:	4770      	bx	lr
 8009f78:	b510      	push	{r4, lr}
 8009f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f82:	4291      	cmp	r1, r2
 8009f84:	d1f9      	bne.n	8009f7a <memcpy+0xe>
 8009f86:	bd10      	pop	{r4, pc}

08009f88 <atan2>:
 8009f88:	f000 bd52 	b.w	800aa30 <__ieee754_atan2>

08009f8c <pow>:
 8009f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8e:	ed2d 8b02 	vpush	{d8}
 8009f92:	eeb0 8a40 	vmov.f32	s16, s0
 8009f96:	eef0 8a60 	vmov.f32	s17, s1
 8009f9a:	ec55 4b11 	vmov	r4, r5, d1
 8009f9e:	f000 fe0f 	bl	800abc0 <__ieee754_pow>
 8009fa2:	4622      	mov	r2, r4
 8009fa4:	462b      	mov	r3, r5
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	ec57 6b10 	vmov	r6, r7, d0
 8009fae:	f7f6 fd61 	bl	8000a74 <__aeabi_dcmpun>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d13b      	bne.n	800a02e <pow+0xa2>
 8009fb6:	ec51 0b18 	vmov	r0, r1, d8
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f7f6 fd27 	bl	8000a10 <__aeabi_dcmpeq>
 8009fc2:	b1b8      	cbz	r0, 8009ff4 <pow+0x68>
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	4620      	mov	r0, r4
 8009fca:	4629      	mov	r1, r5
 8009fcc:	f7f6 fd20 	bl	8000a10 <__aeabi_dcmpeq>
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d146      	bne.n	800a062 <pow+0xd6>
 8009fd4:	ec45 4b10 	vmov	d0, r4, r5
 8009fd8:	f000 fabe 	bl	800a558 <finite>
 8009fdc:	b338      	cbz	r0, 800a02e <pow+0xa2>
 8009fde:	2200      	movs	r2, #0
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	4620      	mov	r0, r4
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7f6 fd1d 	bl	8000a24 <__aeabi_dcmplt>
 8009fea:	b300      	cbz	r0, 800a02e <pow+0xa2>
 8009fec:	f7ff ff94 	bl	8009f18 <__errno>
 8009ff0:	2322      	movs	r3, #34	@ 0x22
 8009ff2:	e01b      	b.n	800a02c <pow+0xa0>
 8009ff4:	ec47 6b10 	vmov	d0, r6, r7
 8009ff8:	f000 faae 	bl	800a558 <finite>
 8009ffc:	b9e0      	cbnz	r0, 800a038 <pow+0xac>
 8009ffe:	eeb0 0a48 	vmov.f32	s0, s16
 800a002:	eef0 0a68 	vmov.f32	s1, s17
 800a006:	f000 faa7 	bl	800a558 <finite>
 800a00a:	b1a8      	cbz	r0, 800a038 <pow+0xac>
 800a00c:	ec45 4b10 	vmov	d0, r4, r5
 800a010:	f000 faa2 	bl	800a558 <finite>
 800a014:	b180      	cbz	r0, 800a038 <pow+0xac>
 800a016:	4632      	mov	r2, r6
 800a018:	463b      	mov	r3, r7
 800a01a:	4630      	mov	r0, r6
 800a01c:	4639      	mov	r1, r7
 800a01e:	f7f6 fd29 	bl	8000a74 <__aeabi_dcmpun>
 800a022:	2800      	cmp	r0, #0
 800a024:	d0e2      	beq.n	8009fec <pow+0x60>
 800a026:	f7ff ff77 	bl	8009f18 <__errno>
 800a02a:	2321      	movs	r3, #33	@ 0x21
 800a02c:	6003      	str	r3, [r0, #0]
 800a02e:	ecbd 8b02 	vpop	{d8}
 800a032:	ec47 6b10 	vmov	d0, r6, r7
 800a036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a038:	2200      	movs	r2, #0
 800a03a:	2300      	movs	r3, #0
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	f7f6 fce6 	bl	8000a10 <__aeabi_dcmpeq>
 800a044:	2800      	cmp	r0, #0
 800a046:	d0f2      	beq.n	800a02e <pow+0xa2>
 800a048:	eeb0 0a48 	vmov.f32	s0, s16
 800a04c:	eef0 0a68 	vmov.f32	s1, s17
 800a050:	f000 fa82 	bl	800a558 <finite>
 800a054:	2800      	cmp	r0, #0
 800a056:	d0ea      	beq.n	800a02e <pow+0xa2>
 800a058:	ec45 4b10 	vmov	d0, r4, r5
 800a05c:	f000 fa7c 	bl	800a558 <finite>
 800a060:	e7c3      	b.n	8009fea <pow+0x5e>
 800a062:	4f01      	ldr	r7, [pc, #4]	@ (800a068 <pow+0xdc>)
 800a064:	2600      	movs	r6, #0
 800a066:	e7e2      	b.n	800a02e <pow+0xa2>
 800a068:	3ff00000 	.word	0x3ff00000

0800a06c <sqrt>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	ed2d 8b02 	vpush	{d8}
 800a072:	ec55 4b10 	vmov	r4, r5, d0
 800a076:	f000 fa7b 	bl	800a570 <__ieee754_sqrt>
 800a07a:	4622      	mov	r2, r4
 800a07c:	462b      	mov	r3, r5
 800a07e:	4620      	mov	r0, r4
 800a080:	4629      	mov	r1, r5
 800a082:	eeb0 8a40 	vmov.f32	s16, s0
 800a086:	eef0 8a60 	vmov.f32	s17, s1
 800a08a:	f7f6 fcf3 	bl	8000a74 <__aeabi_dcmpun>
 800a08e:	b990      	cbnz	r0, 800a0b6 <sqrt+0x4a>
 800a090:	2200      	movs	r2, #0
 800a092:	2300      	movs	r3, #0
 800a094:	4620      	mov	r0, r4
 800a096:	4629      	mov	r1, r5
 800a098:	f7f6 fcc4 	bl	8000a24 <__aeabi_dcmplt>
 800a09c:	b158      	cbz	r0, 800a0b6 <sqrt+0x4a>
 800a09e:	f7ff ff3b 	bl	8009f18 <__errno>
 800a0a2:	2321      	movs	r3, #33	@ 0x21
 800a0a4:	6003      	str	r3, [r0, #0]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	f7f6 fb71 	bl	8000794 <__aeabi_ddiv>
 800a0b2:	ec41 0b18 	vmov	d8, r0, r1
 800a0b6:	eeb0 0a48 	vmov.f32	s0, s16
 800a0ba:	eef0 0a68 	vmov.f32	s1, s17
 800a0be:	ecbd 8b02 	vpop	{d8}
 800a0c2:	bd38      	pop	{r3, r4, r5, pc}
 800a0c4:	0000      	movs	r0, r0
	...

0800a0c8 <atan>:
 800a0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	ec55 4b10 	vmov	r4, r5, d0
 800a0d0:	4bbf      	ldr	r3, [pc, #764]	@ (800a3d0 <atan+0x308>)
 800a0d2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a0d6:	429e      	cmp	r6, r3
 800a0d8:	46ab      	mov	fp, r5
 800a0da:	d918      	bls.n	800a10e <atan+0x46>
 800a0dc:	4bbd      	ldr	r3, [pc, #756]	@ (800a3d4 <atan+0x30c>)
 800a0de:	429e      	cmp	r6, r3
 800a0e0:	d801      	bhi.n	800a0e6 <atan+0x1e>
 800a0e2:	d109      	bne.n	800a0f8 <atan+0x30>
 800a0e4:	b144      	cbz	r4, 800a0f8 <atan+0x30>
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	462b      	mov	r3, r5
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	f7f6 f871 	bl	80001d4 <__adddf3>
 800a0f2:	4604      	mov	r4, r0
 800a0f4:	460d      	mov	r5, r1
 800a0f6:	e006      	b.n	800a106 <atan+0x3e>
 800a0f8:	f1bb 0f00 	cmp.w	fp, #0
 800a0fc:	f340 812b 	ble.w	800a356 <atan+0x28e>
 800a100:	a597      	add	r5, pc, #604	@ (adr r5, 800a360 <atan+0x298>)
 800a102:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a106:	ec45 4b10 	vmov	d0, r4, r5
 800a10a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10e:	4bb2      	ldr	r3, [pc, #712]	@ (800a3d8 <atan+0x310>)
 800a110:	429e      	cmp	r6, r3
 800a112:	d813      	bhi.n	800a13c <atan+0x74>
 800a114:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a118:	429e      	cmp	r6, r3
 800a11a:	d80c      	bhi.n	800a136 <atan+0x6e>
 800a11c:	a392      	add	r3, pc, #584	@ (adr r3, 800a368 <atan+0x2a0>)
 800a11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 f855 	bl	80001d4 <__adddf3>
 800a12a:	4bac      	ldr	r3, [pc, #688]	@ (800a3dc <atan+0x314>)
 800a12c:	2200      	movs	r2, #0
 800a12e:	f7f6 fc97 	bl	8000a60 <__aeabi_dcmpgt>
 800a132:	2800      	cmp	r0, #0
 800a134:	d1e7      	bne.n	800a106 <atan+0x3e>
 800a136:	f04f 3aff 	mov.w	sl, #4294967295
 800a13a:	e029      	b.n	800a190 <atan+0xc8>
 800a13c:	f000 f9b0 	bl	800a4a0 <fabs>
 800a140:	4ba7      	ldr	r3, [pc, #668]	@ (800a3e0 <atan+0x318>)
 800a142:	429e      	cmp	r6, r3
 800a144:	ec55 4b10 	vmov	r4, r5, d0
 800a148:	f200 80bc 	bhi.w	800a2c4 <atan+0x1fc>
 800a14c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a150:	429e      	cmp	r6, r3
 800a152:	f200 809e 	bhi.w	800a292 <atan+0x1ca>
 800a156:	4622      	mov	r2, r4
 800a158:	462b      	mov	r3, r5
 800a15a:	4620      	mov	r0, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	f7f6 f839 	bl	80001d4 <__adddf3>
 800a162:	4b9e      	ldr	r3, [pc, #632]	@ (800a3dc <atan+0x314>)
 800a164:	2200      	movs	r2, #0
 800a166:	f7f6 f833 	bl	80001d0 <__aeabi_dsub>
 800a16a:	2200      	movs	r2, #0
 800a16c:	4606      	mov	r6, r0
 800a16e:	460f      	mov	r7, r1
 800a170:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a174:	4620      	mov	r0, r4
 800a176:	4629      	mov	r1, r5
 800a178:	f7f6 f82c 	bl	80001d4 <__adddf3>
 800a17c:	4602      	mov	r2, r0
 800a17e:	460b      	mov	r3, r1
 800a180:	4630      	mov	r0, r6
 800a182:	4639      	mov	r1, r7
 800a184:	f7f6 fb06 	bl	8000794 <__aeabi_ddiv>
 800a188:	f04f 0a00 	mov.w	sl, #0
 800a18c:	4604      	mov	r4, r0
 800a18e:	460d      	mov	r5, r1
 800a190:	4622      	mov	r2, r4
 800a192:	462b      	mov	r3, r5
 800a194:	4620      	mov	r0, r4
 800a196:	4629      	mov	r1, r5
 800a198:	f7f6 f9d2 	bl	8000540 <__aeabi_dmul>
 800a19c:	4602      	mov	r2, r0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4680      	mov	r8, r0
 800a1a2:	4689      	mov	r9, r1
 800a1a4:	f7f6 f9cc 	bl	8000540 <__aeabi_dmul>
 800a1a8:	a371      	add	r3, pc, #452	@ (adr r3, 800a370 <atan+0x2a8>)
 800a1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	460f      	mov	r7, r1
 800a1b2:	f7f6 f9c5 	bl	8000540 <__aeabi_dmul>
 800a1b6:	a370      	add	r3, pc, #448	@ (adr r3, 800a378 <atan+0x2b0>)
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	f7f6 f80a 	bl	80001d4 <__adddf3>
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	463b      	mov	r3, r7
 800a1c4:	f7f6 f9bc 	bl	8000540 <__aeabi_dmul>
 800a1c8:	a36d      	add	r3, pc, #436	@ (adr r3, 800a380 <atan+0x2b8>)
 800a1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ce:	f7f6 f801 	bl	80001d4 <__adddf3>
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	463b      	mov	r3, r7
 800a1d6:	f7f6 f9b3 	bl	8000540 <__aeabi_dmul>
 800a1da:	a36b      	add	r3, pc, #428	@ (adr r3, 800a388 <atan+0x2c0>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f5 fff8 	bl	80001d4 <__adddf3>
 800a1e4:	4632      	mov	r2, r6
 800a1e6:	463b      	mov	r3, r7
 800a1e8:	f7f6 f9aa 	bl	8000540 <__aeabi_dmul>
 800a1ec:	a368      	add	r3, pc, #416	@ (adr r3, 800a390 <atan+0x2c8>)
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	f7f5 ffef 	bl	80001d4 <__adddf3>
 800a1f6:	4632      	mov	r2, r6
 800a1f8:	463b      	mov	r3, r7
 800a1fa:	f7f6 f9a1 	bl	8000540 <__aeabi_dmul>
 800a1fe:	a366      	add	r3, pc, #408	@ (adr r3, 800a398 <atan+0x2d0>)
 800a200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a204:	f7f5 ffe6 	bl	80001d4 <__adddf3>
 800a208:	4642      	mov	r2, r8
 800a20a:	464b      	mov	r3, r9
 800a20c:	f7f6 f998 	bl	8000540 <__aeabi_dmul>
 800a210:	a363      	add	r3, pc, #396	@ (adr r3, 800a3a0 <atan+0x2d8>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	4680      	mov	r8, r0
 800a218:	4689      	mov	r9, r1
 800a21a:	4630      	mov	r0, r6
 800a21c:	4639      	mov	r1, r7
 800a21e:	f7f6 f98f 	bl	8000540 <__aeabi_dmul>
 800a222:	a361      	add	r3, pc, #388	@ (adr r3, 800a3a8 <atan+0x2e0>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f7f5 ffd2 	bl	80001d0 <__aeabi_dsub>
 800a22c:	4632      	mov	r2, r6
 800a22e:	463b      	mov	r3, r7
 800a230:	f7f6 f986 	bl	8000540 <__aeabi_dmul>
 800a234:	a35e      	add	r3, pc, #376	@ (adr r3, 800a3b0 <atan+0x2e8>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	f7f5 ffc9 	bl	80001d0 <__aeabi_dsub>
 800a23e:	4632      	mov	r2, r6
 800a240:	463b      	mov	r3, r7
 800a242:	f7f6 f97d 	bl	8000540 <__aeabi_dmul>
 800a246:	a35c      	add	r3, pc, #368	@ (adr r3, 800a3b8 <atan+0x2f0>)
 800a248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24c:	f7f5 ffc0 	bl	80001d0 <__aeabi_dsub>
 800a250:	4632      	mov	r2, r6
 800a252:	463b      	mov	r3, r7
 800a254:	f7f6 f974 	bl	8000540 <__aeabi_dmul>
 800a258:	a359      	add	r3, pc, #356	@ (adr r3, 800a3c0 <atan+0x2f8>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	f7f5 ffb7 	bl	80001d0 <__aeabi_dsub>
 800a262:	4632      	mov	r2, r6
 800a264:	463b      	mov	r3, r7
 800a266:	f7f6 f96b 	bl	8000540 <__aeabi_dmul>
 800a26a:	4602      	mov	r2, r0
 800a26c:	460b      	mov	r3, r1
 800a26e:	4640      	mov	r0, r8
 800a270:	4649      	mov	r1, r9
 800a272:	f7f5 ffaf 	bl	80001d4 <__adddf3>
 800a276:	4622      	mov	r2, r4
 800a278:	462b      	mov	r3, r5
 800a27a:	f7f6 f961 	bl	8000540 <__aeabi_dmul>
 800a27e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	d148      	bne.n	800a31a <atan+0x252>
 800a288:	4620      	mov	r0, r4
 800a28a:	4629      	mov	r1, r5
 800a28c:	f7f5 ffa0 	bl	80001d0 <__aeabi_dsub>
 800a290:	e72f      	b.n	800a0f2 <atan+0x2a>
 800a292:	4b52      	ldr	r3, [pc, #328]	@ (800a3dc <atan+0x314>)
 800a294:	2200      	movs	r2, #0
 800a296:	4620      	mov	r0, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	f7f5 ff99 	bl	80001d0 <__aeabi_dsub>
 800a29e:	4b4f      	ldr	r3, [pc, #316]	@ (800a3dc <atan+0x314>)
 800a2a0:	4606      	mov	r6, r0
 800a2a2:	460f      	mov	r7, r1
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	f7f5 ff93 	bl	80001d4 <__adddf3>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	4639      	mov	r1, r7
 800a2b6:	f7f6 fa6d 	bl	8000794 <__aeabi_ddiv>
 800a2ba:	f04f 0a01 	mov.w	sl, #1
 800a2be:	4604      	mov	r4, r0
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	e765      	b.n	800a190 <atan+0xc8>
 800a2c4:	4b47      	ldr	r3, [pc, #284]	@ (800a3e4 <atan+0x31c>)
 800a2c6:	429e      	cmp	r6, r3
 800a2c8:	d21c      	bcs.n	800a304 <atan+0x23c>
 800a2ca:	4b47      	ldr	r3, [pc, #284]	@ (800a3e8 <atan+0x320>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	4629      	mov	r1, r5
 800a2d2:	f7f5 ff7d 	bl	80001d0 <__aeabi_dsub>
 800a2d6:	4b44      	ldr	r3, [pc, #272]	@ (800a3e8 <atan+0x320>)
 800a2d8:	4606      	mov	r6, r0
 800a2da:	460f      	mov	r7, r1
 800a2dc:	2200      	movs	r2, #0
 800a2de:	4620      	mov	r0, r4
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	f7f6 f92d 	bl	8000540 <__aeabi_dmul>
 800a2e6:	4b3d      	ldr	r3, [pc, #244]	@ (800a3dc <atan+0x314>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f7f5 ff73 	bl	80001d4 <__adddf3>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	f7f6 fa4d 	bl	8000794 <__aeabi_ddiv>
 800a2fa:	f04f 0a02 	mov.w	sl, #2
 800a2fe:	4604      	mov	r4, r0
 800a300:	460d      	mov	r5, r1
 800a302:	e745      	b.n	800a190 <atan+0xc8>
 800a304:	4622      	mov	r2, r4
 800a306:	462b      	mov	r3, r5
 800a308:	4938      	ldr	r1, [pc, #224]	@ (800a3ec <atan+0x324>)
 800a30a:	2000      	movs	r0, #0
 800a30c:	f7f6 fa42 	bl	8000794 <__aeabi_ddiv>
 800a310:	f04f 0a03 	mov.w	sl, #3
 800a314:	4604      	mov	r4, r0
 800a316:	460d      	mov	r5, r1
 800a318:	e73a      	b.n	800a190 <atan+0xc8>
 800a31a:	4b35      	ldr	r3, [pc, #212]	@ (800a3f0 <atan+0x328>)
 800a31c:	4e35      	ldr	r6, [pc, #212]	@ (800a3f4 <atan+0x32c>)
 800a31e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	f7f5 ff53 	bl	80001d0 <__aeabi_dsub>
 800a32a:	4622      	mov	r2, r4
 800a32c:	462b      	mov	r3, r5
 800a32e:	f7f5 ff4f 	bl	80001d0 <__aeabi_dsub>
 800a332:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a33e:	f7f5 ff47 	bl	80001d0 <__aeabi_dsub>
 800a342:	f1bb 0f00 	cmp.w	fp, #0
 800a346:	4604      	mov	r4, r0
 800a348:	460d      	mov	r5, r1
 800a34a:	f6bf aedc 	bge.w	800a106 <atan+0x3e>
 800a34e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a352:	461d      	mov	r5, r3
 800a354:	e6d7      	b.n	800a106 <atan+0x3e>
 800a356:	a51c      	add	r5, pc, #112	@ (adr r5, 800a3c8 <atan+0x300>)
 800a358:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a35c:	e6d3      	b.n	800a106 <atan+0x3e>
 800a35e:	bf00      	nop
 800a360:	54442d18 	.word	0x54442d18
 800a364:	3ff921fb 	.word	0x3ff921fb
 800a368:	8800759c 	.word	0x8800759c
 800a36c:	7e37e43c 	.word	0x7e37e43c
 800a370:	e322da11 	.word	0xe322da11
 800a374:	3f90ad3a 	.word	0x3f90ad3a
 800a378:	24760deb 	.word	0x24760deb
 800a37c:	3fa97b4b 	.word	0x3fa97b4b
 800a380:	a0d03d51 	.word	0xa0d03d51
 800a384:	3fb10d66 	.word	0x3fb10d66
 800a388:	c54c206e 	.word	0xc54c206e
 800a38c:	3fb745cd 	.word	0x3fb745cd
 800a390:	920083ff 	.word	0x920083ff
 800a394:	3fc24924 	.word	0x3fc24924
 800a398:	5555550d 	.word	0x5555550d
 800a39c:	3fd55555 	.word	0x3fd55555
 800a3a0:	2c6a6c2f 	.word	0x2c6a6c2f
 800a3a4:	bfa2b444 	.word	0xbfa2b444
 800a3a8:	52defd9a 	.word	0x52defd9a
 800a3ac:	3fadde2d 	.word	0x3fadde2d
 800a3b0:	af749a6d 	.word	0xaf749a6d
 800a3b4:	3fb3b0f2 	.word	0x3fb3b0f2
 800a3b8:	fe231671 	.word	0xfe231671
 800a3bc:	3fbc71c6 	.word	0x3fbc71c6
 800a3c0:	9998ebc4 	.word	0x9998ebc4
 800a3c4:	3fc99999 	.word	0x3fc99999
 800a3c8:	54442d18 	.word	0x54442d18
 800a3cc:	bff921fb 	.word	0xbff921fb
 800a3d0:	440fffff 	.word	0x440fffff
 800a3d4:	7ff00000 	.word	0x7ff00000
 800a3d8:	3fdbffff 	.word	0x3fdbffff
 800a3dc:	3ff00000 	.word	0x3ff00000
 800a3e0:	3ff2ffff 	.word	0x3ff2ffff
 800a3e4:	40038000 	.word	0x40038000
 800a3e8:	3ff80000 	.word	0x3ff80000
 800a3ec:	bff00000 	.word	0xbff00000
 800a3f0:	0800c3f0 	.word	0x0800c3f0
 800a3f4:	0800c410 	.word	0x0800c410

0800a3f8 <cos>:
 800a3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3fa:	ec53 2b10 	vmov	r2, r3, d0
 800a3fe:	4826      	ldr	r0, [pc, #152]	@ (800a498 <cos+0xa0>)
 800a400:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a404:	4281      	cmp	r1, r0
 800a406:	d806      	bhi.n	800a416 <cos+0x1e>
 800a408:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a490 <cos+0x98>
 800a40c:	b005      	add	sp, #20
 800a40e:	f85d eb04 	ldr.w	lr, [sp], #4
 800a412:	f000 b989 	b.w	800a728 <__kernel_cos>
 800a416:	4821      	ldr	r0, [pc, #132]	@ (800a49c <cos+0xa4>)
 800a418:	4281      	cmp	r1, r0
 800a41a:	d908      	bls.n	800a42e <cos+0x36>
 800a41c:	4610      	mov	r0, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	f7f5 fed6 	bl	80001d0 <__aeabi_dsub>
 800a424:	ec41 0b10 	vmov	d0, r0, r1
 800a428:	b005      	add	sp, #20
 800a42a:	f85d fb04 	ldr.w	pc, [sp], #4
 800a42e:	4668      	mov	r0, sp
 800a430:	f001 f90a 	bl	800b648 <__ieee754_rem_pio2>
 800a434:	f000 0003 	and.w	r0, r0, #3
 800a438:	2801      	cmp	r0, #1
 800a43a:	d00b      	beq.n	800a454 <cos+0x5c>
 800a43c:	2802      	cmp	r0, #2
 800a43e:	d015      	beq.n	800a46c <cos+0x74>
 800a440:	b9d8      	cbnz	r0, 800a47a <cos+0x82>
 800a442:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a446:	ed9d 0b00 	vldr	d0, [sp]
 800a44a:	f000 f96d 	bl	800a728 <__kernel_cos>
 800a44e:	ec51 0b10 	vmov	r0, r1, d0
 800a452:	e7e7      	b.n	800a424 <cos+0x2c>
 800a454:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a458:	ed9d 0b00 	vldr	d0, [sp]
 800a45c:	f000 fa2c 	bl	800a8b8 <__kernel_sin>
 800a460:	ec53 2b10 	vmov	r2, r3, d0
 800a464:	4610      	mov	r0, r2
 800a466:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a46a:	e7db      	b.n	800a424 <cos+0x2c>
 800a46c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a470:	ed9d 0b00 	vldr	d0, [sp]
 800a474:	f000 f958 	bl	800a728 <__kernel_cos>
 800a478:	e7f2      	b.n	800a460 <cos+0x68>
 800a47a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a47e:	ed9d 0b00 	vldr	d0, [sp]
 800a482:	2001      	movs	r0, #1
 800a484:	f000 fa18 	bl	800a8b8 <__kernel_sin>
 800a488:	e7e1      	b.n	800a44e <cos+0x56>
 800a48a:	bf00      	nop
 800a48c:	f3af 8000 	nop.w
	...
 800a498:	3fe921fb 	.word	0x3fe921fb
 800a49c:	7fefffff 	.word	0x7fefffff

0800a4a0 <fabs>:
 800a4a0:	ec51 0b10 	vmov	r0, r1, d0
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a4aa:	ec43 2b10 	vmov	d0, r2, r3
 800a4ae:	4770      	bx	lr

0800a4b0 <sin>:
 800a4b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4b2:	ec53 2b10 	vmov	r2, r3, d0
 800a4b6:	4826      	ldr	r0, [pc, #152]	@ (800a550 <sin+0xa0>)
 800a4b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a4bc:	4281      	cmp	r1, r0
 800a4be:	d807      	bhi.n	800a4d0 <sin+0x20>
 800a4c0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a548 <sin+0x98>
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	b005      	add	sp, #20
 800a4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4cc:	f000 b9f4 	b.w	800a8b8 <__kernel_sin>
 800a4d0:	4820      	ldr	r0, [pc, #128]	@ (800a554 <sin+0xa4>)
 800a4d2:	4281      	cmp	r1, r0
 800a4d4:	d908      	bls.n	800a4e8 <sin+0x38>
 800a4d6:	4610      	mov	r0, r2
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f7f5 fe79 	bl	80001d0 <__aeabi_dsub>
 800a4de:	ec41 0b10 	vmov	d0, r0, r1
 800a4e2:	b005      	add	sp, #20
 800a4e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4e8:	4668      	mov	r0, sp
 800a4ea:	f001 f8ad 	bl	800b648 <__ieee754_rem_pio2>
 800a4ee:	f000 0003 	and.w	r0, r0, #3
 800a4f2:	2801      	cmp	r0, #1
 800a4f4:	d00c      	beq.n	800a510 <sin+0x60>
 800a4f6:	2802      	cmp	r0, #2
 800a4f8:	d011      	beq.n	800a51e <sin+0x6e>
 800a4fa:	b9e8      	cbnz	r0, 800a538 <sin+0x88>
 800a4fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a500:	ed9d 0b00 	vldr	d0, [sp]
 800a504:	2001      	movs	r0, #1
 800a506:	f000 f9d7 	bl	800a8b8 <__kernel_sin>
 800a50a:	ec51 0b10 	vmov	r0, r1, d0
 800a50e:	e7e6      	b.n	800a4de <sin+0x2e>
 800a510:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a514:	ed9d 0b00 	vldr	d0, [sp]
 800a518:	f000 f906 	bl	800a728 <__kernel_cos>
 800a51c:	e7f5      	b.n	800a50a <sin+0x5a>
 800a51e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a522:	ed9d 0b00 	vldr	d0, [sp]
 800a526:	2001      	movs	r0, #1
 800a528:	f000 f9c6 	bl	800a8b8 <__kernel_sin>
 800a52c:	ec53 2b10 	vmov	r2, r3, d0
 800a530:	4610      	mov	r0, r2
 800a532:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a536:	e7d2      	b.n	800a4de <sin+0x2e>
 800a538:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a53c:	ed9d 0b00 	vldr	d0, [sp]
 800a540:	f000 f8f2 	bl	800a728 <__kernel_cos>
 800a544:	e7f2      	b.n	800a52c <sin+0x7c>
 800a546:	bf00      	nop
	...
 800a550:	3fe921fb 	.word	0x3fe921fb
 800a554:	7fefffff 	.word	0x7fefffff

0800a558 <finite>:
 800a558:	b082      	sub	sp, #8
 800a55a:	ed8d 0b00 	vstr	d0, [sp]
 800a55e:	9801      	ldr	r0, [sp, #4]
 800a560:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a564:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a568:	0fc0      	lsrs	r0, r0, #31
 800a56a:	b002      	add	sp, #8
 800a56c:	4770      	bx	lr
	...

0800a570 <__ieee754_sqrt>:
 800a570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a574:	4a68      	ldr	r2, [pc, #416]	@ (800a718 <__ieee754_sqrt+0x1a8>)
 800a576:	ec55 4b10 	vmov	r4, r5, d0
 800a57a:	43aa      	bics	r2, r5
 800a57c:	462b      	mov	r3, r5
 800a57e:	4621      	mov	r1, r4
 800a580:	d110      	bne.n	800a5a4 <__ieee754_sqrt+0x34>
 800a582:	4622      	mov	r2, r4
 800a584:	4620      	mov	r0, r4
 800a586:	4629      	mov	r1, r5
 800a588:	f7f5 ffda 	bl	8000540 <__aeabi_dmul>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4620      	mov	r0, r4
 800a592:	4629      	mov	r1, r5
 800a594:	f7f5 fe1e 	bl	80001d4 <__adddf3>
 800a598:	4604      	mov	r4, r0
 800a59a:	460d      	mov	r5, r1
 800a59c:	ec45 4b10 	vmov	d0, r4, r5
 800a5a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5a4:	2d00      	cmp	r5, #0
 800a5a6:	dc0e      	bgt.n	800a5c6 <__ieee754_sqrt+0x56>
 800a5a8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a5ac:	4322      	orrs	r2, r4
 800a5ae:	d0f5      	beq.n	800a59c <__ieee754_sqrt+0x2c>
 800a5b0:	b19d      	cbz	r5, 800a5da <__ieee754_sqrt+0x6a>
 800a5b2:	4622      	mov	r2, r4
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	4629      	mov	r1, r5
 800a5b8:	f7f5 fe0a 	bl	80001d0 <__aeabi_dsub>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	f7f6 f8e8 	bl	8000794 <__aeabi_ddiv>
 800a5c4:	e7e8      	b.n	800a598 <__ieee754_sqrt+0x28>
 800a5c6:	152a      	asrs	r2, r5, #20
 800a5c8:	d115      	bne.n	800a5f6 <__ieee754_sqrt+0x86>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e009      	b.n	800a5e2 <__ieee754_sqrt+0x72>
 800a5ce:	0acb      	lsrs	r3, r1, #11
 800a5d0:	3a15      	subs	r2, #21
 800a5d2:	0549      	lsls	r1, r1, #21
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d0fa      	beq.n	800a5ce <__ieee754_sqrt+0x5e>
 800a5d8:	e7f7      	b.n	800a5ca <__ieee754_sqrt+0x5a>
 800a5da:	462a      	mov	r2, r5
 800a5dc:	e7fa      	b.n	800a5d4 <__ieee754_sqrt+0x64>
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	02dc      	lsls	r4, r3, #11
 800a5e4:	d5fb      	bpl.n	800a5de <__ieee754_sqrt+0x6e>
 800a5e6:	1e44      	subs	r4, r0, #1
 800a5e8:	1b12      	subs	r2, r2, r4
 800a5ea:	f1c0 0420 	rsb	r4, r0, #32
 800a5ee:	fa21 f404 	lsr.w	r4, r1, r4
 800a5f2:	4323      	orrs	r3, r4
 800a5f4:	4081      	lsls	r1, r0
 800a5f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5fa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a5fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a602:	07d2      	lsls	r2, r2, #31
 800a604:	bf5c      	itt	pl
 800a606:	005b      	lslpl	r3, r3, #1
 800a608:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a60c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a610:	bf58      	it	pl
 800a612:	0049      	lslpl	r1, r1, #1
 800a614:	2600      	movs	r6, #0
 800a616:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a61a:	106d      	asrs	r5, r5, #1
 800a61c:	0049      	lsls	r1, r1, #1
 800a61e:	2016      	movs	r0, #22
 800a620:	4632      	mov	r2, r6
 800a622:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a626:	1917      	adds	r7, r2, r4
 800a628:	429f      	cmp	r7, r3
 800a62a:	bfde      	ittt	le
 800a62c:	193a      	addle	r2, r7, r4
 800a62e:	1bdb      	suble	r3, r3, r7
 800a630:	1936      	addle	r6, r6, r4
 800a632:	0fcf      	lsrs	r7, r1, #31
 800a634:	3801      	subs	r0, #1
 800a636:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a63a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a63e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a642:	d1f0      	bne.n	800a626 <__ieee754_sqrt+0xb6>
 800a644:	4604      	mov	r4, r0
 800a646:	2720      	movs	r7, #32
 800a648:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a64c:	429a      	cmp	r2, r3
 800a64e:	eb00 0e0c 	add.w	lr, r0, ip
 800a652:	db02      	blt.n	800a65a <__ieee754_sqrt+0xea>
 800a654:	d113      	bne.n	800a67e <__ieee754_sqrt+0x10e>
 800a656:	458e      	cmp	lr, r1
 800a658:	d811      	bhi.n	800a67e <__ieee754_sqrt+0x10e>
 800a65a:	f1be 0f00 	cmp.w	lr, #0
 800a65e:	eb0e 000c 	add.w	r0, lr, ip
 800a662:	da42      	bge.n	800a6ea <__ieee754_sqrt+0x17a>
 800a664:	2800      	cmp	r0, #0
 800a666:	db40      	blt.n	800a6ea <__ieee754_sqrt+0x17a>
 800a668:	f102 0801 	add.w	r8, r2, #1
 800a66c:	1a9b      	subs	r3, r3, r2
 800a66e:	458e      	cmp	lr, r1
 800a670:	bf88      	it	hi
 800a672:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a676:	eba1 010e 	sub.w	r1, r1, lr
 800a67a:	4464      	add	r4, ip
 800a67c:	4642      	mov	r2, r8
 800a67e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a682:	3f01      	subs	r7, #1
 800a684:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a688:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a68c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a690:	d1dc      	bne.n	800a64c <__ieee754_sqrt+0xdc>
 800a692:	4319      	orrs	r1, r3
 800a694:	d01b      	beq.n	800a6ce <__ieee754_sqrt+0x15e>
 800a696:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a71c <__ieee754_sqrt+0x1ac>
 800a69a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a720 <__ieee754_sqrt+0x1b0>
 800a69e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a6a2:	e9db 2300 	ldrd	r2, r3, [fp]
 800a6a6:	f7f5 fd93 	bl	80001d0 <__aeabi_dsub>
 800a6aa:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	f7f6 f9bf 	bl	8000a38 <__aeabi_dcmple>
 800a6ba:	b140      	cbz	r0, 800a6ce <__ieee754_sqrt+0x15e>
 800a6bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a6c0:	e9da 0100 	ldrd	r0, r1, [sl]
 800a6c4:	e9db 2300 	ldrd	r2, r3, [fp]
 800a6c8:	d111      	bne.n	800a6ee <__ieee754_sqrt+0x17e>
 800a6ca:	3601      	adds	r6, #1
 800a6cc:	463c      	mov	r4, r7
 800a6ce:	1072      	asrs	r2, r6, #1
 800a6d0:	0863      	lsrs	r3, r4, #1
 800a6d2:	07f1      	lsls	r1, r6, #31
 800a6d4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a6d8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a6dc:	bf48      	it	mi
 800a6de:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a6e2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	e756      	b.n	800a598 <__ieee754_sqrt+0x28>
 800a6ea:	4690      	mov	r8, r2
 800a6ec:	e7be      	b.n	800a66c <__ieee754_sqrt+0xfc>
 800a6ee:	f7f5 fd71 	bl	80001d4 <__adddf3>
 800a6f2:	e9da 8900 	ldrd	r8, r9, [sl]
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f6 f991 	bl	8000a24 <__aeabi_dcmplt>
 800a702:	b120      	cbz	r0, 800a70e <__ieee754_sqrt+0x19e>
 800a704:	1ca0      	adds	r0, r4, #2
 800a706:	bf08      	it	eq
 800a708:	3601      	addeq	r6, #1
 800a70a:	3402      	adds	r4, #2
 800a70c:	e7df      	b.n	800a6ce <__ieee754_sqrt+0x15e>
 800a70e:	1c63      	adds	r3, r4, #1
 800a710:	f023 0401 	bic.w	r4, r3, #1
 800a714:	e7db      	b.n	800a6ce <__ieee754_sqrt+0x15e>
 800a716:	bf00      	nop
 800a718:	7ff00000 	.word	0x7ff00000
 800a71c:	200000c0 	.word	0x200000c0
 800a720:	200000b8 	.word	0x200000b8
 800a724:	00000000 	.word	0x00000000

0800a728 <__kernel_cos>:
 800a728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	ec57 6b10 	vmov	r6, r7, d0
 800a730:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a734:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a738:	ed8d 1b00 	vstr	d1, [sp]
 800a73c:	d206      	bcs.n	800a74c <__kernel_cos+0x24>
 800a73e:	4630      	mov	r0, r6
 800a740:	4639      	mov	r1, r7
 800a742:	f7f6 f9ad 	bl	8000aa0 <__aeabi_d2iz>
 800a746:	2800      	cmp	r0, #0
 800a748:	f000 8088 	beq.w	800a85c <__kernel_cos+0x134>
 800a74c:	4632      	mov	r2, r6
 800a74e:	463b      	mov	r3, r7
 800a750:	4630      	mov	r0, r6
 800a752:	4639      	mov	r1, r7
 800a754:	f7f5 fef4 	bl	8000540 <__aeabi_dmul>
 800a758:	4b51      	ldr	r3, [pc, #324]	@ (800a8a0 <__kernel_cos+0x178>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	4604      	mov	r4, r0
 800a75e:	460d      	mov	r5, r1
 800a760:	f7f5 feee 	bl	8000540 <__aeabi_dmul>
 800a764:	a340      	add	r3, pc, #256	@ (adr r3, 800a868 <__kernel_cos+0x140>)
 800a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76a:	4682      	mov	sl, r0
 800a76c:	468b      	mov	fp, r1
 800a76e:	4620      	mov	r0, r4
 800a770:	4629      	mov	r1, r5
 800a772:	f7f5 fee5 	bl	8000540 <__aeabi_dmul>
 800a776:	a33e      	add	r3, pc, #248	@ (adr r3, 800a870 <__kernel_cos+0x148>)
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	f7f5 fd2a 	bl	80001d4 <__adddf3>
 800a780:	4622      	mov	r2, r4
 800a782:	462b      	mov	r3, r5
 800a784:	f7f5 fedc 	bl	8000540 <__aeabi_dmul>
 800a788:	a33b      	add	r3, pc, #236	@ (adr r3, 800a878 <__kernel_cos+0x150>)
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f7f5 fd1f 	bl	80001d0 <__aeabi_dsub>
 800a792:	4622      	mov	r2, r4
 800a794:	462b      	mov	r3, r5
 800a796:	f7f5 fed3 	bl	8000540 <__aeabi_dmul>
 800a79a:	a339      	add	r3, pc, #228	@ (adr r3, 800a880 <__kernel_cos+0x158>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f5 fd18 	bl	80001d4 <__adddf3>
 800a7a4:	4622      	mov	r2, r4
 800a7a6:	462b      	mov	r3, r5
 800a7a8:	f7f5 feca 	bl	8000540 <__aeabi_dmul>
 800a7ac:	a336      	add	r3, pc, #216	@ (adr r3, 800a888 <__kernel_cos+0x160>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	f7f5 fd0d 	bl	80001d0 <__aeabi_dsub>
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	f7f5 fec1 	bl	8000540 <__aeabi_dmul>
 800a7be:	a334      	add	r3, pc, #208	@ (adr r3, 800a890 <__kernel_cos+0x168>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	f7f5 fd06 	bl	80001d4 <__adddf3>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	462b      	mov	r3, r5
 800a7cc:	f7f5 feb8 	bl	8000540 <__aeabi_dmul>
 800a7d0:	4622      	mov	r2, r4
 800a7d2:	462b      	mov	r3, r5
 800a7d4:	f7f5 feb4 	bl	8000540 <__aeabi_dmul>
 800a7d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a7dc:	4604      	mov	r4, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	f7f5 feac 	bl	8000540 <__aeabi_dmul>
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f7f5 fcee 	bl	80001d0 <__aeabi_dsub>
 800a7f4:	4b2b      	ldr	r3, [pc, #172]	@ (800a8a4 <__kernel_cos+0x17c>)
 800a7f6:	4598      	cmp	r8, r3
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	d810      	bhi.n	800a820 <__kernel_cos+0xf8>
 800a7fe:	4602      	mov	r2, r0
 800a800:	460b      	mov	r3, r1
 800a802:	4650      	mov	r0, sl
 800a804:	4659      	mov	r1, fp
 800a806:	f7f5 fce3 	bl	80001d0 <__aeabi_dsub>
 800a80a:	460b      	mov	r3, r1
 800a80c:	4926      	ldr	r1, [pc, #152]	@ (800a8a8 <__kernel_cos+0x180>)
 800a80e:	4602      	mov	r2, r0
 800a810:	2000      	movs	r0, #0
 800a812:	f7f5 fcdd 	bl	80001d0 <__aeabi_dsub>
 800a816:	ec41 0b10 	vmov	d0, r0, r1
 800a81a:	b003      	add	sp, #12
 800a81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a820:	4b22      	ldr	r3, [pc, #136]	@ (800a8ac <__kernel_cos+0x184>)
 800a822:	4921      	ldr	r1, [pc, #132]	@ (800a8a8 <__kernel_cos+0x180>)
 800a824:	4598      	cmp	r8, r3
 800a826:	bf8c      	ite	hi
 800a828:	4d21      	ldrhi	r5, [pc, #132]	@ (800a8b0 <__kernel_cos+0x188>)
 800a82a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a82e:	2400      	movs	r4, #0
 800a830:	4622      	mov	r2, r4
 800a832:	462b      	mov	r3, r5
 800a834:	2000      	movs	r0, #0
 800a836:	f7f5 fccb 	bl	80001d0 <__aeabi_dsub>
 800a83a:	4622      	mov	r2, r4
 800a83c:	4680      	mov	r8, r0
 800a83e:	4689      	mov	r9, r1
 800a840:	462b      	mov	r3, r5
 800a842:	4650      	mov	r0, sl
 800a844:	4659      	mov	r1, fp
 800a846:	f7f5 fcc3 	bl	80001d0 <__aeabi_dsub>
 800a84a:	4632      	mov	r2, r6
 800a84c:	463b      	mov	r3, r7
 800a84e:	f7f5 fcbf 	bl	80001d0 <__aeabi_dsub>
 800a852:	4602      	mov	r2, r0
 800a854:	460b      	mov	r3, r1
 800a856:	4640      	mov	r0, r8
 800a858:	4649      	mov	r1, r9
 800a85a:	e7da      	b.n	800a812 <__kernel_cos+0xea>
 800a85c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a898 <__kernel_cos+0x170>
 800a860:	e7db      	b.n	800a81a <__kernel_cos+0xf2>
 800a862:	bf00      	nop
 800a864:	f3af 8000 	nop.w
 800a868:	be8838d4 	.word	0xbe8838d4
 800a86c:	bda8fae9 	.word	0xbda8fae9
 800a870:	bdb4b1c4 	.word	0xbdb4b1c4
 800a874:	3e21ee9e 	.word	0x3e21ee9e
 800a878:	809c52ad 	.word	0x809c52ad
 800a87c:	3e927e4f 	.word	0x3e927e4f
 800a880:	19cb1590 	.word	0x19cb1590
 800a884:	3efa01a0 	.word	0x3efa01a0
 800a888:	16c15177 	.word	0x16c15177
 800a88c:	3f56c16c 	.word	0x3f56c16c
 800a890:	5555554c 	.word	0x5555554c
 800a894:	3fa55555 	.word	0x3fa55555
 800a898:	00000000 	.word	0x00000000
 800a89c:	3ff00000 	.word	0x3ff00000
 800a8a0:	3fe00000 	.word	0x3fe00000
 800a8a4:	3fd33332 	.word	0x3fd33332
 800a8a8:	3ff00000 	.word	0x3ff00000
 800a8ac:	3fe90000 	.word	0x3fe90000
 800a8b0:	3fd20000 	.word	0x3fd20000
 800a8b4:	00000000 	.word	0x00000000

0800a8b8 <__kernel_sin>:
 800a8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8bc:	ec55 4b10 	vmov	r4, r5, d0
 800a8c0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a8c4:	b085      	sub	sp, #20
 800a8c6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a8ca:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a8ce:	4680      	mov	r8, r0
 800a8d0:	d205      	bcs.n	800a8de <__kernel_sin+0x26>
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	4629      	mov	r1, r5
 800a8d6:	f7f6 f8e3 	bl	8000aa0 <__aeabi_d2iz>
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d052      	beq.n	800a984 <__kernel_sin+0xcc>
 800a8de:	4622      	mov	r2, r4
 800a8e0:	462b      	mov	r3, r5
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	f7f5 fe2b 	bl	8000540 <__aeabi_dmul>
 800a8ea:	4682      	mov	sl, r0
 800a8ec:	468b      	mov	fp, r1
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	f7f5 fe23 	bl	8000540 <__aeabi_dmul>
 800a8fa:	a342      	add	r3, pc, #264	@ (adr r3, 800aa04 <__kernel_sin+0x14c>)
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	e9cd 0100 	strd	r0, r1, [sp]
 800a904:	4650      	mov	r0, sl
 800a906:	4659      	mov	r1, fp
 800a908:	f7f5 fe1a 	bl	8000540 <__aeabi_dmul>
 800a90c:	a33f      	add	r3, pc, #252	@ (adr r3, 800aa0c <__kernel_sin+0x154>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	f7f5 fc5d 	bl	80001d0 <__aeabi_dsub>
 800a916:	4652      	mov	r2, sl
 800a918:	465b      	mov	r3, fp
 800a91a:	f7f5 fe11 	bl	8000540 <__aeabi_dmul>
 800a91e:	a33d      	add	r3, pc, #244	@ (adr r3, 800aa14 <__kernel_sin+0x15c>)
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f7f5 fc56 	bl	80001d4 <__adddf3>
 800a928:	4652      	mov	r2, sl
 800a92a:	465b      	mov	r3, fp
 800a92c:	f7f5 fe08 	bl	8000540 <__aeabi_dmul>
 800a930:	a33a      	add	r3, pc, #232	@ (adr r3, 800aa1c <__kernel_sin+0x164>)
 800a932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a936:	f7f5 fc4b 	bl	80001d0 <__aeabi_dsub>
 800a93a:	4652      	mov	r2, sl
 800a93c:	465b      	mov	r3, fp
 800a93e:	f7f5 fdff 	bl	8000540 <__aeabi_dmul>
 800a942:	a338      	add	r3, pc, #224	@ (adr r3, 800aa24 <__kernel_sin+0x16c>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f7f5 fc44 	bl	80001d4 <__adddf3>
 800a94c:	4606      	mov	r6, r0
 800a94e:	460f      	mov	r7, r1
 800a950:	f1b8 0f00 	cmp.w	r8, #0
 800a954:	d11b      	bne.n	800a98e <__kernel_sin+0xd6>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	4650      	mov	r0, sl
 800a95c:	4659      	mov	r1, fp
 800a95e:	f7f5 fdef 	bl	8000540 <__aeabi_dmul>
 800a962:	a325      	add	r3, pc, #148	@ (adr r3, 800a9f8 <__kernel_sin+0x140>)
 800a964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a968:	f7f5 fc32 	bl	80001d0 <__aeabi_dsub>
 800a96c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a970:	f7f5 fde6 	bl	8000540 <__aeabi_dmul>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4620      	mov	r0, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	f7f5 fc2a 	bl	80001d4 <__adddf3>
 800a980:	4604      	mov	r4, r0
 800a982:	460d      	mov	r5, r1
 800a984:	ec45 4b10 	vmov	d0, r4, r5
 800a988:	b005      	add	sp, #20
 800a98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a98e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a992:	4b1b      	ldr	r3, [pc, #108]	@ (800aa00 <__kernel_sin+0x148>)
 800a994:	2200      	movs	r2, #0
 800a996:	f7f5 fdd3 	bl	8000540 <__aeabi_dmul>
 800a99a:	4632      	mov	r2, r6
 800a99c:	4680      	mov	r8, r0
 800a99e:	4689      	mov	r9, r1
 800a9a0:	463b      	mov	r3, r7
 800a9a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9a6:	f7f5 fdcb 	bl	8000540 <__aeabi_dmul>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	f7f5 fc0d 	bl	80001d0 <__aeabi_dsub>
 800a9b6:	4652      	mov	r2, sl
 800a9b8:	465b      	mov	r3, fp
 800a9ba:	f7f5 fdc1 	bl	8000540 <__aeabi_dmul>
 800a9be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9c2:	f7f5 fc05 	bl	80001d0 <__aeabi_dsub>
 800a9c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a9f8 <__kernel_sin+0x140>)
 800a9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9cc:	4606      	mov	r6, r0
 800a9ce:	460f      	mov	r7, r1
 800a9d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9d4:	f7f5 fdb4 	bl	8000540 <__aeabi_dmul>
 800a9d8:	4602      	mov	r2, r0
 800a9da:	460b      	mov	r3, r1
 800a9dc:	4630      	mov	r0, r6
 800a9de:	4639      	mov	r1, r7
 800a9e0:	f7f5 fbf8 	bl	80001d4 <__adddf3>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	4629      	mov	r1, r5
 800a9ec:	f7f5 fbf0 	bl	80001d0 <__aeabi_dsub>
 800a9f0:	e7c6      	b.n	800a980 <__kernel_sin+0xc8>
 800a9f2:	bf00      	nop
 800a9f4:	f3af 8000 	nop.w
 800a9f8:	55555549 	.word	0x55555549
 800a9fc:	3fc55555 	.word	0x3fc55555
 800aa00:	3fe00000 	.word	0x3fe00000
 800aa04:	5acfd57c 	.word	0x5acfd57c
 800aa08:	3de5d93a 	.word	0x3de5d93a
 800aa0c:	8a2b9ceb 	.word	0x8a2b9ceb
 800aa10:	3e5ae5e6 	.word	0x3e5ae5e6
 800aa14:	57b1fe7d 	.word	0x57b1fe7d
 800aa18:	3ec71de3 	.word	0x3ec71de3
 800aa1c:	19c161d5 	.word	0x19c161d5
 800aa20:	3f2a01a0 	.word	0x3f2a01a0
 800aa24:	1110f8a6 	.word	0x1110f8a6
 800aa28:	3f811111 	.word	0x3f811111
 800aa2c:	00000000 	.word	0x00000000

0800aa30 <__ieee754_atan2>:
 800aa30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa34:	ec57 6b11 	vmov	r6, r7, d1
 800aa38:	4273      	negs	r3, r6
 800aa3a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800abb8 <__ieee754_atan2+0x188>
 800aa3e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800aa42:	4333      	orrs	r3, r6
 800aa44:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800aa48:	4543      	cmp	r3, r8
 800aa4a:	ec51 0b10 	vmov	r0, r1, d0
 800aa4e:	4635      	mov	r5, r6
 800aa50:	d809      	bhi.n	800aa66 <__ieee754_atan2+0x36>
 800aa52:	4244      	negs	r4, r0
 800aa54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aa58:	4304      	orrs	r4, r0
 800aa5a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800aa5e:	4544      	cmp	r4, r8
 800aa60:	468e      	mov	lr, r1
 800aa62:	4681      	mov	r9, r0
 800aa64:	d907      	bls.n	800aa76 <__ieee754_atan2+0x46>
 800aa66:	4632      	mov	r2, r6
 800aa68:	463b      	mov	r3, r7
 800aa6a:	f7f5 fbb3 	bl	80001d4 <__adddf3>
 800aa6e:	ec41 0b10 	vmov	d0, r0, r1
 800aa72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa76:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800aa7a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800aa7e:	4334      	orrs	r4, r6
 800aa80:	d103      	bne.n	800aa8a <__ieee754_atan2+0x5a>
 800aa82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa86:	f7ff bb1f 	b.w	800a0c8 <atan>
 800aa8a:	17bc      	asrs	r4, r7, #30
 800aa8c:	f004 0402 	and.w	r4, r4, #2
 800aa90:	ea53 0909 	orrs.w	r9, r3, r9
 800aa94:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800aa98:	d107      	bne.n	800aaaa <__ieee754_atan2+0x7a>
 800aa9a:	2c02      	cmp	r4, #2
 800aa9c:	d05f      	beq.n	800ab5e <__ieee754_atan2+0x12e>
 800aa9e:	2c03      	cmp	r4, #3
 800aaa0:	d1e5      	bne.n	800aa6e <__ieee754_atan2+0x3e>
 800aaa2:	a141      	add	r1, pc, #260	@ (adr r1, 800aba8 <__ieee754_atan2+0x178>)
 800aaa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaa8:	e7e1      	b.n	800aa6e <__ieee754_atan2+0x3e>
 800aaaa:	4315      	orrs	r5, r2
 800aaac:	d106      	bne.n	800aabc <__ieee754_atan2+0x8c>
 800aaae:	f1be 0f00 	cmp.w	lr, #0
 800aab2:	da5f      	bge.n	800ab74 <__ieee754_atan2+0x144>
 800aab4:	a13e      	add	r1, pc, #248	@ (adr r1, 800abb0 <__ieee754_atan2+0x180>)
 800aab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaba:	e7d8      	b.n	800aa6e <__ieee754_atan2+0x3e>
 800aabc:	4542      	cmp	r2, r8
 800aabe:	d10f      	bne.n	800aae0 <__ieee754_atan2+0xb0>
 800aac0:	4293      	cmp	r3, r2
 800aac2:	f104 34ff 	add.w	r4, r4, #4294967295
 800aac6:	d107      	bne.n	800aad8 <__ieee754_atan2+0xa8>
 800aac8:	2c02      	cmp	r4, #2
 800aaca:	d84c      	bhi.n	800ab66 <__ieee754_atan2+0x136>
 800aacc:	4b34      	ldr	r3, [pc, #208]	@ (800aba0 <__ieee754_atan2+0x170>)
 800aace:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aad2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aad6:	e7ca      	b.n	800aa6e <__ieee754_atan2+0x3e>
 800aad8:	2c02      	cmp	r4, #2
 800aada:	d848      	bhi.n	800ab6e <__ieee754_atan2+0x13e>
 800aadc:	4b31      	ldr	r3, [pc, #196]	@ (800aba4 <__ieee754_atan2+0x174>)
 800aade:	e7f6      	b.n	800aace <__ieee754_atan2+0x9e>
 800aae0:	4543      	cmp	r3, r8
 800aae2:	d0e4      	beq.n	800aaae <__ieee754_atan2+0x7e>
 800aae4:	1a9b      	subs	r3, r3, r2
 800aae6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800aaea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aaee:	da1e      	bge.n	800ab2e <__ieee754_atan2+0xfe>
 800aaf0:	2f00      	cmp	r7, #0
 800aaf2:	da01      	bge.n	800aaf8 <__ieee754_atan2+0xc8>
 800aaf4:	323c      	adds	r2, #60	@ 0x3c
 800aaf6:	db1e      	blt.n	800ab36 <__ieee754_atan2+0x106>
 800aaf8:	4632      	mov	r2, r6
 800aafa:	463b      	mov	r3, r7
 800aafc:	f7f5 fe4a 	bl	8000794 <__aeabi_ddiv>
 800ab00:	ec41 0b10 	vmov	d0, r0, r1
 800ab04:	f7ff fccc 	bl	800a4a0 <fabs>
 800ab08:	f7ff fade 	bl	800a0c8 <atan>
 800ab0c:	ec51 0b10 	vmov	r0, r1, d0
 800ab10:	2c01      	cmp	r4, #1
 800ab12:	d013      	beq.n	800ab3c <__ieee754_atan2+0x10c>
 800ab14:	2c02      	cmp	r4, #2
 800ab16:	d015      	beq.n	800ab44 <__ieee754_atan2+0x114>
 800ab18:	2c00      	cmp	r4, #0
 800ab1a:	d0a8      	beq.n	800aa6e <__ieee754_atan2+0x3e>
 800ab1c:	a318      	add	r3, pc, #96	@ (adr r3, 800ab80 <__ieee754_atan2+0x150>)
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	f7f5 fb55 	bl	80001d0 <__aeabi_dsub>
 800ab26:	a318      	add	r3, pc, #96	@ (adr r3, 800ab88 <__ieee754_atan2+0x158>)
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	e014      	b.n	800ab58 <__ieee754_atan2+0x128>
 800ab2e:	a118      	add	r1, pc, #96	@ (adr r1, 800ab90 <__ieee754_atan2+0x160>)
 800ab30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab34:	e7ec      	b.n	800ab10 <__ieee754_atan2+0xe0>
 800ab36:	2000      	movs	r0, #0
 800ab38:	2100      	movs	r1, #0
 800ab3a:	e7e9      	b.n	800ab10 <__ieee754_atan2+0xe0>
 800ab3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab40:	4619      	mov	r1, r3
 800ab42:	e794      	b.n	800aa6e <__ieee754_atan2+0x3e>
 800ab44:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab80 <__ieee754_atan2+0x150>)
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	f7f5 fb41 	bl	80001d0 <__aeabi_dsub>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	a10d      	add	r1, pc, #52	@ (adr r1, 800ab88 <__ieee754_atan2+0x158>)
 800ab54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab58:	f7f5 fb3a 	bl	80001d0 <__aeabi_dsub>
 800ab5c:	e787      	b.n	800aa6e <__ieee754_atan2+0x3e>
 800ab5e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ab88 <__ieee754_atan2+0x158>)
 800ab60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab64:	e783      	b.n	800aa6e <__ieee754_atan2+0x3e>
 800ab66:	a10c      	add	r1, pc, #48	@ (adr r1, 800ab98 <__ieee754_atan2+0x168>)
 800ab68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab6c:	e77f      	b.n	800aa6e <__ieee754_atan2+0x3e>
 800ab6e:	2000      	movs	r0, #0
 800ab70:	2100      	movs	r1, #0
 800ab72:	e77c      	b.n	800aa6e <__ieee754_atan2+0x3e>
 800ab74:	a106      	add	r1, pc, #24	@ (adr r1, 800ab90 <__ieee754_atan2+0x160>)
 800ab76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab7a:	e778      	b.n	800aa6e <__ieee754_atan2+0x3e>
 800ab7c:	f3af 8000 	nop.w
 800ab80:	33145c07 	.word	0x33145c07
 800ab84:	3ca1a626 	.word	0x3ca1a626
 800ab88:	54442d18 	.word	0x54442d18
 800ab8c:	400921fb 	.word	0x400921fb
 800ab90:	54442d18 	.word	0x54442d18
 800ab94:	3ff921fb 	.word	0x3ff921fb
 800ab98:	54442d18 	.word	0x54442d18
 800ab9c:	3fe921fb 	.word	0x3fe921fb
 800aba0:	0800c448 	.word	0x0800c448
 800aba4:	0800c430 	.word	0x0800c430
 800aba8:	54442d18 	.word	0x54442d18
 800abac:	c00921fb 	.word	0xc00921fb
 800abb0:	54442d18 	.word	0x54442d18
 800abb4:	bff921fb 	.word	0xbff921fb
 800abb8:	7ff00000 	.word	0x7ff00000
 800abbc:	00000000 	.word	0x00000000

0800abc0 <__ieee754_pow>:
 800abc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abc4:	b091      	sub	sp, #68	@ 0x44
 800abc6:	ed8d 1b00 	vstr	d1, [sp]
 800abca:	e9dd 1900 	ldrd	r1, r9, [sp]
 800abce:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800abd2:	ea5a 0001 	orrs.w	r0, sl, r1
 800abd6:	ec57 6b10 	vmov	r6, r7, d0
 800abda:	d113      	bne.n	800ac04 <__ieee754_pow+0x44>
 800abdc:	19b3      	adds	r3, r6, r6
 800abde:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800abe2:	4152      	adcs	r2, r2
 800abe4:	4298      	cmp	r0, r3
 800abe6:	4b98      	ldr	r3, [pc, #608]	@ (800ae48 <__ieee754_pow+0x288>)
 800abe8:	4193      	sbcs	r3, r2
 800abea:	f080 84ea 	bcs.w	800b5c2 <__ieee754_pow+0xa02>
 800abee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abf2:	4630      	mov	r0, r6
 800abf4:	4639      	mov	r1, r7
 800abf6:	f7f5 faed 	bl	80001d4 <__adddf3>
 800abfa:	ec41 0b10 	vmov	d0, r0, r1
 800abfe:	b011      	add	sp, #68	@ 0x44
 800ac00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac04:	4a91      	ldr	r2, [pc, #580]	@ (800ae4c <__ieee754_pow+0x28c>)
 800ac06:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ac0a:	4590      	cmp	r8, r2
 800ac0c:	463d      	mov	r5, r7
 800ac0e:	4633      	mov	r3, r6
 800ac10:	d806      	bhi.n	800ac20 <__ieee754_pow+0x60>
 800ac12:	d101      	bne.n	800ac18 <__ieee754_pow+0x58>
 800ac14:	2e00      	cmp	r6, #0
 800ac16:	d1ea      	bne.n	800abee <__ieee754_pow+0x2e>
 800ac18:	4592      	cmp	sl, r2
 800ac1a:	d801      	bhi.n	800ac20 <__ieee754_pow+0x60>
 800ac1c:	d10e      	bne.n	800ac3c <__ieee754_pow+0x7c>
 800ac1e:	b169      	cbz	r1, 800ac3c <__ieee754_pow+0x7c>
 800ac20:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ac24:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ac28:	431d      	orrs	r5, r3
 800ac2a:	d1e0      	bne.n	800abee <__ieee754_pow+0x2e>
 800ac2c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac30:	18db      	adds	r3, r3, r3
 800ac32:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ac36:	4152      	adcs	r2, r2
 800ac38:	429d      	cmp	r5, r3
 800ac3a:	e7d4      	b.n	800abe6 <__ieee754_pow+0x26>
 800ac3c:	2d00      	cmp	r5, #0
 800ac3e:	46c3      	mov	fp, r8
 800ac40:	da3a      	bge.n	800acb8 <__ieee754_pow+0xf8>
 800ac42:	4a83      	ldr	r2, [pc, #524]	@ (800ae50 <__ieee754_pow+0x290>)
 800ac44:	4592      	cmp	sl, r2
 800ac46:	d84d      	bhi.n	800ace4 <__ieee754_pow+0x124>
 800ac48:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ac4c:	4592      	cmp	sl, r2
 800ac4e:	f240 84c7 	bls.w	800b5e0 <__ieee754_pow+0xa20>
 800ac52:	ea4f 522a 	mov.w	r2, sl, asr #20
 800ac56:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ac5a:	2a14      	cmp	r2, #20
 800ac5c:	dd0f      	ble.n	800ac7e <__ieee754_pow+0xbe>
 800ac5e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ac62:	fa21 f402 	lsr.w	r4, r1, r2
 800ac66:	fa04 f202 	lsl.w	r2, r4, r2
 800ac6a:	428a      	cmp	r2, r1
 800ac6c:	f040 84b8 	bne.w	800b5e0 <__ieee754_pow+0xa20>
 800ac70:	f004 0401 	and.w	r4, r4, #1
 800ac74:	f1c4 0402 	rsb	r4, r4, #2
 800ac78:	2900      	cmp	r1, #0
 800ac7a:	d158      	bne.n	800ad2e <__ieee754_pow+0x16e>
 800ac7c:	e00e      	b.n	800ac9c <__ieee754_pow+0xdc>
 800ac7e:	2900      	cmp	r1, #0
 800ac80:	d154      	bne.n	800ad2c <__ieee754_pow+0x16c>
 800ac82:	f1c2 0214 	rsb	r2, r2, #20
 800ac86:	fa4a f402 	asr.w	r4, sl, r2
 800ac8a:	fa04 f202 	lsl.w	r2, r4, r2
 800ac8e:	4552      	cmp	r2, sl
 800ac90:	f040 84a3 	bne.w	800b5da <__ieee754_pow+0xa1a>
 800ac94:	f004 0401 	and.w	r4, r4, #1
 800ac98:	f1c4 0402 	rsb	r4, r4, #2
 800ac9c:	4a6d      	ldr	r2, [pc, #436]	@ (800ae54 <__ieee754_pow+0x294>)
 800ac9e:	4592      	cmp	sl, r2
 800aca0:	d12e      	bne.n	800ad00 <__ieee754_pow+0x140>
 800aca2:	f1b9 0f00 	cmp.w	r9, #0
 800aca6:	f280 8494 	bge.w	800b5d2 <__ieee754_pow+0xa12>
 800acaa:	496a      	ldr	r1, [pc, #424]	@ (800ae54 <__ieee754_pow+0x294>)
 800acac:	4632      	mov	r2, r6
 800acae:	463b      	mov	r3, r7
 800acb0:	2000      	movs	r0, #0
 800acb2:	f7f5 fd6f 	bl	8000794 <__aeabi_ddiv>
 800acb6:	e7a0      	b.n	800abfa <__ieee754_pow+0x3a>
 800acb8:	2400      	movs	r4, #0
 800acba:	bbc1      	cbnz	r1, 800ad2e <__ieee754_pow+0x16e>
 800acbc:	4a63      	ldr	r2, [pc, #396]	@ (800ae4c <__ieee754_pow+0x28c>)
 800acbe:	4592      	cmp	sl, r2
 800acc0:	d1ec      	bne.n	800ac9c <__ieee754_pow+0xdc>
 800acc2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800acc6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800acca:	431a      	orrs	r2, r3
 800accc:	f000 8479 	beq.w	800b5c2 <__ieee754_pow+0xa02>
 800acd0:	4b61      	ldr	r3, [pc, #388]	@ (800ae58 <__ieee754_pow+0x298>)
 800acd2:	4598      	cmp	r8, r3
 800acd4:	d908      	bls.n	800ace8 <__ieee754_pow+0x128>
 800acd6:	f1b9 0f00 	cmp.w	r9, #0
 800acda:	f2c0 8476 	blt.w	800b5ca <__ieee754_pow+0xa0a>
 800acde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ace2:	e78a      	b.n	800abfa <__ieee754_pow+0x3a>
 800ace4:	2402      	movs	r4, #2
 800ace6:	e7e8      	b.n	800acba <__ieee754_pow+0xfa>
 800ace8:	f1b9 0f00 	cmp.w	r9, #0
 800acec:	f04f 0000 	mov.w	r0, #0
 800acf0:	f04f 0100 	mov.w	r1, #0
 800acf4:	da81      	bge.n	800abfa <__ieee754_pow+0x3a>
 800acf6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800acfa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800acfe:	e77c      	b.n	800abfa <__ieee754_pow+0x3a>
 800ad00:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ad04:	d106      	bne.n	800ad14 <__ieee754_pow+0x154>
 800ad06:	4632      	mov	r2, r6
 800ad08:	463b      	mov	r3, r7
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	f7f5 fc17 	bl	8000540 <__aeabi_dmul>
 800ad12:	e772      	b.n	800abfa <__ieee754_pow+0x3a>
 800ad14:	4a51      	ldr	r2, [pc, #324]	@ (800ae5c <__ieee754_pow+0x29c>)
 800ad16:	4591      	cmp	r9, r2
 800ad18:	d109      	bne.n	800ad2e <__ieee754_pow+0x16e>
 800ad1a:	2d00      	cmp	r5, #0
 800ad1c:	db07      	blt.n	800ad2e <__ieee754_pow+0x16e>
 800ad1e:	ec47 6b10 	vmov	d0, r6, r7
 800ad22:	b011      	add	sp, #68	@ 0x44
 800ad24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad28:	f7ff bc22 	b.w	800a570 <__ieee754_sqrt>
 800ad2c:	2400      	movs	r4, #0
 800ad2e:	ec47 6b10 	vmov	d0, r6, r7
 800ad32:	9302      	str	r3, [sp, #8]
 800ad34:	f7ff fbb4 	bl	800a4a0 <fabs>
 800ad38:	9b02      	ldr	r3, [sp, #8]
 800ad3a:	ec51 0b10 	vmov	r0, r1, d0
 800ad3e:	bb53      	cbnz	r3, 800ad96 <__ieee754_pow+0x1d6>
 800ad40:	4b44      	ldr	r3, [pc, #272]	@ (800ae54 <__ieee754_pow+0x294>)
 800ad42:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d002      	beq.n	800ad50 <__ieee754_pow+0x190>
 800ad4a:	f1b8 0f00 	cmp.w	r8, #0
 800ad4e:	d122      	bne.n	800ad96 <__ieee754_pow+0x1d6>
 800ad50:	f1b9 0f00 	cmp.w	r9, #0
 800ad54:	da05      	bge.n	800ad62 <__ieee754_pow+0x1a2>
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	493d      	ldr	r1, [pc, #244]	@ (800ae54 <__ieee754_pow+0x294>)
 800ad5e:	f7f5 fd19 	bl	8000794 <__aeabi_ddiv>
 800ad62:	2d00      	cmp	r5, #0
 800ad64:	f6bf af49 	bge.w	800abfa <__ieee754_pow+0x3a>
 800ad68:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ad6c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800ad70:	ea58 0804 	orrs.w	r8, r8, r4
 800ad74:	d108      	bne.n	800ad88 <__ieee754_pow+0x1c8>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	f7f5 fa27 	bl	80001d0 <__aeabi_dsub>
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	e794      	b.n	800acb2 <__ieee754_pow+0xf2>
 800ad88:	2c01      	cmp	r4, #1
 800ad8a:	f47f af36 	bne.w	800abfa <__ieee754_pow+0x3a>
 800ad8e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad92:	4619      	mov	r1, r3
 800ad94:	e731      	b.n	800abfa <__ieee754_pow+0x3a>
 800ad96:	0feb      	lsrs	r3, r5, #31
 800ad98:	3b01      	subs	r3, #1
 800ad9a:	ea53 0204 	orrs.w	r2, r3, r4
 800ad9e:	d102      	bne.n	800ada6 <__ieee754_pow+0x1e6>
 800ada0:	4632      	mov	r2, r6
 800ada2:	463b      	mov	r3, r7
 800ada4:	e7e9      	b.n	800ad7a <__ieee754_pow+0x1ba>
 800ada6:	3c01      	subs	r4, #1
 800ada8:	431c      	orrs	r4, r3
 800adaa:	d016      	beq.n	800adda <__ieee754_pow+0x21a>
 800adac:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ae38 <__ieee754_pow+0x278>
 800adb0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800adb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800adb8:	f240 8112 	bls.w	800afe0 <__ieee754_pow+0x420>
 800adbc:	4b28      	ldr	r3, [pc, #160]	@ (800ae60 <__ieee754_pow+0x2a0>)
 800adbe:	459a      	cmp	sl, r3
 800adc0:	4b25      	ldr	r3, [pc, #148]	@ (800ae58 <__ieee754_pow+0x298>)
 800adc2:	d916      	bls.n	800adf2 <__ieee754_pow+0x232>
 800adc4:	4598      	cmp	r8, r3
 800adc6:	d80b      	bhi.n	800ade0 <__ieee754_pow+0x220>
 800adc8:	f1b9 0f00 	cmp.w	r9, #0
 800adcc:	da0b      	bge.n	800ade6 <__ieee754_pow+0x226>
 800adce:	2000      	movs	r0, #0
 800add0:	b011      	add	sp, #68	@ 0x44
 800add2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add6:	f000 bee7 	b.w	800bba8 <__math_oflow>
 800adda:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ae40 <__ieee754_pow+0x280>
 800adde:	e7e7      	b.n	800adb0 <__ieee754_pow+0x1f0>
 800ade0:	f1b9 0f00 	cmp.w	r9, #0
 800ade4:	dcf3      	bgt.n	800adce <__ieee754_pow+0x20e>
 800ade6:	2000      	movs	r0, #0
 800ade8:	b011      	add	sp, #68	@ 0x44
 800adea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adee:	f000 bed3 	b.w	800bb98 <__math_uflow>
 800adf2:	4598      	cmp	r8, r3
 800adf4:	d20c      	bcs.n	800ae10 <__ieee754_pow+0x250>
 800adf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adfa:	2200      	movs	r2, #0
 800adfc:	2300      	movs	r3, #0
 800adfe:	f7f5 fe11 	bl	8000a24 <__aeabi_dcmplt>
 800ae02:	3800      	subs	r0, #0
 800ae04:	bf18      	it	ne
 800ae06:	2001      	movne	r0, #1
 800ae08:	f1b9 0f00 	cmp.w	r9, #0
 800ae0c:	daec      	bge.n	800ade8 <__ieee754_pow+0x228>
 800ae0e:	e7df      	b.n	800add0 <__ieee754_pow+0x210>
 800ae10:	4b10      	ldr	r3, [pc, #64]	@ (800ae54 <__ieee754_pow+0x294>)
 800ae12:	4598      	cmp	r8, r3
 800ae14:	f04f 0200 	mov.w	r2, #0
 800ae18:	d924      	bls.n	800ae64 <__ieee754_pow+0x2a4>
 800ae1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae1e:	2300      	movs	r3, #0
 800ae20:	f7f5 fe00 	bl	8000a24 <__aeabi_dcmplt>
 800ae24:	3800      	subs	r0, #0
 800ae26:	bf18      	it	ne
 800ae28:	2001      	movne	r0, #1
 800ae2a:	f1b9 0f00 	cmp.w	r9, #0
 800ae2e:	dccf      	bgt.n	800add0 <__ieee754_pow+0x210>
 800ae30:	e7da      	b.n	800ade8 <__ieee754_pow+0x228>
 800ae32:	bf00      	nop
 800ae34:	f3af 8000 	nop.w
 800ae38:	00000000 	.word	0x00000000
 800ae3c:	3ff00000 	.word	0x3ff00000
 800ae40:	00000000 	.word	0x00000000
 800ae44:	bff00000 	.word	0xbff00000
 800ae48:	fff00000 	.word	0xfff00000
 800ae4c:	7ff00000 	.word	0x7ff00000
 800ae50:	433fffff 	.word	0x433fffff
 800ae54:	3ff00000 	.word	0x3ff00000
 800ae58:	3fefffff 	.word	0x3fefffff
 800ae5c:	3fe00000 	.word	0x3fe00000
 800ae60:	43f00000 	.word	0x43f00000
 800ae64:	4b5a      	ldr	r3, [pc, #360]	@ (800afd0 <__ieee754_pow+0x410>)
 800ae66:	f7f5 f9b3 	bl	80001d0 <__aeabi_dsub>
 800ae6a:	a351      	add	r3, pc, #324	@ (adr r3, 800afb0 <__ieee754_pow+0x3f0>)
 800ae6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae70:	4604      	mov	r4, r0
 800ae72:	460d      	mov	r5, r1
 800ae74:	f7f5 fb64 	bl	8000540 <__aeabi_dmul>
 800ae78:	a34f      	add	r3, pc, #316	@ (adr r3, 800afb8 <__ieee754_pow+0x3f8>)
 800ae7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7e:	4606      	mov	r6, r0
 800ae80:	460f      	mov	r7, r1
 800ae82:	4620      	mov	r0, r4
 800ae84:	4629      	mov	r1, r5
 800ae86:	f7f5 fb5b 	bl	8000540 <__aeabi_dmul>
 800ae8a:	4b52      	ldr	r3, [pc, #328]	@ (800afd4 <__ieee754_pow+0x414>)
 800ae8c:	4682      	mov	sl, r0
 800ae8e:	468b      	mov	fp, r1
 800ae90:	2200      	movs	r2, #0
 800ae92:	4620      	mov	r0, r4
 800ae94:	4629      	mov	r1, r5
 800ae96:	f7f5 fb53 	bl	8000540 <__aeabi_dmul>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	a148      	add	r1, pc, #288	@ (adr r1, 800afc0 <__ieee754_pow+0x400>)
 800aea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aea4:	f7f5 f994 	bl	80001d0 <__aeabi_dsub>
 800aea8:	4622      	mov	r2, r4
 800aeaa:	462b      	mov	r3, r5
 800aeac:	f7f5 fb48 	bl	8000540 <__aeabi_dmul>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	460b      	mov	r3, r1
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	4948      	ldr	r1, [pc, #288]	@ (800afd8 <__ieee754_pow+0x418>)
 800aeb8:	f7f5 f98a 	bl	80001d0 <__aeabi_dsub>
 800aebc:	4622      	mov	r2, r4
 800aebe:	4680      	mov	r8, r0
 800aec0:	4689      	mov	r9, r1
 800aec2:	462b      	mov	r3, r5
 800aec4:	4620      	mov	r0, r4
 800aec6:	4629      	mov	r1, r5
 800aec8:	f7f5 fb3a 	bl	8000540 <__aeabi_dmul>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4640      	mov	r0, r8
 800aed2:	4649      	mov	r1, r9
 800aed4:	f7f5 fb34 	bl	8000540 <__aeabi_dmul>
 800aed8:	a33b      	add	r3, pc, #236	@ (adr r3, 800afc8 <__ieee754_pow+0x408>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 fb2f 	bl	8000540 <__aeabi_dmul>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	4650      	mov	r0, sl
 800aee8:	4659      	mov	r1, fp
 800aeea:	f7f5 f971 	bl	80001d0 <__aeabi_dsub>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4680      	mov	r8, r0
 800aef4:	4689      	mov	r9, r1
 800aef6:	4630      	mov	r0, r6
 800aef8:	4639      	mov	r1, r7
 800aefa:	f7f5 f96b 	bl	80001d4 <__adddf3>
 800aefe:	2400      	movs	r4, #0
 800af00:	4632      	mov	r2, r6
 800af02:	463b      	mov	r3, r7
 800af04:	4620      	mov	r0, r4
 800af06:	460d      	mov	r5, r1
 800af08:	f7f5 f962 	bl	80001d0 <__aeabi_dsub>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4640      	mov	r0, r8
 800af12:	4649      	mov	r1, r9
 800af14:	f7f5 f95c 	bl	80001d0 <__aeabi_dsub>
 800af18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af20:	2300      	movs	r3, #0
 800af22:	9304      	str	r3, [sp, #16]
 800af24:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800af28:	4606      	mov	r6, r0
 800af2a:	460f      	mov	r7, r1
 800af2c:	4652      	mov	r2, sl
 800af2e:	465b      	mov	r3, fp
 800af30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af34:	f7f5 f94c 	bl	80001d0 <__aeabi_dsub>
 800af38:	4622      	mov	r2, r4
 800af3a:	462b      	mov	r3, r5
 800af3c:	f7f5 fb00 	bl	8000540 <__aeabi_dmul>
 800af40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af44:	4680      	mov	r8, r0
 800af46:	4689      	mov	r9, r1
 800af48:	4630      	mov	r0, r6
 800af4a:	4639      	mov	r1, r7
 800af4c:	f7f5 faf8 	bl	8000540 <__aeabi_dmul>
 800af50:	4602      	mov	r2, r0
 800af52:	460b      	mov	r3, r1
 800af54:	4640      	mov	r0, r8
 800af56:	4649      	mov	r1, r9
 800af58:	f7f5 f93c 	bl	80001d4 <__adddf3>
 800af5c:	4652      	mov	r2, sl
 800af5e:	465b      	mov	r3, fp
 800af60:	4606      	mov	r6, r0
 800af62:	460f      	mov	r7, r1
 800af64:	4620      	mov	r0, r4
 800af66:	4629      	mov	r1, r5
 800af68:	f7f5 faea 	bl	8000540 <__aeabi_dmul>
 800af6c:	460b      	mov	r3, r1
 800af6e:	4602      	mov	r2, r0
 800af70:	4680      	mov	r8, r0
 800af72:	4689      	mov	r9, r1
 800af74:	4630      	mov	r0, r6
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 f92c 	bl	80001d4 <__adddf3>
 800af7c:	4b17      	ldr	r3, [pc, #92]	@ (800afdc <__ieee754_pow+0x41c>)
 800af7e:	4299      	cmp	r1, r3
 800af80:	4604      	mov	r4, r0
 800af82:	460d      	mov	r5, r1
 800af84:	468a      	mov	sl, r1
 800af86:	468b      	mov	fp, r1
 800af88:	f340 82ef 	ble.w	800b56a <__ieee754_pow+0x9aa>
 800af8c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800af90:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800af94:	4303      	orrs	r3, r0
 800af96:	f000 81e8 	beq.w	800b36a <__ieee754_pow+0x7aa>
 800af9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af9e:	2200      	movs	r2, #0
 800afa0:	2300      	movs	r3, #0
 800afa2:	f7f5 fd3f 	bl	8000a24 <__aeabi_dcmplt>
 800afa6:	3800      	subs	r0, #0
 800afa8:	bf18      	it	ne
 800afaa:	2001      	movne	r0, #1
 800afac:	e710      	b.n	800add0 <__ieee754_pow+0x210>
 800afae:	bf00      	nop
 800afb0:	60000000 	.word	0x60000000
 800afb4:	3ff71547 	.word	0x3ff71547
 800afb8:	f85ddf44 	.word	0xf85ddf44
 800afbc:	3e54ae0b 	.word	0x3e54ae0b
 800afc0:	55555555 	.word	0x55555555
 800afc4:	3fd55555 	.word	0x3fd55555
 800afc8:	652b82fe 	.word	0x652b82fe
 800afcc:	3ff71547 	.word	0x3ff71547
 800afd0:	3ff00000 	.word	0x3ff00000
 800afd4:	3fd00000 	.word	0x3fd00000
 800afd8:	3fe00000 	.word	0x3fe00000
 800afdc:	408fffff 	.word	0x408fffff
 800afe0:	4bd5      	ldr	r3, [pc, #852]	@ (800b338 <__ieee754_pow+0x778>)
 800afe2:	402b      	ands	r3, r5
 800afe4:	2200      	movs	r2, #0
 800afe6:	b92b      	cbnz	r3, 800aff4 <__ieee754_pow+0x434>
 800afe8:	4bd4      	ldr	r3, [pc, #848]	@ (800b33c <__ieee754_pow+0x77c>)
 800afea:	f7f5 faa9 	bl	8000540 <__aeabi_dmul>
 800afee:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800aff2:	468b      	mov	fp, r1
 800aff4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800aff8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800affc:	4413      	add	r3, r2
 800affe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b000:	4bcf      	ldr	r3, [pc, #828]	@ (800b340 <__ieee754_pow+0x780>)
 800b002:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b006:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b00a:	459b      	cmp	fp, r3
 800b00c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b010:	dd08      	ble.n	800b024 <__ieee754_pow+0x464>
 800b012:	4bcc      	ldr	r3, [pc, #816]	@ (800b344 <__ieee754_pow+0x784>)
 800b014:	459b      	cmp	fp, r3
 800b016:	f340 81a5 	ble.w	800b364 <__ieee754_pow+0x7a4>
 800b01a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b01c:	3301      	adds	r3, #1
 800b01e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b020:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b024:	f04f 0a00 	mov.w	sl, #0
 800b028:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b02c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b02e:	4bc6      	ldr	r3, [pc, #792]	@ (800b348 <__ieee754_pow+0x788>)
 800b030:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b034:	ed93 7b00 	vldr	d7, [r3]
 800b038:	4629      	mov	r1, r5
 800b03a:	ec53 2b17 	vmov	r2, r3, d7
 800b03e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b042:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b046:	f7f5 f8c3 	bl	80001d0 <__aeabi_dsub>
 800b04a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b04e:	4606      	mov	r6, r0
 800b050:	460f      	mov	r7, r1
 800b052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b056:	f7f5 f8bd 	bl	80001d4 <__adddf3>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	2000      	movs	r0, #0
 800b060:	49ba      	ldr	r1, [pc, #744]	@ (800b34c <__ieee754_pow+0x78c>)
 800b062:	f7f5 fb97 	bl	8000794 <__aeabi_ddiv>
 800b066:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b06a:	4602      	mov	r2, r0
 800b06c:	460b      	mov	r3, r1
 800b06e:	4630      	mov	r0, r6
 800b070:	4639      	mov	r1, r7
 800b072:	f7f5 fa65 	bl	8000540 <__aeabi_dmul>
 800b076:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b07a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b07e:	106d      	asrs	r5, r5, #1
 800b080:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b084:	f04f 0b00 	mov.w	fp, #0
 800b088:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b08c:	4661      	mov	r1, ip
 800b08e:	2200      	movs	r2, #0
 800b090:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b094:	4658      	mov	r0, fp
 800b096:	46e1      	mov	r9, ip
 800b098:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b09c:	4614      	mov	r4, r2
 800b09e:	461d      	mov	r5, r3
 800b0a0:	f7f5 fa4e 	bl	8000540 <__aeabi_dmul>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	f7f5 f890 	bl	80001d0 <__aeabi_dsub>
 800b0b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0b4:	4606      	mov	r6, r0
 800b0b6:	460f      	mov	r7, r1
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	f7f5 f888 	bl	80001d0 <__aeabi_dsub>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b0c8:	f7f5 f882 	bl	80001d0 <__aeabi_dsub>
 800b0cc:	465a      	mov	r2, fp
 800b0ce:	464b      	mov	r3, r9
 800b0d0:	f7f5 fa36 	bl	8000540 <__aeabi_dmul>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4630      	mov	r0, r6
 800b0da:	4639      	mov	r1, r7
 800b0dc:	f7f5 f878 	bl	80001d0 <__aeabi_dsub>
 800b0e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b0e4:	f7f5 fa2c 	bl	8000540 <__aeabi_dmul>
 800b0e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	f7f5 fa24 	bl	8000540 <__aeabi_dmul>
 800b0f8:	a37d      	add	r3, pc, #500	@ (adr r3, 800b2f0 <__ieee754_pow+0x730>)
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	4604      	mov	r4, r0
 800b100:	460d      	mov	r5, r1
 800b102:	f7f5 fa1d 	bl	8000540 <__aeabi_dmul>
 800b106:	a37c      	add	r3, pc, #496	@ (adr r3, 800b2f8 <__ieee754_pow+0x738>)
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	f7f5 f862 	bl	80001d4 <__adddf3>
 800b110:	4622      	mov	r2, r4
 800b112:	462b      	mov	r3, r5
 800b114:	f7f5 fa14 	bl	8000540 <__aeabi_dmul>
 800b118:	a379      	add	r3, pc, #484	@ (adr r3, 800b300 <__ieee754_pow+0x740>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f7f5 f859 	bl	80001d4 <__adddf3>
 800b122:	4622      	mov	r2, r4
 800b124:	462b      	mov	r3, r5
 800b126:	f7f5 fa0b 	bl	8000540 <__aeabi_dmul>
 800b12a:	a377      	add	r3, pc, #476	@ (adr r3, 800b308 <__ieee754_pow+0x748>)
 800b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b130:	f7f5 f850 	bl	80001d4 <__adddf3>
 800b134:	4622      	mov	r2, r4
 800b136:	462b      	mov	r3, r5
 800b138:	f7f5 fa02 	bl	8000540 <__aeabi_dmul>
 800b13c:	a374      	add	r3, pc, #464	@ (adr r3, 800b310 <__ieee754_pow+0x750>)
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f7f5 f847 	bl	80001d4 <__adddf3>
 800b146:	4622      	mov	r2, r4
 800b148:	462b      	mov	r3, r5
 800b14a:	f7f5 f9f9 	bl	8000540 <__aeabi_dmul>
 800b14e:	a372      	add	r3, pc, #456	@ (adr r3, 800b318 <__ieee754_pow+0x758>)
 800b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b154:	f7f5 f83e 	bl	80001d4 <__adddf3>
 800b158:	4622      	mov	r2, r4
 800b15a:	4606      	mov	r6, r0
 800b15c:	460f      	mov	r7, r1
 800b15e:	462b      	mov	r3, r5
 800b160:	4620      	mov	r0, r4
 800b162:	4629      	mov	r1, r5
 800b164:	f7f5 f9ec 	bl	8000540 <__aeabi_dmul>
 800b168:	4602      	mov	r2, r0
 800b16a:	460b      	mov	r3, r1
 800b16c:	4630      	mov	r0, r6
 800b16e:	4639      	mov	r1, r7
 800b170:	f7f5 f9e6 	bl	8000540 <__aeabi_dmul>
 800b174:	465a      	mov	r2, fp
 800b176:	4604      	mov	r4, r0
 800b178:	460d      	mov	r5, r1
 800b17a:	464b      	mov	r3, r9
 800b17c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b180:	f7f5 f828 	bl	80001d4 <__adddf3>
 800b184:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b188:	f7f5 f9da 	bl	8000540 <__aeabi_dmul>
 800b18c:	4622      	mov	r2, r4
 800b18e:	462b      	mov	r3, r5
 800b190:	f7f5 f820 	bl	80001d4 <__adddf3>
 800b194:	465a      	mov	r2, fp
 800b196:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b19a:	464b      	mov	r3, r9
 800b19c:	4658      	mov	r0, fp
 800b19e:	4649      	mov	r1, r9
 800b1a0:	f7f5 f9ce 	bl	8000540 <__aeabi_dmul>
 800b1a4:	4b6a      	ldr	r3, [pc, #424]	@ (800b350 <__ieee754_pow+0x790>)
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	460f      	mov	r7, r1
 800b1ac:	f7f5 f812 	bl	80001d4 <__adddf3>
 800b1b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b1b4:	f7f5 f80e 	bl	80001d4 <__adddf3>
 800b1b8:	46d8      	mov	r8, fp
 800b1ba:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b1be:	460d      	mov	r5, r1
 800b1c0:	465a      	mov	r2, fp
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b1cc:	f7f5 f9b8 	bl	8000540 <__aeabi_dmul>
 800b1d0:	465c      	mov	r4, fp
 800b1d2:	4680      	mov	r8, r0
 800b1d4:	4689      	mov	r9, r1
 800b1d6:	4b5e      	ldr	r3, [pc, #376]	@ (800b350 <__ieee754_pow+0x790>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	4620      	mov	r0, r4
 800b1dc:	4629      	mov	r1, r5
 800b1de:	f7f4 fff7 	bl	80001d0 <__aeabi_dsub>
 800b1e2:	4632      	mov	r2, r6
 800b1e4:	463b      	mov	r3, r7
 800b1e6:	f7f4 fff3 	bl	80001d0 <__aeabi_dsub>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1f2:	f7f4 ffed 	bl	80001d0 <__aeabi_dsub>
 800b1f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1fa:	f7f5 f9a1 	bl	8000540 <__aeabi_dmul>
 800b1fe:	4622      	mov	r2, r4
 800b200:	4606      	mov	r6, r0
 800b202:	460f      	mov	r7, r1
 800b204:	462b      	mov	r3, r5
 800b206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b20a:	f7f5 f999 	bl	8000540 <__aeabi_dmul>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	f7f4 ffdd 	bl	80001d4 <__adddf3>
 800b21a:	4606      	mov	r6, r0
 800b21c:	460f      	mov	r7, r1
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4640      	mov	r0, r8
 800b224:	4649      	mov	r1, r9
 800b226:	f7f4 ffd5 	bl	80001d4 <__adddf3>
 800b22a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b22e:	a33c      	add	r3, pc, #240	@ (adr r3, 800b320 <__ieee754_pow+0x760>)
 800b230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b234:	4658      	mov	r0, fp
 800b236:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b23a:	460d      	mov	r5, r1
 800b23c:	f7f5 f980 	bl	8000540 <__aeabi_dmul>
 800b240:	465c      	mov	r4, fp
 800b242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b246:	4642      	mov	r2, r8
 800b248:	464b      	mov	r3, r9
 800b24a:	4620      	mov	r0, r4
 800b24c:	4629      	mov	r1, r5
 800b24e:	f7f4 ffbf 	bl	80001d0 <__aeabi_dsub>
 800b252:	4602      	mov	r2, r0
 800b254:	460b      	mov	r3, r1
 800b256:	4630      	mov	r0, r6
 800b258:	4639      	mov	r1, r7
 800b25a:	f7f4 ffb9 	bl	80001d0 <__aeabi_dsub>
 800b25e:	a332      	add	r3, pc, #200	@ (adr r3, 800b328 <__ieee754_pow+0x768>)
 800b260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b264:	f7f5 f96c 	bl	8000540 <__aeabi_dmul>
 800b268:	a331      	add	r3, pc, #196	@ (adr r3, 800b330 <__ieee754_pow+0x770>)
 800b26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b26e:	4606      	mov	r6, r0
 800b270:	460f      	mov	r7, r1
 800b272:	4620      	mov	r0, r4
 800b274:	4629      	mov	r1, r5
 800b276:	f7f5 f963 	bl	8000540 <__aeabi_dmul>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4630      	mov	r0, r6
 800b280:	4639      	mov	r1, r7
 800b282:	f7f4 ffa7 	bl	80001d4 <__adddf3>
 800b286:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b288:	4b32      	ldr	r3, [pc, #200]	@ (800b354 <__ieee754_pow+0x794>)
 800b28a:	4413      	add	r3, r2
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f4 ffa0 	bl	80001d4 <__adddf3>
 800b294:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b298:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b29a:	f7f5 f8e7 	bl	800046c <__aeabi_i2d>
 800b29e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b2a0:	4b2d      	ldr	r3, [pc, #180]	@ (800b358 <__ieee754_pow+0x798>)
 800b2a2:	4413      	add	r3, r2
 800b2a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b2ae:	460f      	mov	r7, r1
 800b2b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b2b4:	f7f4 ff8e 	bl	80001d4 <__adddf3>
 800b2b8:	4642      	mov	r2, r8
 800b2ba:	464b      	mov	r3, r9
 800b2bc:	f7f4 ff8a 	bl	80001d4 <__adddf3>
 800b2c0:	4632      	mov	r2, r6
 800b2c2:	463b      	mov	r3, r7
 800b2c4:	f7f4 ff86 	bl	80001d4 <__adddf3>
 800b2c8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b2cc:	4632      	mov	r2, r6
 800b2ce:	463b      	mov	r3, r7
 800b2d0:	4658      	mov	r0, fp
 800b2d2:	460d      	mov	r5, r1
 800b2d4:	f7f4 ff7c 	bl	80001d0 <__aeabi_dsub>
 800b2d8:	4642      	mov	r2, r8
 800b2da:	464b      	mov	r3, r9
 800b2dc:	f7f4 ff78 	bl	80001d0 <__aeabi_dsub>
 800b2e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2e4:	f7f4 ff74 	bl	80001d0 <__aeabi_dsub>
 800b2e8:	465c      	mov	r4, fp
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	e036      	b.n	800b35c <__ieee754_pow+0x79c>
 800b2ee:	bf00      	nop
 800b2f0:	4a454eef 	.word	0x4a454eef
 800b2f4:	3fca7e28 	.word	0x3fca7e28
 800b2f8:	93c9db65 	.word	0x93c9db65
 800b2fc:	3fcd864a 	.word	0x3fcd864a
 800b300:	a91d4101 	.word	0xa91d4101
 800b304:	3fd17460 	.word	0x3fd17460
 800b308:	518f264d 	.word	0x518f264d
 800b30c:	3fd55555 	.word	0x3fd55555
 800b310:	db6fabff 	.word	0xdb6fabff
 800b314:	3fdb6db6 	.word	0x3fdb6db6
 800b318:	33333303 	.word	0x33333303
 800b31c:	3fe33333 	.word	0x3fe33333
 800b320:	e0000000 	.word	0xe0000000
 800b324:	3feec709 	.word	0x3feec709
 800b328:	dc3a03fd 	.word	0xdc3a03fd
 800b32c:	3feec709 	.word	0x3feec709
 800b330:	145b01f5 	.word	0x145b01f5
 800b334:	be3e2fe0 	.word	0xbe3e2fe0
 800b338:	7ff00000 	.word	0x7ff00000
 800b33c:	43400000 	.word	0x43400000
 800b340:	0003988e 	.word	0x0003988e
 800b344:	000bb679 	.word	0x000bb679
 800b348:	0800c480 	.word	0x0800c480
 800b34c:	3ff00000 	.word	0x3ff00000
 800b350:	40080000 	.word	0x40080000
 800b354:	0800c460 	.word	0x0800c460
 800b358:	0800c470 	.word	0x0800c470
 800b35c:	460b      	mov	r3, r1
 800b35e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b362:	e5d7      	b.n	800af14 <__ieee754_pow+0x354>
 800b364:	f04f 0a01 	mov.w	sl, #1
 800b368:	e65e      	b.n	800b028 <__ieee754_pow+0x468>
 800b36a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b63c <__ieee754_pow+0xa7c>)
 800b36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b370:	4630      	mov	r0, r6
 800b372:	4639      	mov	r1, r7
 800b374:	f7f4 ff2e 	bl	80001d4 <__adddf3>
 800b378:	4642      	mov	r2, r8
 800b37a:	e9cd 0100 	strd	r0, r1, [sp]
 800b37e:	464b      	mov	r3, r9
 800b380:	4620      	mov	r0, r4
 800b382:	4629      	mov	r1, r5
 800b384:	f7f4 ff24 	bl	80001d0 <__aeabi_dsub>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b390:	f7f5 fb66 	bl	8000a60 <__aeabi_dcmpgt>
 800b394:	2800      	cmp	r0, #0
 800b396:	f47f ae00 	bne.w	800af9a <__ieee754_pow+0x3da>
 800b39a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b39e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b3a2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b3a6:	fa43 fa0a 	asr.w	sl, r3, sl
 800b3aa:	44da      	add	sl, fp
 800b3ac:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b3b0:	489d      	ldr	r0, [pc, #628]	@ (800b628 <__ieee754_pow+0xa68>)
 800b3b2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b3b6:	4108      	asrs	r0, r1
 800b3b8:	ea00 030a 	and.w	r3, r0, sl
 800b3bc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b3c0:	f1c1 0114 	rsb	r1, r1, #20
 800b3c4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b3c8:	fa4a fa01 	asr.w	sl, sl, r1
 800b3cc:	f1bb 0f00 	cmp.w	fp, #0
 800b3d0:	4640      	mov	r0, r8
 800b3d2:	4649      	mov	r1, r9
 800b3d4:	f04f 0200 	mov.w	r2, #0
 800b3d8:	bfb8      	it	lt
 800b3da:	f1ca 0a00 	rsblt	sl, sl, #0
 800b3de:	f7f4 fef7 	bl	80001d0 <__aeabi_dsub>
 800b3e2:	4680      	mov	r8, r0
 800b3e4:	4689      	mov	r9, r1
 800b3e6:	4632      	mov	r2, r6
 800b3e8:	463b      	mov	r3, r7
 800b3ea:	4640      	mov	r0, r8
 800b3ec:	4649      	mov	r1, r9
 800b3ee:	f7f4 fef1 	bl	80001d4 <__adddf3>
 800b3f2:	2400      	movs	r4, #0
 800b3f4:	a37c      	add	r3, pc, #496	@ (adr r3, 800b5e8 <__ieee754_pow+0xa28>)
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	460d      	mov	r5, r1
 800b3fe:	f7f5 f89f 	bl	8000540 <__aeabi_dmul>
 800b402:	4642      	mov	r2, r8
 800b404:	e9cd 0100 	strd	r0, r1, [sp]
 800b408:	464b      	mov	r3, r9
 800b40a:	4620      	mov	r0, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	f7f4 fedf 	bl	80001d0 <__aeabi_dsub>
 800b412:	4602      	mov	r2, r0
 800b414:	460b      	mov	r3, r1
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	f7f4 fed9 	bl	80001d0 <__aeabi_dsub>
 800b41e:	a374      	add	r3, pc, #464	@ (adr r3, 800b5f0 <__ieee754_pow+0xa30>)
 800b420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b424:	f7f5 f88c 	bl	8000540 <__aeabi_dmul>
 800b428:	a373      	add	r3, pc, #460	@ (adr r3, 800b5f8 <__ieee754_pow+0xa38>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	4680      	mov	r8, r0
 800b430:	4689      	mov	r9, r1
 800b432:	4620      	mov	r0, r4
 800b434:	4629      	mov	r1, r5
 800b436:	f7f5 f883 	bl	8000540 <__aeabi_dmul>
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	4640      	mov	r0, r8
 800b440:	4649      	mov	r1, r9
 800b442:	f7f4 fec7 	bl	80001d4 <__adddf3>
 800b446:	4604      	mov	r4, r0
 800b448:	460d      	mov	r5, r1
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b452:	f7f4 febf 	bl	80001d4 <__adddf3>
 800b456:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b45a:	4680      	mov	r8, r0
 800b45c:	4689      	mov	r9, r1
 800b45e:	f7f4 feb7 	bl	80001d0 <__aeabi_dsub>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	4620      	mov	r0, r4
 800b468:	4629      	mov	r1, r5
 800b46a:	f7f4 feb1 	bl	80001d0 <__aeabi_dsub>
 800b46e:	4642      	mov	r2, r8
 800b470:	4606      	mov	r6, r0
 800b472:	460f      	mov	r7, r1
 800b474:	464b      	mov	r3, r9
 800b476:	4640      	mov	r0, r8
 800b478:	4649      	mov	r1, r9
 800b47a:	f7f5 f861 	bl	8000540 <__aeabi_dmul>
 800b47e:	a360      	add	r3, pc, #384	@ (adr r3, 800b600 <__ieee754_pow+0xa40>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	4604      	mov	r4, r0
 800b486:	460d      	mov	r5, r1
 800b488:	f7f5 f85a 	bl	8000540 <__aeabi_dmul>
 800b48c:	a35e      	add	r3, pc, #376	@ (adr r3, 800b608 <__ieee754_pow+0xa48>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	f7f4 fe9d 	bl	80001d0 <__aeabi_dsub>
 800b496:	4622      	mov	r2, r4
 800b498:	462b      	mov	r3, r5
 800b49a:	f7f5 f851 	bl	8000540 <__aeabi_dmul>
 800b49e:	a35c      	add	r3, pc, #368	@ (adr r3, 800b610 <__ieee754_pow+0xa50>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f4 fe96 	bl	80001d4 <__adddf3>
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	462b      	mov	r3, r5
 800b4ac:	f7f5 f848 	bl	8000540 <__aeabi_dmul>
 800b4b0:	a359      	add	r3, pc, #356	@ (adr r3, 800b618 <__ieee754_pow+0xa58>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f4 fe8b 	bl	80001d0 <__aeabi_dsub>
 800b4ba:	4622      	mov	r2, r4
 800b4bc:	462b      	mov	r3, r5
 800b4be:	f7f5 f83f 	bl	8000540 <__aeabi_dmul>
 800b4c2:	a357      	add	r3, pc, #348	@ (adr r3, 800b620 <__ieee754_pow+0xa60>)
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	f7f4 fe84 	bl	80001d4 <__adddf3>
 800b4cc:	4622      	mov	r2, r4
 800b4ce:	462b      	mov	r3, r5
 800b4d0:	f7f5 f836 	bl	8000540 <__aeabi_dmul>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4640      	mov	r0, r8
 800b4da:	4649      	mov	r1, r9
 800b4dc:	f7f4 fe78 	bl	80001d0 <__aeabi_dsub>
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	460d      	mov	r5, r1
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4640      	mov	r0, r8
 800b4ea:	4649      	mov	r1, r9
 800b4ec:	f7f5 f828 	bl	8000540 <__aeabi_dmul>
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	e9cd 0100 	strd	r0, r1, [sp]
 800b4f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b4fa:	4620      	mov	r0, r4
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	f7f4 fe67 	bl	80001d0 <__aeabi_dsub>
 800b502:	4602      	mov	r2, r0
 800b504:	460b      	mov	r3, r1
 800b506:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b50a:	f7f5 f943 	bl	8000794 <__aeabi_ddiv>
 800b50e:	4632      	mov	r2, r6
 800b510:	4604      	mov	r4, r0
 800b512:	460d      	mov	r5, r1
 800b514:	463b      	mov	r3, r7
 800b516:	4640      	mov	r0, r8
 800b518:	4649      	mov	r1, r9
 800b51a:	f7f5 f811 	bl	8000540 <__aeabi_dmul>
 800b51e:	4632      	mov	r2, r6
 800b520:	463b      	mov	r3, r7
 800b522:	f7f4 fe57 	bl	80001d4 <__adddf3>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4620      	mov	r0, r4
 800b52c:	4629      	mov	r1, r5
 800b52e:	f7f4 fe4f 	bl	80001d0 <__aeabi_dsub>
 800b532:	4642      	mov	r2, r8
 800b534:	464b      	mov	r3, r9
 800b536:	f7f4 fe4b 	bl	80001d0 <__aeabi_dsub>
 800b53a:	460b      	mov	r3, r1
 800b53c:	4602      	mov	r2, r0
 800b53e:	493b      	ldr	r1, [pc, #236]	@ (800b62c <__ieee754_pow+0xa6c>)
 800b540:	2000      	movs	r0, #0
 800b542:	f7f4 fe45 	bl	80001d0 <__aeabi_dsub>
 800b546:	ec41 0b10 	vmov	d0, r0, r1
 800b54a:	ee10 3a90 	vmov	r3, s1
 800b54e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b556:	da30      	bge.n	800b5ba <__ieee754_pow+0x9fa>
 800b558:	4650      	mov	r0, sl
 800b55a:	f000 fa71 	bl	800ba40 <scalbn>
 800b55e:	ec51 0b10 	vmov	r0, r1, d0
 800b562:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b566:	f7ff bbd2 	b.w	800ad0e <__ieee754_pow+0x14e>
 800b56a:	4c31      	ldr	r4, [pc, #196]	@ (800b630 <__ieee754_pow+0xa70>)
 800b56c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b570:	42a3      	cmp	r3, r4
 800b572:	d91a      	bls.n	800b5aa <__ieee754_pow+0x9ea>
 800b574:	4b2f      	ldr	r3, [pc, #188]	@ (800b634 <__ieee754_pow+0xa74>)
 800b576:	440b      	add	r3, r1
 800b578:	4303      	orrs	r3, r0
 800b57a:	d009      	beq.n	800b590 <__ieee754_pow+0x9d0>
 800b57c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b580:	2200      	movs	r2, #0
 800b582:	2300      	movs	r3, #0
 800b584:	f7f5 fa4e 	bl	8000a24 <__aeabi_dcmplt>
 800b588:	3800      	subs	r0, #0
 800b58a:	bf18      	it	ne
 800b58c:	2001      	movne	r0, #1
 800b58e:	e42b      	b.n	800ade8 <__ieee754_pow+0x228>
 800b590:	4642      	mov	r2, r8
 800b592:	464b      	mov	r3, r9
 800b594:	f7f4 fe1c 	bl	80001d0 <__aeabi_dsub>
 800b598:	4632      	mov	r2, r6
 800b59a:	463b      	mov	r3, r7
 800b59c:	f7f5 fa56 	bl	8000a4c <__aeabi_dcmpge>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d1eb      	bne.n	800b57c <__ieee754_pow+0x9bc>
 800b5a4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b644 <__ieee754_pow+0xa84>
 800b5a8:	e6f7      	b.n	800b39a <__ieee754_pow+0x7da>
 800b5aa:	469a      	mov	sl, r3
 800b5ac:	4b22      	ldr	r3, [pc, #136]	@ (800b638 <__ieee754_pow+0xa78>)
 800b5ae:	459a      	cmp	sl, r3
 800b5b0:	f63f aef3 	bhi.w	800b39a <__ieee754_pow+0x7da>
 800b5b4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b5b8:	e715      	b.n	800b3e6 <__ieee754_pow+0x826>
 800b5ba:	ec51 0b10 	vmov	r0, r1, d0
 800b5be:	4619      	mov	r1, r3
 800b5c0:	e7cf      	b.n	800b562 <__ieee754_pow+0x9a2>
 800b5c2:	491a      	ldr	r1, [pc, #104]	@ (800b62c <__ieee754_pow+0xa6c>)
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	f7ff bb18 	b.w	800abfa <__ieee754_pow+0x3a>
 800b5ca:	2000      	movs	r0, #0
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	f7ff bb14 	b.w	800abfa <__ieee754_pow+0x3a>
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	4639      	mov	r1, r7
 800b5d6:	f7ff bb10 	b.w	800abfa <__ieee754_pow+0x3a>
 800b5da:	460c      	mov	r4, r1
 800b5dc:	f7ff bb5e 	b.w	800ac9c <__ieee754_pow+0xdc>
 800b5e0:	2400      	movs	r4, #0
 800b5e2:	f7ff bb49 	b.w	800ac78 <__ieee754_pow+0xb8>
 800b5e6:	bf00      	nop
 800b5e8:	00000000 	.word	0x00000000
 800b5ec:	3fe62e43 	.word	0x3fe62e43
 800b5f0:	fefa39ef 	.word	0xfefa39ef
 800b5f4:	3fe62e42 	.word	0x3fe62e42
 800b5f8:	0ca86c39 	.word	0x0ca86c39
 800b5fc:	be205c61 	.word	0xbe205c61
 800b600:	72bea4d0 	.word	0x72bea4d0
 800b604:	3e663769 	.word	0x3e663769
 800b608:	c5d26bf1 	.word	0xc5d26bf1
 800b60c:	3ebbbd41 	.word	0x3ebbbd41
 800b610:	af25de2c 	.word	0xaf25de2c
 800b614:	3f11566a 	.word	0x3f11566a
 800b618:	16bebd93 	.word	0x16bebd93
 800b61c:	3f66c16c 	.word	0x3f66c16c
 800b620:	5555553e 	.word	0x5555553e
 800b624:	3fc55555 	.word	0x3fc55555
 800b628:	fff00000 	.word	0xfff00000
 800b62c:	3ff00000 	.word	0x3ff00000
 800b630:	4090cbff 	.word	0x4090cbff
 800b634:	3f6f3400 	.word	0x3f6f3400
 800b638:	3fe00000 	.word	0x3fe00000
 800b63c:	652b82fe 	.word	0x652b82fe
 800b640:	3c971547 	.word	0x3c971547
 800b644:	4090cc00 	.word	0x4090cc00

0800b648 <__ieee754_rem_pio2>:
 800b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b64c:	ec57 6b10 	vmov	r6, r7, d0
 800b650:	4bc5      	ldr	r3, [pc, #788]	@ (800b968 <__ieee754_rem_pio2+0x320>)
 800b652:	b08d      	sub	sp, #52	@ 0x34
 800b654:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b658:	4598      	cmp	r8, r3
 800b65a:	4604      	mov	r4, r0
 800b65c:	9704      	str	r7, [sp, #16]
 800b65e:	d807      	bhi.n	800b670 <__ieee754_rem_pio2+0x28>
 800b660:	2200      	movs	r2, #0
 800b662:	2300      	movs	r3, #0
 800b664:	ed80 0b00 	vstr	d0, [r0]
 800b668:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b66c:	2500      	movs	r5, #0
 800b66e:	e028      	b.n	800b6c2 <__ieee754_rem_pio2+0x7a>
 800b670:	4bbe      	ldr	r3, [pc, #760]	@ (800b96c <__ieee754_rem_pio2+0x324>)
 800b672:	4598      	cmp	r8, r3
 800b674:	d878      	bhi.n	800b768 <__ieee754_rem_pio2+0x120>
 800b676:	9b04      	ldr	r3, [sp, #16]
 800b678:	4dbd      	ldr	r5, [pc, #756]	@ (800b970 <__ieee754_rem_pio2+0x328>)
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	4630      	mov	r0, r6
 800b67e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b930 <__ieee754_rem_pio2+0x2e8>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	4639      	mov	r1, r7
 800b686:	dd38      	ble.n	800b6fa <__ieee754_rem_pio2+0xb2>
 800b688:	f7f4 fda2 	bl	80001d0 <__aeabi_dsub>
 800b68c:	45a8      	cmp	r8, r5
 800b68e:	4606      	mov	r6, r0
 800b690:	460f      	mov	r7, r1
 800b692:	d01a      	beq.n	800b6ca <__ieee754_rem_pio2+0x82>
 800b694:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b938 <__ieee754_rem_pio2+0x2f0>)
 800b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69a:	f7f4 fd99 	bl	80001d0 <__aeabi_dsub>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	4680      	mov	r8, r0
 800b6a4:	4689      	mov	r9, r1
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	f7f4 fd91 	bl	80001d0 <__aeabi_dsub>
 800b6ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b938 <__ieee754_rem_pio2+0x2f0>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f4 fd8c 	bl	80001d0 <__aeabi_dsub>
 800b6b8:	e9c4 8900 	strd	r8, r9, [r4]
 800b6bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b6c0:	2501      	movs	r5, #1
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	b00d      	add	sp, #52	@ 0x34
 800b6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ca:	a39d      	add	r3, pc, #628	@ (adr r3, 800b940 <__ieee754_rem_pio2+0x2f8>)
 800b6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d0:	f7f4 fd7e 	bl	80001d0 <__aeabi_dsub>
 800b6d4:	a39c      	add	r3, pc, #624	@ (adr r3, 800b948 <__ieee754_rem_pio2+0x300>)
 800b6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	f7f4 fd77 	bl	80001d0 <__aeabi_dsub>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	4680      	mov	r8, r0
 800b6e8:	4689      	mov	r9, r1
 800b6ea:	4630      	mov	r0, r6
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	f7f4 fd6f 	bl	80001d0 <__aeabi_dsub>
 800b6f2:	a395      	add	r3, pc, #596	@ (adr r3, 800b948 <__ieee754_rem_pio2+0x300>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	e7dc      	b.n	800b6b4 <__ieee754_rem_pio2+0x6c>
 800b6fa:	f7f4 fd6b 	bl	80001d4 <__adddf3>
 800b6fe:	45a8      	cmp	r8, r5
 800b700:	4606      	mov	r6, r0
 800b702:	460f      	mov	r7, r1
 800b704:	d018      	beq.n	800b738 <__ieee754_rem_pio2+0xf0>
 800b706:	a38c      	add	r3, pc, #560	@ (adr r3, 800b938 <__ieee754_rem_pio2+0x2f0>)
 800b708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70c:	f7f4 fd62 	bl	80001d4 <__adddf3>
 800b710:	4602      	mov	r2, r0
 800b712:	460b      	mov	r3, r1
 800b714:	4680      	mov	r8, r0
 800b716:	4689      	mov	r9, r1
 800b718:	4630      	mov	r0, r6
 800b71a:	4639      	mov	r1, r7
 800b71c:	f7f4 fd58 	bl	80001d0 <__aeabi_dsub>
 800b720:	a385      	add	r3, pc, #532	@ (adr r3, 800b938 <__ieee754_rem_pio2+0x2f0>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 fd55 	bl	80001d4 <__adddf3>
 800b72a:	f04f 35ff 	mov.w	r5, #4294967295
 800b72e:	e9c4 8900 	strd	r8, r9, [r4]
 800b732:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b736:	e7c4      	b.n	800b6c2 <__ieee754_rem_pio2+0x7a>
 800b738:	a381      	add	r3, pc, #516	@ (adr r3, 800b940 <__ieee754_rem_pio2+0x2f8>)
 800b73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73e:	f7f4 fd49 	bl	80001d4 <__adddf3>
 800b742:	a381      	add	r3, pc, #516	@ (adr r3, 800b948 <__ieee754_rem_pio2+0x300>)
 800b744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b748:	4606      	mov	r6, r0
 800b74a:	460f      	mov	r7, r1
 800b74c:	f7f4 fd42 	bl	80001d4 <__adddf3>
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4680      	mov	r8, r0
 800b756:	4689      	mov	r9, r1
 800b758:	4630      	mov	r0, r6
 800b75a:	4639      	mov	r1, r7
 800b75c:	f7f4 fd38 	bl	80001d0 <__aeabi_dsub>
 800b760:	a379      	add	r3, pc, #484	@ (adr r3, 800b948 <__ieee754_rem_pio2+0x300>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	e7de      	b.n	800b726 <__ieee754_rem_pio2+0xde>
 800b768:	4b82      	ldr	r3, [pc, #520]	@ (800b974 <__ieee754_rem_pio2+0x32c>)
 800b76a:	4598      	cmp	r8, r3
 800b76c:	f200 80d1 	bhi.w	800b912 <__ieee754_rem_pio2+0x2ca>
 800b770:	f7fe fe96 	bl	800a4a0 <fabs>
 800b774:	ec57 6b10 	vmov	r6, r7, d0
 800b778:	a375      	add	r3, pc, #468	@ (adr r3, 800b950 <__ieee754_rem_pio2+0x308>)
 800b77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77e:	4630      	mov	r0, r6
 800b780:	4639      	mov	r1, r7
 800b782:	f7f4 fedd 	bl	8000540 <__aeabi_dmul>
 800b786:	4b7c      	ldr	r3, [pc, #496]	@ (800b978 <__ieee754_rem_pio2+0x330>)
 800b788:	2200      	movs	r2, #0
 800b78a:	f7f4 fd23 	bl	80001d4 <__adddf3>
 800b78e:	f7f5 f987 	bl	8000aa0 <__aeabi_d2iz>
 800b792:	4605      	mov	r5, r0
 800b794:	f7f4 fe6a 	bl	800046c <__aeabi_i2d>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7a0:	a363      	add	r3, pc, #396	@ (adr r3, 800b930 <__ieee754_rem_pio2+0x2e8>)
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f7f4 fecb 	bl	8000540 <__aeabi_dmul>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	f7f4 fd0d 	bl	80001d0 <__aeabi_dsub>
 800b7b6:	a360      	add	r3, pc, #384	@ (adr r3, 800b938 <__ieee754_rem_pio2+0x2f0>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	4682      	mov	sl, r0
 800b7be:	468b      	mov	fp, r1
 800b7c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7c4:	f7f4 febc 	bl	8000540 <__aeabi_dmul>
 800b7c8:	2d1f      	cmp	r5, #31
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	460f      	mov	r7, r1
 800b7ce:	dc0c      	bgt.n	800b7ea <__ieee754_rem_pio2+0x1a2>
 800b7d0:	4b6a      	ldr	r3, [pc, #424]	@ (800b97c <__ieee754_rem_pio2+0x334>)
 800b7d2:	1e6a      	subs	r2, r5, #1
 800b7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7d8:	4543      	cmp	r3, r8
 800b7da:	d006      	beq.n	800b7ea <__ieee754_rem_pio2+0x1a2>
 800b7dc:	4632      	mov	r2, r6
 800b7de:	463b      	mov	r3, r7
 800b7e0:	4650      	mov	r0, sl
 800b7e2:	4659      	mov	r1, fp
 800b7e4:	f7f4 fcf4 	bl	80001d0 <__aeabi_dsub>
 800b7e8:	e00e      	b.n	800b808 <__ieee754_rem_pio2+0x1c0>
 800b7ea:	463b      	mov	r3, r7
 800b7ec:	4632      	mov	r2, r6
 800b7ee:	4650      	mov	r0, sl
 800b7f0:	4659      	mov	r1, fp
 800b7f2:	f7f4 fced 	bl	80001d0 <__aeabi_dsub>
 800b7f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b7fa:	9305      	str	r3, [sp, #20]
 800b7fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b800:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b804:	2b10      	cmp	r3, #16
 800b806:	dc02      	bgt.n	800b80e <__ieee754_rem_pio2+0x1c6>
 800b808:	e9c4 0100 	strd	r0, r1, [r4]
 800b80c:	e039      	b.n	800b882 <__ieee754_rem_pio2+0x23a>
 800b80e:	a34c      	add	r3, pc, #304	@ (adr r3, 800b940 <__ieee754_rem_pio2+0x2f8>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b818:	f7f4 fe92 	bl	8000540 <__aeabi_dmul>
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	4650      	mov	r0, sl
 800b826:	4659      	mov	r1, fp
 800b828:	f7f4 fcd2 	bl	80001d0 <__aeabi_dsub>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	4680      	mov	r8, r0
 800b832:	4689      	mov	r9, r1
 800b834:	4650      	mov	r0, sl
 800b836:	4659      	mov	r1, fp
 800b838:	f7f4 fcca 	bl	80001d0 <__aeabi_dsub>
 800b83c:	4632      	mov	r2, r6
 800b83e:	463b      	mov	r3, r7
 800b840:	f7f4 fcc6 	bl	80001d0 <__aeabi_dsub>
 800b844:	a340      	add	r3, pc, #256	@ (adr r3, 800b948 <__ieee754_rem_pio2+0x300>)
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	4606      	mov	r6, r0
 800b84c:	460f      	mov	r7, r1
 800b84e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b852:	f7f4 fe75 	bl	8000540 <__aeabi_dmul>
 800b856:	4632      	mov	r2, r6
 800b858:	463b      	mov	r3, r7
 800b85a:	f7f4 fcb9 	bl	80001d0 <__aeabi_dsub>
 800b85e:	4602      	mov	r2, r0
 800b860:	460b      	mov	r3, r1
 800b862:	4606      	mov	r6, r0
 800b864:	460f      	mov	r7, r1
 800b866:	4640      	mov	r0, r8
 800b868:	4649      	mov	r1, r9
 800b86a:	f7f4 fcb1 	bl	80001d0 <__aeabi_dsub>
 800b86e:	9a05      	ldr	r2, [sp, #20]
 800b870:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	2b31      	cmp	r3, #49	@ 0x31
 800b878:	dc20      	bgt.n	800b8bc <__ieee754_rem_pio2+0x274>
 800b87a:	e9c4 0100 	strd	r0, r1, [r4]
 800b87e:	46c2      	mov	sl, r8
 800b880:	46cb      	mov	fp, r9
 800b882:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b886:	4650      	mov	r0, sl
 800b888:	4642      	mov	r2, r8
 800b88a:	464b      	mov	r3, r9
 800b88c:	4659      	mov	r1, fp
 800b88e:	f7f4 fc9f 	bl	80001d0 <__aeabi_dsub>
 800b892:	463b      	mov	r3, r7
 800b894:	4632      	mov	r2, r6
 800b896:	f7f4 fc9b 	bl	80001d0 <__aeabi_dsub>
 800b89a:	9b04      	ldr	r3, [sp, #16]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b8a2:	f6bf af0e 	bge.w	800b6c2 <__ieee754_rem_pio2+0x7a>
 800b8a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b8aa:	6063      	str	r3, [r4, #4]
 800b8ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b8b0:	f8c4 8000 	str.w	r8, [r4]
 800b8b4:	60a0      	str	r0, [r4, #8]
 800b8b6:	60e3      	str	r3, [r4, #12]
 800b8b8:	426d      	negs	r5, r5
 800b8ba:	e702      	b.n	800b6c2 <__ieee754_rem_pio2+0x7a>
 800b8bc:	a326      	add	r3, pc, #152	@ (adr r3, 800b958 <__ieee754_rem_pio2+0x310>)
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c6:	f7f4 fe3b 	bl	8000540 <__aeabi_dmul>
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	4649      	mov	r1, r9
 800b8d6:	f7f4 fc7b 	bl	80001d0 <__aeabi_dsub>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4682      	mov	sl, r0
 800b8e0:	468b      	mov	fp, r1
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	4649      	mov	r1, r9
 800b8e6:	f7f4 fc73 	bl	80001d0 <__aeabi_dsub>
 800b8ea:	4632      	mov	r2, r6
 800b8ec:	463b      	mov	r3, r7
 800b8ee:	f7f4 fc6f 	bl	80001d0 <__aeabi_dsub>
 800b8f2:	a31b      	add	r3, pc, #108	@ (adr r3, 800b960 <__ieee754_rem_pio2+0x318>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	460f      	mov	r7, r1
 800b8fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b900:	f7f4 fe1e 	bl	8000540 <__aeabi_dmul>
 800b904:	4632      	mov	r2, r6
 800b906:	463b      	mov	r3, r7
 800b908:	f7f4 fc62 	bl	80001d0 <__aeabi_dsub>
 800b90c:	4606      	mov	r6, r0
 800b90e:	460f      	mov	r7, r1
 800b910:	e764      	b.n	800b7dc <__ieee754_rem_pio2+0x194>
 800b912:	4b1b      	ldr	r3, [pc, #108]	@ (800b980 <__ieee754_rem_pio2+0x338>)
 800b914:	4598      	cmp	r8, r3
 800b916:	d935      	bls.n	800b984 <__ieee754_rem_pio2+0x33c>
 800b918:	4632      	mov	r2, r6
 800b91a:	463b      	mov	r3, r7
 800b91c:	4630      	mov	r0, r6
 800b91e:	4639      	mov	r1, r7
 800b920:	f7f4 fc56 	bl	80001d0 <__aeabi_dsub>
 800b924:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b928:	e9c4 0100 	strd	r0, r1, [r4]
 800b92c:	e69e      	b.n	800b66c <__ieee754_rem_pio2+0x24>
 800b92e:	bf00      	nop
 800b930:	54400000 	.word	0x54400000
 800b934:	3ff921fb 	.word	0x3ff921fb
 800b938:	1a626331 	.word	0x1a626331
 800b93c:	3dd0b461 	.word	0x3dd0b461
 800b940:	1a600000 	.word	0x1a600000
 800b944:	3dd0b461 	.word	0x3dd0b461
 800b948:	2e037073 	.word	0x2e037073
 800b94c:	3ba3198a 	.word	0x3ba3198a
 800b950:	6dc9c883 	.word	0x6dc9c883
 800b954:	3fe45f30 	.word	0x3fe45f30
 800b958:	2e000000 	.word	0x2e000000
 800b95c:	3ba3198a 	.word	0x3ba3198a
 800b960:	252049c1 	.word	0x252049c1
 800b964:	397b839a 	.word	0x397b839a
 800b968:	3fe921fb 	.word	0x3fe921fb
 800b96c:	4002d97b 	.word	0x4002d97b
 800b970:	3ff921fb 	.word	0x3ff921fb
 800b974:	413921fb 	.word	0x413921fb
 800b978:	3fe00000 	.word	0x3fe00000
 800b97c:	0800c490 	.word	0x0800c490
 800b980:	7fefffff 	.word	0x7fefffff
 800b984:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b988:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b98c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b990:	4630      	mov	r0, r6
 800b992:	460f      	mov	r7, r1
 800b994:	f7f5 f884 	bl	8000aa0 <__aeabi_d2iz>
 800b998:	f7f4 fd68 	bl	800046c <__aeabi_i2d>
 800b99c:	4602      	mov	r2, r0
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	4639      	mov	r1, r7
 800b9a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b9a8:	f7f4 fc12 	bl	80001d0 <__aeabi_dsub>
 800b9ac:	4b22      	ldr	r3, [pc, #136]	@ (800ba38 <__ieee754_rem_pio2+0x3f0>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f7f4 fdc6 	bl	8000540 <__aeabi_dmul>
 800b9b4:	460f      	mov	r7, r1
 800b9b6:	4606      	mov	r6, r0
 800b9b8:	f7f5 f872 	bl	8000aa0 <__aeabi_d2iz>
 800b9bc:	f7f4 fd56 	bl	800046c <__aeabi_i2d>
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	460b      	mov	r3, r1
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	4639      	mov	r1, r7
 800b9c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b9cc:	f7f4 fc00 	bl	80001d0 <__aeabi_dsub>
 800b9d0:	4b19      	ldr	r3, [pc, #100]	@ (800ba38 <__ieee754_rem_pio2+0x3f0>)
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f7f4 fdb4 	bl	8000540 <__aeabi_dmul>
 800b9d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b9dc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b9e0:	f04f 0803 	mov.w	r8, #3
 800b9e4:	2600      	movs	r6, #0
 800b9e6:	2700      	movs	r7, #0
 800b9e8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	463b      	mov	r3, r7
 800b9f0:	46c2      	mov	sl, r8
 800b9f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9f6:	f7f5 f80b 	bl	8000a10 <__aeabi_dcmpeq>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d1f4      	bne.n	800b9e8 <__ieee754_rem_pio2+0x3a0>
 800b9fe:	4b0f      	ldr	r3, [pc, #60]	@ (800ba3c <__ieee754_rem_pio2+0x3f4>)
 800ba00:	9301      	str	r3, [sp, #4]
 800ba02:	2302      	movs	r3, #2
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	462a      	mov	r2, r5
 800ba08:	4653      	mov	r3, sl
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	a806      	add	r0, sp, #24
 800ba0e:	f000 f8d3 	bl	800bbb8 <__kernel_rem_pio2>
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	4605      	mov	r5, r0
 800ba18:	f6bf ae53 	bge.w	800b6c2 <__ieee754_rem_pio2+0x7a>
 800ba1c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ba20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba24:	e9c4 2300 	strd	r2, r3, [r4]
 800ba28:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ba2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba30:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ba34:	e740      	b.n	800b8b8 <__ieee754_rem_pio2+0x270>
 800ba36:	bf00      	nop
 800ba38:	41700000 	.word	0x41700000
 800ba3c:	0800c510 	.word	0x0800c510

0800ba40 <scalbn>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	ec55 4b10 	vmov	r4, r5, d0
 800ba46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	462b      	mov	r3, r5
 800ba4e:	b991      	cbnz	r1, 800ba76 <scalbn+0x36>
 800ba50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ba54:	4323      	orrs	r3, r4
 800ba56:	d03d      	beq.n	800bad4 <scalbn+0x94>
 800ba58:	4b35      	ldr	r3, [pc, #212]	@ (800bb30 <scalbn+0xf0>)
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f7f4 fd6e 	bl	8000540 <__aeabi_dmul>
 800ba64:	4b33      	ldr	r3, [pc, #204]	@ (800bb34 <scalbn+0xf4>)
 800ba66:	429e      	cmp	r6, r3
 800ba68:	4604      	mov	r4, r0
 800ba6a:	460d      	mov	r5, r1
 800ba6c:	da0f      	bge.n	800ba8e <scalbn+0x4e>
 800ba6e:	a328      	add	r3, pc, #160	@ (adr r3, 800bb10 <scalbn+0xd0>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	e01e      	b.n	800bab4 <scalbn+0x74>
 800ba76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ba7a:	4291      	cmp	r1, r2
 800ba7c:	d10b      	bne.n	800ba96 <scalbn+0x56>
 800ba7e:	4622      	mov	r2, r4
 800ba80:	4620      	mov	r0, r4
 800ba82:	4629      	mov	r1, r5
 800ba84:	f7f4 fba6 	bl	80001d4 <__adddf3>
 800ba88:	4604      	mov	r4, r0
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	e022      	b.n	800bad4 <scalbn+0x94>
 800ba8e:	460b      	mov	r3, r1
 800ba90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ba94:	3936      	subs	r1, #54	@ 0x36
 800ba96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ba9a:	4296      	cmp	r6, r2
 800ba9c:	dd0d      	ble.n	800baba <scalbn+0x7a>
 800ba9e:	2d00      	cmp	r5, #0
 800baa0:	a11d      	add	r1, pc, #116	@ (adr r1, 800bb18 <scalbn+0xd8>)
 800baa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa6:	da02      	bge.n	800baae <scalbn+0x6e>
 800baa8:	a11d      	add	r1, pc, #116	@ (adr r1, 800bb20 <scalbn+0xe0>)
 800baaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baae:	a31a      	add	r3, pc, #104	@ (adr r3, 800bb18 <scalbn+0xd8>)
 800bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab4:	f7f4 fd44 	bl	8000540 <__aeabi_dmul>
 800bab8:	e7e6      	b.n	800ba88 <scalbn+0x48>
 800baba:	1872      	adds	r2, r6, r1
 800babc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bac0:	428a      	cmp	r2, r1
 800bac2:	dcec      	bgt.n	800ba9e <scalbn+0x5e>
 800bac4:	2a00      	cmp	r2, #0
 800bac6:	dd08      	ble.n	800bada <scalbn+0x9a>
 800bac8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bacc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bad0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bad4:	ec45 4b10 	vmov	d0, r4, r5
 800bad8:	bd70      	pop	{r4, r5, r6, pc}
 800bada:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bade:	da08      	bge.n	800baf2 <scalbn+0xb2>
 800bae0:	2d00      	cmp	r5, #0
 800bae2:	a10b      	add	r1, pc, #44	@ (adr r1, 800bb10 <scalbn+0xd0>)
 800bae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae8:	dac1      	bge.n	800ba6e <scalbn+0x2e>
 800baea:	a10f      	add	r1, pc, #60	@ (adr r1, 800bb28 <scalbn+0xe8>)
 800baec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf0:	e7bd      	b.n	800ba6e <scalbn+0x2e>
 800baf2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800baf6:	3236      	adds	r2, #54	@ 0x36
 800baf8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bafc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb00:	4620      	mov	r0, r4
 800bb02:	4b0d      	ldr	r3, [pc, #52]	@ (800bb38 <scalbn+0xf8>)
 800bb04:	4629      	mov	r1, r5
 800bb06:	2200      	movs	r2, #0
 800bb08:	e7d4      	b.n	800bab4 <scalbn+0x74>
 800bb0a:	bf00      	nop
 800bb0c:	f3af 8000 	nop.w
 800bb10:	c2f8f359 	.word	0xc2f8f359
 800bb14:	01a56e1f 	.word	0x01a56e1f
 800bb18:	8800759c 	.word	0x8800759c
 800bb1c:	7e37e43c 	.word	0x7e37e43c
 800bb20:	8800759c 	.word	0x8800759c
 800bb24:	fe37e43c 	.word	0xfe37e43c
 800bb28:	c2f8f359 	.word	0xc2f8f359
 800bb2c:	81a56e1f 	.word	0x81a56e1f
 800bb30:	43500000 	.word	0x43500000
 800bb34:	ffff3cb0 	.word	0xffff3cb0
 800bb38:	3c900000 	.word	0x3c900000

0800bb3c <with_errno>:
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	ed2d 8b02 	vpush	{d8}
 800bb42:	eeb0 8a40 	vmov.f32	s16, s0
 800bb46:	eef0 8a60 	vmov.f32	s17, s1
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	f7fe f9e4 	bl	8009f18 <__errno>
 800bb50:	eeb0 0a48 	vmov.f32	s0, s16
 800bb54:	eef0 0a68 	vmov.f32	s1, s17
 800bb58:	ecbd 8b02 	vpop	{d8}
 800bb5c:	6004      	str	r4, [r0, #0]
 800bb5e:	bd10      	pop	{r4, pc}

0800bb60 <xflow>:
 800bb60:	4603      	mov	r3, r0
 800bb62:	b507      	push	{r0, r1, r2, lr}
 800bb64:	ec51 0b10 	vmov	r0, r1, d0
 800bb68:	b183      	cbz	r3, 800bb8c <xflow+0x2c>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb70:	e9cd 2300 	strd	r2, r3, [sp]
 800bb74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb78:	f7f4 fce2 	bl	8000540 <__aeabi_dmul>
 800bb7c:	ec41 0b10 	vmov	d0, r0, r1
 800bb80:	2022      	movs	r0, #34	@ 0x22
 800bb82:	b003      	add	sp, #12
 800bb84:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb88:	f7ff bfd8 	b.w	800bb3c <with_errno>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	e7ee      	b.n	800bb70 <xflow+0x10>
 800bb92:	0000      	movs	r0, r0
 800bb94:	0000      	movs	r0, r0
	...

0800bb98 <__math_uflow>:
 800bb98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bba0 <__math_uflow+0x8>
 800bb9c:	f7ff bfe0 	b.w	800bb60 <xflow>
 800bba0:	00000000 	.word	0x00000000
 800bba4:	10000000 	.word	0x10000000

0800bba8 <__math_oflow>:
 800bba8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bbb0 <__math_oflow+0x8>
 800bbac:	f7ff bfd8 	b.w	800bb60 <xflow>
 800bbb0:	00000000 	.word	0x00000000
 800bbb4:	70000000 	.word	0x70000000

0800bbb8 <__kernel_rem_pio2>:
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	ed2d 8b02 	vpush	{d8}
 800bbc0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800bbc4:	f112 0f14 	cmn.w	r2, #20
 800bbc8:	9306      	str	r3, [sp, #24]
 800bbca:	9104      	str	r1, [sp, #16]
 800bbcc:	4bbe      	ldr	r3, [pc, #760]	@ (800bec8 <__kernel_rem_pio2+0x310>)
 800bbce:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800bbd0:	9008      	str	r0, [sp, #32]
 800bbd2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	9b06      	ldr	r3, [sp, #24]
 800bbda:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbde:	bfa8      	it	ge
 800bbe0:	1ed4      	subge	r4, r2, #3
 800bbe2:	9305      	str	r3, [sp, #20]
 800bbe4:	bfb2      	itee	lt
 800bbe6:	2400      	movlt	r4, #0
 800bbe8:	2318      	movge	r3, #24
 800bbea:	fb94 f4f3 	sdivge	r4, r4, r3
 800bbee:	f06f 0317 	mvn.w	r3, #23
 800bbf2:	fb04 3303 	mla	r3, r4, r3, r3
 800bbf6:	eb03 0b02 	add.w	fp, r3, r2
 800bbfa:	9b00      	ldr	r3, [sp, #0]
 800bbfc:	9a05      	ldr	r2, [sp, #20]
 800bbfe:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800beb8 <__kernel_rem_pio2+0x300>
 800bc02:	eb03 0802 	add.w	r8, r3, r2
 800bc06:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bc08:	1aa7      	subs	r7, r4, r2
 800bc0a:	ae20      	add	r6, sp, #128	@ 0x80
 800bc0c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bc10:	2500      	movs	r5, #0
 800bc12:	4545      	cmp	r5, r8
 800bc14:	dd13      	ble.n	800bc3e <__kernel_rem_pio2+0x86>
 800bc16:	9b06      	ldr	r3, [sp, #24]
 800bc18:	aa20      	add	r2, sp, #128	@ 0x80
 800bc1a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bc1e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800bc22:	f04f 0800 	mov.w	r8, #0
 800bc26:	9b00      	ldr	r3, [sp, #0]
 800bc28:	4598      	cmp	r8, r3
 800bc2a:	dc31      	bgt.n	800bc90 <__kernel_rem_pio2+0xd8>
 800bc2c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800beb8 <__kernel_rem_pio2+0x300>
 800bc30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc34:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc38:	462f      	mov	r7, r5
 800bc3a:	2600      	movs	r6, #0
 800bc3c:	e01b      	b.n	800bc76 <__kernel_rem_pio2+0xbe>
 800bc3e:	42ef      	cmn	r7, r5
 800bc40:	d407      	bmi.n	800bc52 <__kernel_rem_pio2+0x9a>
 800bc42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bc46:	f7f4 fc11 	bl	800046c <__aeabi_i2d>
 800bc4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bc4e:	3501      	adds	r5, #1
 800bc50:	e7df      	b.n	800bc12 <__kernel_rem_pio2+0x5a>
 800bc52:	ec51 0b18 	vmov	r0, r1, d8
 800bc56:	e7f8      	b.n	800bc4a <__kernel_rem_pio2+0x92>
 800bc58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc5c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bc60:	f7f4 fc6e 	bl	8000540 <__aeabi_dmul>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc6c:	f7f4 fab2 	bl	80001d4 <__adddf3>
 800bc70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc74:	3601      	adds	r6, #1
 800bc76:	9b05      	ldr	r3, [sp, #20]
 800bc78:	429e      	cmp	r6, r3
 800bc7a:	f1a7 0708 	sub.w	r7, r7, #8
 800bc7e:	ddeb      	ble.n	800bc58 <__kernel_rem_pio2+0xa0>
 800bc80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc84:	f108 0801 	add.w	r8, r8, #1
 800bc88:	ecaa 7b02 	vstmia	sl!, {d7}
 800bc8c:	3508      	adds	r5, #8
 800bc8e:	e7ca      	b.n	800bc26 <__kernel_rem_pio2+0x6e>
 800bc90:	9b00      	ldr	r3, [sp, #0]
 800bc92:	f8dd 8000 	ldr.w	r8, [sp]
 800bc96:	aa0c      	add	r2, sp, #48	@ 0x30
 800bc98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bca0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bca4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bca6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800bcaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bcac:	ab98      	add	r3, sp, #608	@ 0x260
 800bcae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bcb2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800bcb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bcba:	ac0c      	add	r4, sp, #48	@ 0x30
 800bcbc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bcbe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800bcc2:	46a1      	mov	r9, r4
 800bcc4:	46c2      	mov	sl, r8
 800bcc6:	f1ba 0f00 	cmp.w	sl, #0
 800bcca:	f1a5 0508 	sub.w	r5, r5, #8
 800bcce:	dc77      	bgt.n	800bdc0 <__kernel_rem_pio2+0x208>
 800bcd0:	4658      	mov	r0, fp
 800bcd2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800bcd6:	f7ff feb3 	bl	800ba40 <scalbn>
 800bcda:	ec57 6b10 	vmov	r6, r7, d0
 800bcde:	2200      	movs	r2, #0
 800bce0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800bce4:	4630      	mov	r0, r6
 800bce6:	4639      	mov	r1, r7
 800bce8:	f7f4 fc2a 	bl	8000540 <__aeabi_dmul>
 800bcec:	ec41 0b10 	vmov	d0, r0, r1
 800bcf0:	f000 faba 	bl	800c268 <floor>
 800bcf4:	4b75      	ldr	r3, [pc, #468]	@ (800becc <__kernel_rem_pio2+0x314>)
 800bcf6:	ec51 0b10 	vmov	r0, r1, d0
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	f7f4 fc20 	bl	8000540 <__aeabi_dmul>
 800bd00:	4602      	mov	r2, r0
 800bd02:	460b      	mov	r3, r1
 800bd04:	4630      	mov	r0, r6
 800bd06:	4639      	mov	r1, r7
 800bd08:	f7f4 fa62 	bl	80001d0 <__aeabi_dsub>
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	4606      	mov	r6, r0
 800bd10:	f7f4 fec6 	bl	8000aa0 <__aeabi_d2iz>
 800bd14:	9002      	str	r0, [sp, #8]
 800bd16:	f7f4 fba9 	bl	800046c <__aeabi_i2d>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4630      	mov	r0, r6
 800bd20:	4639      	mov	r1, r7
 800bd22:	f7f4 fa55 	bl	80001d0 <__aeabi_dsub>
 800bd26:	f1bb 0f00 	cmp.w	fp, #0
 800bd2a:	4606      	mov	r6, r0
 800bd2c:	460f      	mov	r7, r1
 800bd2e:	dd6c      	ble.n	800be0a <__kernel_rem_pio2+0x252>
 800bd30:	f108 31ff 	add.w	r1, r8, #4294967295
 800bd34:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd36:	9d02      	ldr	r5, [sp, #8]
 800bd38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd3c:	f1cb 0018 	rsb	r0, fp, #24
 800bd40:	fa43 f200 	asr.w	r2, r3, r0
 800bd44:	4415      	add	r5, r2
 800bd46:	4082      	lsls	r2, r0
 800bd48:	1a9b      	subs	r3, r3, r2
 800bd4a:	aa0c      	add	r2, sp, #48	@ 0x30
 800bd4c:	9502      	str	r5, [sp, #8]
 800bd4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bd52:	f1cb 0217 	rsb	r2, fp, #23
 800bd56:	fa43 f902 	asr.w	r9, r3, r2
 800bd5a:	f1b9 0f00 	cmp.w	r9, #0
 800bd5e:	dd64      	ble.n	800be2a <__kernel_rem_pio2+0x272>
 800bd60:	9b02      	ldr	r3, [sp, #8]
 800bd62:	2200      	movs	r2, #0
 800bd64:	3301      	adds	r3, #1
 800bd66:	9302      	str	r3, [sp, #8]
 800bd68:	4615      	mov	r5, r2
 800bd6a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800bd6e:	4590      	cmp	r8, r2
 800bd70:	f300 80b8 	bgt.w	800bee4 <__kernel_rem_pio2+0x32c>
 800bd74:	f1bb 0f00 	cmp.w	fp, #0
 800bd78:	dd07      	ble.n	800bd8a <__kernel_rem_pio2+0x1d2>
 800bd7a:	f1bb 0f01 	cmp.w	fp, #1
 800bd7e:	f000 80bf 	beq.w	800bf00 <__kernel_rem_pio2+0x348>
 800bd82:	f1bb 0f02 	cmp.w	fp, #2
 800bd86:	f000 80c6 	beq.w	800bf16 <__kernel_rem_pio2+0x35e>
 800bd8a:	f1b9 0f02 	cmp.w	r9, #2
 800bd8e:	d14c      	bne.n	800be2a <__kernel_rem_pio2+0x272>
 800bd90:	4632      	mov	r2, r6
 800bd92:	463b      	mov	r3, r7
 800bd94:	494e      	ldr	r1, [pc, #312]	@ (800bed0 <__kernel_rem_pio2+0x318>)
 800bd96:	2000      	movs	r0, #0
 800bd98:	f7f4 fa1a 	bl	80001d0 <__aeabi_dsub>
 800bd9c:	4606      	mov	r6, r0
 800bd9e:	460f      	mov	r7, r1
 800bda0:	2d00      	cmp	r5, #0
 800bda2:	d042      	beq.n	800be2a <__kernel_rem_pio2+0x272>
 800bda4:	4658      	mov	r0, fp
 800bda6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800bec0 <__kernel_rem_pio2+0x308>
 800bdaa:	f7ff fe49 	bl	800ba40 <scalbn>
 800bdae:	4630      	mov	r0, r6
 800bdb0:	4639      	mov	r1, r7
 800bdb2:	ec53 2b10 	vmov	r2, r3, d0
 800bdb6:	f7f4 fa0b 	bl	80001d0 <__aeabi_dsub>
 800bdba:	4606      	mov	r6, r0
 800bdbc:	460f      	mov	r7, r1
 800bdbe:	e034      	b.n	800be2a <__kernel_rem_pio2+0x272>
 800bdc0:	4b44      	ldr	r3, [pc, #272]	@ (800bed4 <__kernel_rem_pio2+0x31c>)
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdc8:	f7f4 fbba 	bl	8000540 <__aeabi_dmul>
 800bdcc:	f7f4 fe68 	bl	8000aa0 <__aeabi_d2iz>
 800bdd0:	f7f4 fb4c 	bl	800046c <__aeabi_i2d>
 800bdd4:	4b40      	ldr	r3, [pc, #256]	@ (800bed8 <__kernel_rem_pio2+0x320>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	4606      	mov	r6, r0
 800bdda:	460f      	mov	r7, r1
 800bddc:	f7f4 fbb0 	bl	8000540 <__aeabi_dmul>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bde8:	f7f4 f9f2 	bl	80001d0 <__aeabi_dsub>
 800bdec:	f7f4 fe58 	bl	8000aa0 <__aeabi_d2iz>
 800bdf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bdf4:	f849 0b04 	str.w	r0, [r9], #4
 800bdf8:	4639      	mov	r1, r7
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7f4 f9ea 	bl	80001d4 <__adddf3>
 800be00:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be08:	e75d      	b.n	800bcc6 <__kernel_rem_pio2+0x10e>
 800be0a:	d107      	bne.n	800be1c <__kernel_rem_pio2+0x264>
 800be0c:	f108 33ff 	add.w	r3, r8, #4294967295
 800be10:	aa0c      	add	r2, sp, #48	@ 0x30
 800be12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be16:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800be1a:	e79e      	b.n	800bd5a <__kernel_rem_pio2+0x1a2>
 800be1c:	4b2f      	ldr	r3, [pc, #188]	@ (800bedc <__kernel_rem_pio2+0x324>)
 800be1e:	2200      	movs	r2, #0
 800be20:	f7f4 fe14 	bl	8000a4c <__aeabi_dcmpge>
 800be24:	2800      	cmp	r0, #0
 800be26:	d143      	bne.n	800beb0 <__kernel_rem_pio2+0x2f8>
 800be28:	4681      	mov	r9, r0
 800be2a:	2200      	movs	r2, #0
 800be2c:	2300      	movs	r3, #0
 800be2e:	4630      	mov	r0, r6
 800be30:	4639      	mov	r1, r7
 800be32:	f7f4 fded 	bl	8000a10 <__aeabi_dcmpeq>
 800be36:	2800      	cmp	r0, #0
 800be38:	f000 80bf 	beq.w	800bfba <__kernel_rem_pio2+0x402>
 800be3c:	f108 33ff 	add.w	r3, r8, #4294967295
 800be40:	2200      	movs	r2, #0
 800be42:	9900      	ldr	r1, [sp, #0]
 800be44:	428b      	cmp	r3, r1
 800be46:	da6e      	bge.n	800bf26 <__kernel_rem_pio2+0x36e>
 800be48:	2a00      	cmp	r2, #0
 800be4a:	f000 8089 	beq.w	800bf60 <__kernel_rem_pio2+0x3a8>
 800be4e:	f108 38ff 	add.w	r8, r8, #4294967295
 800be52:	ab0c      	add	r3, sp, #48	@ 0x30
 800be54:	f1ab 0b18 	sub.w	fp, fp, #24
 800be58:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0f6      	beq.n	800be4e <__kernel_rem_pio2+0x296>
 800be60:	4658      	mov	r0, fp
 800be62:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800bec0 <__kernel_rem_pio2+0x308>
 800be66:	f7ff fdeb 	bl	800ba40 <scalbn>
 800be6a:	f108 0301 	add.w	r3, r8, #1
 800be6e:	00da      	lsls	r2, r3, #3
 800be70:	9205      	str	r2, [sp, #20]
 800be72:	ec55 4b10 	vmov	r4, r5, d0
 800be76:	aa70      	add	r2, sp, #448	@ 0x1c0
 800be78:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800bed4 <__kernel_rem_pio2+0x31c>
 800be7c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800be80:	4646      	mov	r6, r8
 800be82:	f04f 0a00 	mov.w	sl, #0
 800be86:	2e00      	cmp	r6, #0
 800be88:	f280 80cf 	bge.w	800c02a <__kernel_rem_pio2+0x472>
 800be8c:	4644      	mov	r4, r8
 800be8e:	2c00      	cmp	r4, #0
 800be90:	f2c0 80fd 	blt.w	800c08e <__kernel_rem_pio2+0x4d6>
 800be94:	4b12      	ldr	r3, [pc, #72]	@ (800bee0 <__kernel_rem_pio2+0x328>)
 800be96:	461f      	mov	r7, r3
 800be98:	ab70      	add	r3, sp, #448	@ 0x1c0
 800be9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800be9e:	9306      	str	r3, [sp, #24]
 800bea0:	f04f 0a00 	mov.w	sl, #0
 800bea4:	f04f 0b00 	mov.w	fp, #0
 800bea8:	2600      	movs	r6, #0
 800beaa:	eba8 0504 	sub.w	r5, r8, r4
 800beae:	e0e2      	b.n	800c076 <__kernel_rem_pio2+0x4be>
 800beb0:	f04f 0902 	mov.w	r9, #2
 800beb4:	e754      	b.n	800bd60 <__kernel_rem_pio2+0x1a8>
 800beb6:	bf00      	nop
	...
 800bec4:	3ff00000 	.word	0x3ff00000
 800bec8:	0800c658 	.word	0x0800c658
 800becc:	40200000 	.word	0x40200000
 800bed0:	3ff00000 	.word	0x3ff00000
 800bed4:	3e700000 	.word	0x3e700000
 800bed8:	41700000 	.word	0x41700000
 800bedc:	3fe00000 	.word	0x3fe00000
 800bee0:	0800c618 	.word	0x0800c618
 800bee4:	f854 3b04 	ldr.w	r3, [r4], #4
 800bee8:	b945      	cbnz	r5, 800befc <__kernel_rem_pio2+0x344>
 800beea:	b123      	cbz	r3, 800bef6 <__kernel_rem_pio2+0x33e>
 800beec:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bef0:	f844 3c04 	str.w	r3, [r4, #-4]
 800bef4:	2301      	movs	r3, #1
 800bef6:	3201      	adds	r2, #1
 800bef8:	461d      	mov	r5, r3
 800befa:	e738      	b.n	800bd6e <__kernel_rem_pio2+0x1b6>
 800befc:	1acb      	subs	r3, r1, r3
 800befe:	e7f7      	b.n	800bef0 <__kernel_rem_pio2+0x338>
 800bf00:	f108 32ff 	add.w	r2, r8, #4294967295
 800bf04:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bf0e:	a90c      	add	r1, sp, #48	@ 0x30
 800bf10:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bf14:	e739      	b.n	800bd8a <__kernel_rem_pio2+0x1d2>
 800bf16:	f108 32ff 	add.w	r2, r8, #4294967295
 800bf1a:	ab0c      	add	r3, sp, #48	@ 0x30
 800bf1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf20:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bf24:	e7f3      	b.n	800bf0e <__kernel_rem_pio2+0x356>
 800bf26:	a90c      	add	r1, sp, #48	@ 0x30
 800bf28:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bf2c:	3b01      	subs	r3, #1
 800bf2e:	430a      	orrs	r2, r1
 800bf30:	e787      	b.n	800be42 <__kernel_rem_pio2+0x28a>
 800bf32:	3401      	adds	r4, #1
 800bf34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bf38:	2a00      	cmp	r2, #0
 800bf3a:	d0fa      	beq.n	800bf32 <__kernel_rem_pio2+0x37a>
 800bf3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf3e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bf42:	eb0d 0503 	add.w	r5, sp, r3
 800bf46:	9b06      	ldr	r3, [sp, #24]
 800bf48:	aa20      	add	r2, sp, #128	@ 0x80
 800bf4a:	4443      	add	r3, r8
 800bf4c:	f108 0701 	add.w	r7, r8, #1
 800bf50:	3d98      	subs	r5, #152	@ 0x98
 800bf52:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800bf56:	4444      	add	r4, r8
 800bf58:	42bc      	cmp	r4, r7
 800bf5a:	da04      	bge.n	800bf66 <__kernel_rem_pio2+0x3ae>
 800bf5c:	46a0      	mov	r8, r4
 800bf5e:	e6a2      	b.n	800bca6 <__kernel_rem_pio2+0xee>
 800bf60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf62:	2401      	movs	r4, #1
 800bf64:	e7e6      	b.n	800bf34 <__kernel_rem_pio2+0x37c>
 800bf66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf68:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bf6c:	f7f4 fa7e 	bl	800046c <__aeabi_i2d>
 800bf70:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c238 <__kernel_rem_pio2+0x680>
 800bf74:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bf78:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bf7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf80:	46b2      	mov	sl, r6
 800bf82:	f04f 0800 	mov.w	r8, #0
 800bf86:	9b05      	ldr	r3, [sp, #20]
 800bf88:	4598      	cmp	r8, r3
 800bf8a:	dd05      	ble.n	800bf98 <__kernel_rem_pio2+0x3e0>
 800bf8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf90:	3701      	adds	r7, #1
 800bf92:	eca5 7b02 	vstmia	r5!, {d7}
 800bf96:	e7df      	b.n	800bf58 <__kernel_rem_pio2+0x3a0>
 800bf98:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800bf9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bfa0:	f7f4 face 	bl	8000540 <__aeabi_dmul>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfac:	f7f4 f912 	bl	80001d4 <__adddf3>
 800bfb0:	f108 0801 	add.w	r8, r8, #1
 800bfb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfb8:	e7e5      	b.n	800bf86 <__kernel_rem_pio2+0x3ce>
 800bfba:	f1cb 0000 	rsb	r0, fp, #0
 800bfbe:	ec47 6b10 	vmov	d0, r6, r7
 800bfc2:	f7ff fd3d 	bl	800ba40 <scalbn>
 800bfc6:	ec55 4b10 	vmov	r4, r5, d0
 800bfca:	4b9d      	ldr	r3, [pc, #628]	@ (800c240 <__kernel_rem_pio2+0x688>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4620      	mov	r0, r4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 fd3b 	bl	8000a4c <__aeabi_dcmpge>
 800bfd6:	b300      	cbz	r0, 800c01a <__kernel_rem_pio2+0x462>
 800bfd8:	4b9a      	ldr	r3, [pc, #616]	@ (800c244 <__kernel_rem_pio2+0x68c>)
 800bfda:	2200      	movs	r2, #0
 800bfdc:	4620      	mov	r0, r4
 800bfde:	4629      	mov	r1, r5
 800bfe0:	f7f4 faae 	bl	8000540 <__aeabi_dmul>
 800bfe4:	f7f4 fd5c 	bl	8000aa0 <__aeabi_d2iz>
 800bfe8:	4606      	mov	r6, r0
 800bfea:	f7f4 fa3f 	bl	800046c <__aeabi_i2d>
 800bfee:	4b94      	ldr	r3, [pc, #592]	@ (800c240 <__kernel_rem_pio2+0x688>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	f7f4 faa5 	bl	8000540 <__aeabi_dmul>
 800bff6:	460b      	mov	r3, r1
 800bff8:	4602      	mov	r2, r0
 800bffa:	4629      	mov	r1, r5
 800bffc:	4620      	mov	r0, r4
 800bffe:	f7f4 f8e7 	bl	80001d0 <__aeabi_dsub>
 800c002:	f7f4 fd4d 	bl	8000aa0 <__aeabi_d2iz>
 800c006:	ab0c      	add	r3, sp, #48	@ 0x30
 800c008:	f10b 0b18 	add.w	fp, fp, #24
 800c00c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c010:	f108 0801 	add.w	r8, r8, #1
 800c014:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c018:	e722      	b.n	800be60 <__kernel_rem_pio2+0x2a8>
 800c01a:	4620      	mov	r0, r4
 800c01c:	4629      	mov	r1, r5
 800c01e:	f7f4 fd3f 	bl	8000aa0 <__aeabi_d2iz>
 800c022:	ab0c      	add	r3, sp, #48	@ 0x30
 800c024:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c028:	e71a      	b.n	800be60 <__kernel_rem_pio2+0x2a8>
 800c02a:	ab0c      	add	r3, sp, #48	@ 0x30
 800c02c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c030:	f7f4 fa1c 	bl	800046c <__aeabi_i2d>
 800c034:	4622      	mov	r2, r4
 800c036:	462b      	mov	r3, r5
 800c038:	f7f4 fa82 	bl	8000540 <__aeabi_dmul>
 800c03c:	4652      	mov	r2, sl
 800c03e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c042:	465b      	mov	r3, fp
 800c044:	4620      	mov	r0, r4
 800c046:	4629      	mov	r1, r5
 800c048:	f7f4 fa7a 	bl	8000540 <__aeabi_dmul>
 800c04c:	3e01      	subs	r6, #1
 800c04e:	4604      	mov	r4, r0
 800c050:	460d      	mov	r5, r1
 800c052:	e718      	b.n	800be86 <__kernel_rem_pio2+0x2ce>
 800c054:	9906      	ldr	r1, [sp, #24]
 800c056:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c05a:	9106      	str	r1, [sp, #24]
 800c05c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c060:	f7f4 fa6e 	bl	8000540 <__aeabi_dmul>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	4650      	mov	r0, sl
 800c06a:	4659      	mov	r1, fp
 800c06c:	f7f4 f8b2 	bl	80001d4 <__adddf3>
 800c070:	3601      	adds	r6, #1
 800c072:	4682      	mov	sl, r0
 800c074:	468b      	mov	fp, r1
 800c076:	9b00      	ldr	r3, [sp, #0]
 800c078:	429e      	cmp	r6, r3
 800c07a:	dc01      	bgt.n	800c080 <__kernel_rem_pio2+0x4c8>
 800c07c:	42b5      	cmp	r5, r6
 800c07e:	dae9      	bge.n	800c054 <__kernel_rem_pio2+0x49c>
 800c080:	ab48      	add	r3, sp, #288	@ 0x120
 800c082:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c086:	e9c5 ab00 	strd	sl, fp, [r5]
 800c08a:	3c01      	subs	r4, #1
 800c08c:	e6ff      	b.n	800be8e <__kernel_rem_pio2+0x2d6>
 800c08e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c090:	2b02      	cmp	r3, #2
 800c092:	dc0b      	bgt.n	800c0ac <__kernel_rem_pio2+0x4f4>
 800c094:	2b00      	cmp	r3, #0
 800c096:	dc39      	bgt.n	800c10c <__kernel_rem_pio2+0x554>
 800c098:	d05d      	beq.n	800c156 <__kernel_rem_pio2+0x59e>
 800c09a:	9b02      	ldr	r3, [sp, #8]
 800c09c:	f003 0007 	and.w	r0, r3, #7
 800c0a0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c0a4:	ecbd 8b02 	vpop	{d8}
 800c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d1f3      	bne.n	800c09a <__kernel_rem_pio2+0x4e2>
 800c0b2:	9b05      	ldr	r3, [sp, #20]
 800c0b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c0b8:	eb0d 0403 	add.w	r4, sp, r3
 800c0bc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c0c0:	4625      	mov	r5, r4
 800c0c2:	46c2      	mov	sl, r8
 800c0c4:	f1ba 0f00 	cmp.w	sl, #0
 800c0c8:	f1a5 0508 	sub.w	r5, r5, #8
 800c0cc:	dc6b      	bgt.n	800c1a6 <__kernel_rem_pio2+0x5ee>
 800c0ce:	4645      	mov	r5, r8
 800c0d0:	2d01      	cmp	r5, #1
 800c0d2:	f1a4 0408 	sub.w	r4, r4, #8
 800c0d6:	f300 8087 	bgt.w	800c1e8 <__kernel_rem_pio2+0x630>
 800c0da:	9c05      	ldr	r4, [sp, #20]
 800c0dc:	ab48      	add	r3, sp, #288	@ 0x120
 800c0de:	441c      	add	r4, r3
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	2100      	movs	r1, #0
 800c0e4:	f1b8 0f01 	cmp.w	r8, #1
 800c0e8:	f300 809c 	bgt.w	800c224 <__kernel_rem_pio2+0x66c>
 800c0ec:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c0f0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c0f4:	f1b9 0f00 	cmp.w	r9, #0
 800c0f8:	f040 80a6 	bne.w	800c248 <__kernel_rem_pio2+0x690>
 800c0fc:	9b04      	ldr	r3, [sp, #16]
 800c0fe:	e9c3 7800 	strd	r7, r8, [r3]
 800c102:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c106:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c10a:	e7c6      	b.n	800c09a <__kernel_rem_pio2+0x4e2>
 800c10c:	9d05      	ldr	r5, [sp, #20]
 800c10e:	ab48      	add	r3, sp, #288	@ 0x120
 800c110:	441d      	add	r5, r3
 800c112:	4644      	mov	r4, r8
 800c114:	2000      	movs	r0, #0
 800c116:	2100      	movs	r1, #0
 800c118:	2c00      	cmp	r4, #0
 800c11a:	da35      	bge.n	800c188 <__kernel_rem_pio2+0x5d0>
 800c11c:	f1b9 0f00 	cmp.w	r9, #0
 800c120:	d038      	beq.n	800c194 <__kernel_rem_pio2+0x5dc>
 800c122:	4602      	mov	r2, r0
 800c124:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c128:	9c04      	ldr	r4, [sp, #16]
 800c12a:	e9c4 2300 	strd	r2, r3, [r4]
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c136:	f7f4 f84b 	bl	80001d0 <__aeabi_dsub>
 800c13a:	ad4a      	add	r5, sp, #296	@ 0x128
 800c13c:	2401      	movs	r4, #1
 800c13e:	45a0      	cmp	r8, r4
 800c140:	da2b      	bge.n	800c19a <__kernel_rem_pio2+0x5e2>
 800c142:	f1b9 0f00 	cmp.w	r9, #0
 800c146:	d002      	beq.n	800c14e <__kernel_rem_pio2+0x596>
 800c148:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c14c:	4619      	mov	r1, r3
 800c14e:	9b04      	ldr	r3, [sp, #16]
 800c150:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c154:	e7a1      	b.n	800c09a <__kernel_rem_pio2+0x4e2>
 800c156:	9c05      	ldr	r4, [sp, #20]
 800c158:	ab48      	add	r3, sp, #288	@ 0x120
 800c15a:	441c      	add	r4, r3
 800c15c:	2000      	movs	r0, #0
 800c15e:	2100      	movs	r1, #0
 800c160:	f1b8 0f00 	cmp.w	r8, #0
 800c164:	da09      	bge.n	800c17a <__kernel_rem_pio2+0x5c2>
 800c166:	f1b9 0f00 	cmp.w	r9, #0
 800c16a:	d002      	beq.n	800c172 <__kernel_rem_pio2+0x5ba>
 800c16c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c170:	4619      	mov	r1, r3
 800c172:	9b04      	ldr	r3, [sp, #16]
 800c174:	e9c3 0100 	strd	r0, r1, [r3]
 800c178:	e78f      	b.n	800c09a <__kernel_rem_pio2+0x4e2>
 800c17a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c17e:	f7f4 f829 	bl	80001d4 <__adddf3>
 800c182:	f108 38ff 	add.w	r8, r8, #4294967295
 800c186:	e7eb      	b.n	800c160 <__kernel_rem_pio2+0x5a8>
 800c188:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c18c:	f7f4 f822 	bl	80001d4 <__adddf3>
 800c190:	3c01      	subs	r4, #1
 800c192:	e7c1      	b.n	800c118 <__kernel_rem_pio2+0x560>
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	e7c6      	b.n	800c128 <__kernel_rem_pio2+0x570>
 800c19a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c19e:	f7f4 f819 	bl	80001d4 <__adddf3>
 800c1a2:	3401      	adds	r4, #1
 800c1a4:	e7cb      	b.n	800c13e <__kernel_rem_pio2+0x586>
 800c1a6:	ed95 7b00 	vldr	d7, [r5]
 800c1aa:	ed8d 7b00 	vstr	d7, [sp]
 800c1ae:	ed95 7b02 	vldr	d7, [r5, #8]
 800c1b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1b6:	ec53 2b17 	vmov	r2, r3, d7
 800c1ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c1be:	f7f4 f809 	bl	80001d4 <__adddf3>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	460f      	mov	r7, r1
 800c1ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1ce:	f7f3 ffff 	bl	80001d0 <__aeabi_dsub>
 800c1d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1d6:	f7f3 fffd 	bl	80001d4 <__adddf3>
 800c1da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1de:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c1e2:	e9c5 6700 	strd	r6, r7, [r5]
 800c1e6:	e76d      	b.n	800c0c4 <__kernel_rem_pio2+0x50c>
 800c1e8:	ed94 7b00 	vldr	d7, [r4]
 800c1ec:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c1f0:	ec51 0b17 	vmov	r0, r1, d7
 800c1f4:	4652      	mov	r2, sl
 800c1f6:	465b      	mov	r3, fp
 800c1f8:	ed8d 7b00 	vstr	d7, [sp]
 800c1fc:	f7f3 ffea 	bl	80001d4 <__adddf3>
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	4606      	mov	r6, r0
 800c206:	460f      	mov	r7, r1
 800c208:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c20c:	f7f3 ffe0 	bl	80001d0 <__aeabi_dsub>
 800c210:	4652      	mov	r2, sl
 800c212:	465b      	mov	r3, fp
 800c214:	f7f3 ffde 	bl	80001d4 <__adddf3>
 800c218:	3d01      	subs	r5, #1
 800c21a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c21e:	e9c4 6700 	strd	r6, r7, [r4]
 800c222:	e755      	b.n	800c0d0 <__kernel_rem_pio2+0x518>
 800c224:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c228:	f7f3 ffd4 	bl	80001d4 <__adddf3>
 800c22c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c230:	e758      	b.n	800c0e4 <__kernel_rem_pio2+0x52c>
 800c232:	bf00      	nop
 800c234:	f3af 8000 	nop.w
	...
 800c240:	41700000 	.word	0x41700000
 800c244:	3e700000 	.word	0x3e700000
 800c248:	9b04      	ldr	r3, [sp, #16]
 800c24a:	9a04      	ldr	r2, [sp, #16]
 800c24c:	601f      	str	r7, [r3, #0]
 800c24e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c252:	605c      	str	r4, [r3, #4]
 800c254:	609d      	str	r5, [r3, #8]
 800c256:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c25a:	60d3      	str	r3, [r2, #12]
 800c25c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c260:	6110      	str	r0, [r2, #16]
 800c262:	6153      	str	r3, [r2, #20]
 800c264:	e719      	b.n	800c09a <__kernel_rem_pio2+0x4e2>
 800c266:	bf00      	nop

0800c268 <floor>:
 800c268:	ec51 0b10 	vmov	r0, r1, d0
 800c26c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c274:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c278:	2e13      	cmp	r6, #19
 800c27a:	460c      	mov	r4, r1
 800c27c:	4605      	mov	r5, r0
 800c27e:	4680      	mov	r8, r0
 800c280:	dc34      	bgt.n	800c2ec <floor+0x84>
 800c282:	2e00      	cmp	r6, #0
 800c284:	da17      	bge.n	800c2b6 <floor+0x4e>
 800c286:	a332      	add	r3, pc, #200	@ (adr r3, 800c350 <floor+0xe8>)
 800c288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c28c:	f7f3 ffa2 	bl	80001d4 <__adddf3>
 800c290:	2200      	movs	r2, #0
 800c292:	2300      	movs	r3, #0
 800c294:	f7f4 fbe4 	bl	8000a60 <__aeabi_dcmpgt>
 800c298:	b150      	cbz	r0, 800c2b0 <floor+0x48>
 800c29a:	2c00      	cmp	r4, #0
 800c29c:	da55      	bge.n	800c34a <floor+0xe2>
 800c29e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c2a2:	432c      	orrs	r4, r5
 800c2a4:	2500      	movs	r5, #0
 800c2a6:	42ac      	cmp	r4, r5
 800c2a8:	4c2b      	ldr	r4, [pc, #172]	@ (800c358 <floor+0xf0>)
 800c2aa:	bf08      	it	eq
 800c2ac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c2b0:	4621      	mov	r1, r4
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	e023      	b.n	800c2fe <floor+0x96>
 800c2b6:	4f29      	ldr	r7, [pc, #164]	@ (800c35c <floor+0xf4>)
 800c2b8:	4137      	asrs	r7, r6
 800c2ba:	ea01 0307 	and.w	r3, r1, r7
 800c2be:	4303      	orrs	r3, r0
 800c2c0:	d01d      	beq.n	800c2fe <floor+0x96>
 800c2c2:	a323      	add	r3, pc, #140	@ (adr r3, 800c350 <floor+0xe8>)
 800c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c8:	f7f3 ff84 	bl	80001d4 <__adddf3>
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f7f4 fbc6 	bl	8000a60 <__aeabi_dcmpgt>
 800c2d4:	2800      	cmp	r0, #0
 800c2d6:	d0eb      	beq.n	800c2b0 <floor+0x48>
 800c2d8:	2c00      	cmp	r4, #0
 800c2da:	bfbe      	ittt	lt
 800c2dc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c2e0:	4133      	asrlt	r3, r6
 800c2e2:	18e4      	addlt	r4, r4, r3
 800c2e4:	ea24 0407 	bic.w	r4, r4, r7
 800c2e8:	2500      	movs	r5, #0
 800c2ea:	e7e1      	b.n	800c2b0 <floor+0x48>
 800c2ec:	2e33      	cmp	r6, #51	@ 0x33
 800c2ee:	dd0a      	ble.n	800c306 <floor+0x9e>
 800c2f0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c2f4:	d103      	bne.n	800c2fe <floor+0x96>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	460b      	mov	r3, r1
 800c2fa:	f7f3 ff6b 	bl	80001d4 <__adddf3>
 800c2fe:	ec41 0b10 	vmov	d0, r0, r1
 800c302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c306:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c30a:	f04f 37ff 	mov.w	r7, #4294967295
 800c30e:	40df      	lsrs	r7, r3
 800c310:	4207      	tst	r7, r0
 800c312:	d0f4      	beq.n	800c2fe <floor+0x96>
 800c314:	a30e      	add	r3, pc, #56	@ (adr r3, 800c350 <floor+0xe8>)
 800c316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31a:	f7f3 ff5b 	bl	80001d4 <__adddf3>
 800c31e:	2200      	movs	r2, #0
 800c320:	2300      	movs	r3, #0
 800c322:	f7f4 fb9d 	bl	8000a60 <__aeabi_dcmpgt>
 800c326:	2800      	cmp	r0, #0
 800c328:	d0c2      	beq.n	800c2b0 <floor+0x48>
 800c32a:	2c00      	cmp	r4, #0
 800c32c:	da0a      	bge.n	800c344 <floor+0xdc>
 800c32e:	2e14      	cmp	r6, #20
 800c330:	d101      	bne.n	800c336 <floor+0xce>
 800c332:	3401      	adds	r4, #1
 800c334:	e006      	b.n	800c344 <floor+0xdc>
 800c336:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c33a:	2301      	movs	r3, #1
 800c33c:	40b3      	lsls	r3, r6
 800c33e:	441d      	add	r5, r3
 800c340:	4545      	cmp	r5, r8
 800c342:	d3f6      	bcc.n	800c332 <floor+0xca>
 800c344:	ea25 0507 	bic.w	r5, r5, r7
 800c348:	e7b2      	b.n	800c2b0 <floor+0x48>
 800c34a:	2500      	movs	r5, #0
 800c34c:	462c      	mov	r4, r5
 800c34e:	e7af      	b.n	800c2b0 <floor+0x48>
 800c350:	8800759c 	.word	0x8800759c
 800c354:	7e37e43c 	.word	0x7e37e43c
 800c358:	bff00000 	.word	0xbff00000
 800c35c:	000fffff 	.word	0x000fffff

0800c360 <_init>:
 800c360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c362:	bf00      	nop
 800c364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c366:	bc08      	pop	{r3}
 800c368:	469e      	mov	lr, r3
 800c36a:	4770      	bx	lr

0800c36c <_fini>:
 800c36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36e:	bf00      	nop
 800c370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c372:	bc08      	pop	{r3}
 800c374:	469e      	mov	lr, r3
 800c376:	4770      	bx	lr
