
DA_F4_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c388  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800c510  0800c510  0000d510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c800  0800c800  0000e0c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c800  0800c800  0000d800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c808  0800c808  0000e0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c808  0800c808  0000d808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c80c  0800c80c  0000d80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800c810  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e0c8  2**0
                  CONTENTS
 10 .bss          00000af4  200000c8  200000c8  0000e0c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000bbc  20000bbc  0000e0c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e0c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137cb  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027f8  00000000  00000000  000218c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000240c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e90  00000000  00000000  00025320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022176  00000000  00000000  000261b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ff6  00000000  00000000  00048326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0169  00000000  00000000  0005f31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012f485  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057ec  00000000  00000000  0012f4c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00134cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c4f8 	.word	0x0800c4f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	0800c4f8 	.word	0x0800c4f8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b9a0 	b.w	8000ee8 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f83c 	bl	8000c2c <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2lz>:
 8000bc0:	b538      	push	{r3, r4, r5, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	460d      	mov	r5, r1
 8000bca:	f7ff ff2b 	bl	8000a24 <__aeabi_dcmplt>
 8000bce:	b928      	cbnz	r0, 8000bdc <__aeabi_d2lz+0x1c>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bd8:	f000 b80a 	b.w	8000bf0 <__aeabi_d2ulz>
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000be2:	f000 f805 	bl	8000bf0 <__aeabi_d2ulz>
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	bd38      	pop	{r3, r4, r5, pc}
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2ulz>:
 8000bf0:	b5d0      	push	{r4, r6, r7, lr}
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <__aeabi_d2ulz+0x34>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4606      	mov	r6, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	f7ff fca1 	bl	8000540 <__aeabi_dmul>
 8000bfe:	f000 f975 	bl	8000eec <__aeabi_d2uiz>
 8000c02:	4604      	mov	r4, r0
 8000c04:	f7ff fc22 	bl	800044c <__aeabi_ui2d>
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <__aeabi_d2ulz+0x38>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f7ff fc98 	bl	8000540 <__aeabi_dmul>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	4630      	mov	r0, r6
 8000c16:	4639      	mov	r1, r7
 8000c18:	f7ff fada 	bl	80001d0 <__aeabi_dsub>
 8000c1c:	f000 f966 	bl	8000eec <__aeabi_d2uiz>
 8000c20:	4621      	mov	r1, r4
 8000c22:	bdd0      	pop	{r4, r6, r7, pc}
 8000c24:	3df00000 	.word	0x3df00000
 8000c28:	41f00000 	.word	0x41f00000

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	460c      	mov	r4, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14e      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c38:	4694      	mov	ip, r2
 8000c3a:	458c      	cmp	ip, r1
 8000c3c:	4686      	mov	lr, r0
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	d962      	bls.n	8000d0a <__udivmoddi4+0xde>
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	4319      	orrs	r1, r3
 8000c56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5e:	fa1f f68c 	uxth.w	r6, ip
 8000c62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb04 f106 	mul.w	r1, r4, r6
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c82:	f080 8112 	bcs.w	8000eaa <__udivmoddi4+0x27e>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 810f 	bls.w	8000eaa <__udivmoddi4+0x27e>
 8000c8c:	3c02      	subs	r4, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca2:	fb00 f606 	mul.w	r6, r0, r6
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	d90a      	bls.n	8000cc0 <__udivmoddi4+0x94>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb2:	f080 80fc 	bcs.w	8000eae <__udivmoddi4+0x282>
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	f240 80f9 	bls.w	8000eae <__udivmoddi4+0x282>
 8000cbc:	4463      	add	r3, ip
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	1b9b      	subs	r3, r3, r6
 8000cc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	b11d      	cbz	r5, 8000cd2 <__udivmoddi4+0xa6>
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d905      	bls.n	8000ce6 <__udivmoddi4+0xba>
 8000cda:	b10d      	cbz	r5, 8000ce0 <__udivmoddi4+0xb4>
 8000cdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e7f5      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000ce6:	fab3 f183 	clz	r1, r3
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d146      	bne.n	8000d7c <__udivmoddi4+0x150>
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xcc>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f0c0 80f0 	bcc.w	8000ed8 <__udivmoddi4+0x2ac>
 8000cf8:	1a86      	subs	r6, r0, r2
 8000cfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d0e6      	beq.n	8000cd2 <__udivmoddi4+0xa6>
 8000d04:	e9c5 6300 	strd	r6, r3, [r5]
 8000d08:	e7e3      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	f040 8090 	bne.w	8000e30 <__udivmoddi4+0x204>
 8000d10:	eba1 040c 	sub.w	r4, r1, ip
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa1f f78c 	uxth.w	r7, ip
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb08 4416 	mls	r4, r8, r6, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb07 f006 	mul.w	r0, r7, r6
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x11c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x11a>
 8000d40:	4298      	cmp	r0, r3
 8000d42:	f200 80cd 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d46:	4626      	mov	r6, r4
 8000d48:	1a1c      	subs	r4, r3, r0
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d52:	fb08 4410 	mls	r4, r8, r0, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb00 f707 	mul.w	r7, r0, r7
 8000d5e:	429f      	cmp	r7, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x148>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x146>
 8000d6c:	429f      	cmp	r7, r3
 8000d6e:	f200 80b0 	bhi.w	8000ed2 <__udivmoddi4+0x2a6>
 8000d72:	4620      	mov	r0, r4
 8000d74:	1bdb      	subs	r3, r3, r7
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0x9c>
 8000d7c:	f1c1 0620 	rsb	r6, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 f706 	lsr.w	r7, r2, r6
 8000d86:	431f      	orrs	r7, r3
 8000d88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d90:	ea43 030c 	orr.w	r3, r3, ip
 8000d94:	40f4      	lsrs	r4, r6
 8000d96:	fa00 f801 	lsl.w	r8, r0, r1
 8000d9a:	0c38      	lsrs	r0, r7, #16
 8000d9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000da0:	fbb4 fef0 	udiv	lr, r4, r0
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db0:	fb0e f90c 	mul.w	r9, lr, ip
 8000db4:	45a1      	cmp	r9, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	d90a      	bls.n	8000dd2 <__udivmoddi4+0x1a6>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dc2:	f080 8084 	bcs.w	8000ece <__udivmoddi4+0x2a2>
 8000dc6:	45a1      	cmp	r9, r4
 8000dc8:	f240 8081 	bls.w	8000ece <__udivmoddi4+0x2a2>
 8000dcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	eba4 0409 	sub.w	r4, r4, r9
 8000dd6:	fa1f f983 	uxth.w	r9, r3
 8000dda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dde:	fb00 4413 	mls	r4, r0, r3, r4
 8000de2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x1d2>
 8000dee:	193c      	adds	r4, r7, r4
 8000df0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df4:	d267      	bcs.n	8000ec6 <__udivmoddi4+0x29a>
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d965      	bls.n	8000ec6 <__udivmoddi4+0x29a>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e02:	fba0 9302 	umull	r9, r3, r0, r2
 8000e06:	eba4 040c 	sub.w	r4, r4, ip
 8000e0a:	429c      	cmp	r4, r3
 8000e0c:	46ce      	mov	lr, r9
 8000e0e:	469c      	mov	ip, r3
 8000e10:	d351      	bcc.n	8000eb6 <__udivmoddi4+0x28a>
 8000e12:	d04e      	beq.n	8000eb2 <__udivmoddi4+0x286>
 8000e14:	b155      	cbz	r5, 8000e2c <__udivmoddi4+0x200>
 8000e16:	ebb8 030e 	subs.w	r3, r8, lr
 8000e1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e22:	40cb      	lsrs	r3, r1
 8000e24:	431e      	orrs	r6, r3
 8000e26:	40cc      	lsrs	r4, r1
 8000e28:	e9c5 6400 	strd	r6, r4, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e750      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000e30:	f1c2 0320 	rsb	r3, r2, #32
 8000e34:	fa20 f103 	lsr.w	r1, r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e40:	4094      	lsls	r4, r2
 8000e42:	430c      	orrs	r4, r1
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4c:	fa1f f78c 	uxth.w	r7, ip
 8000e50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e54:	fb08 3110 	mls	r1, r8, r0, r3
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5e:	fb00 f107 	mul.w	r1, r0, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x24c>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6e:	d22c      	bcs.n	8000eca <__udivmoddi4+0x29e>
 8000e70:	4299      	cmp	r1, r3
 8000e72:	d92a      	bls.n	8000eca <__udivmoddi4+0x29e>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e80:	fb08 3311 	mls	r3, r8, r1, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb01 f307 	mul.w	r3, r1, r7
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x276>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e98:	d213      	bcs.n	8000ec2 <__udivmoddi4+0x296>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d911      	bls.n	8000ec2 <__udivmoddi4+0x296>
 8000e9e:	3902      	subs	r1, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	1ae4      	subs	r4, r4, r3
 8000ea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea8:	e739      	b.n	8000d1e <__udivmoddi4+0xf2>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	e6f0      	b.n	8000c90 <__udivmoddi4+0x64>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e706      	b.n	8000cc0 <__udivmoddi4+0x94>
 8000eb2:	45c8      	cmp	r8, r9
 8000eb4:	d2ae      	bcs.n	8000e14 <__udivmoddi4+0x1e8>
 8000eb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7a8      	b.n	8000e14 <__udivmoddi4+0x1e8>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	e7ed      	b.n	8000ea2 <__udivmoddi4+0x276>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e799      	b.n	8000dfe <__udivmoddi4+0x1d2>
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e7d4      	b.n	8000e78 <__udivmoddi4+0x24c>
 8000ece:	46d6      	mov	lr, sl
 8000ed0:	e77f      	b.n	8000dd2 <__udivmoddi4+0x1a6>
 8000ed2:	4463      	add	r3, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e74d      	b.n	8000d74 <__udivmoddi4+0x148>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	4623      	mov	r3, r4
 8000edc:	4608      	mov	r0, r1
 8000ede:	e70f      	b.n	8000d00 <__udivmoddi4+0xd4>
 8000ee0:	3e02      	subs	r6, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	e730      	b.n	8000d48 <__udivmoddi4+0x11c>
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__aeabi_d2uiz>:
 8000eec:	004a      	lsls	r2, r1, #1
 8000eee:	d211      	bcs.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ef4:	d211      	bcs.n	8000f1a <__aeabi_d2uiz+0x2e>
 8000ef6:	d50d      	bpl.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000efc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f00:	d40e      	bmi.n	8000f20 <__aeabi_d2uiz+0x34>
 8000f02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f12:	4770      	bx	lr
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	4770      	bx	lr
 8000f1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f1e:	d102      	bne.n	8000f26 <__aeabi_d2uiz+0x3a>
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <delay>:
 *  Created on: Mar 26, 2024
 *      Author: phamt
 */
#include "DelayUs.h"
void delay(unsigned long cycles)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  while(cycles >0)
 8000f34:	e09e      	b.n	8001074 <delay+0x148>
    {
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	bf00      	nop
        asm("nop");asm("nop");
 8001036:	bf00      	nop
 8001038:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	bf00      	nop
        asm("nop");asm("nop");//156 nop
 800106a:	bf00      	nop
 800106c:	bf00      	nop


        //to get 1 uS if delay(1)
  cycles--;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3b01      	subs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
  while(cycles >0)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f47f af5d 	bne.w	8000f36 <delay+0xa>
    }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <M8N_Initialization>:
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_Initialization(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_PRT, sizeof(UBX_CFG_PRT));
 8001090:	221c      	movs	r2, #28
 8001092:	4912      	ldr	r1, [pc, #72]	@ (80010dc <M8N_Initialization+0x50>)
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <M8N_Initialization+0x54>)
 8001096:	f007 fe13 	bl	8008cc0 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_PRT, sizeof(UBX_CFG_PRT), HAL_MAX_DELAY);
	HAL_Delay(500);
 800109a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800109e:	f003 fff7 	bl	8005090 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_MSG, sizeof(UBX_CFG_MSG));
 80010a2:	2210      	movs	r2, #16
 80010a4:	490f      	ldr	r1, [pc, #60]	@ (80010e4 <M8N_Initialization+0x58>)
 80010a6:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <M8N_Initialization+0x54>)
 80010a8:	f007 fe0a 	bl	8008cc0 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_MSG, sizeof(UBX_CFG_MSG), HAL_MAX_DELAY);
	HAL_Delay(500);
 80010ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010b0:	f003 ffee 	bl	8005090 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_RATE, sizeof(UBX_CFG_RATE));
 80010b4:	220e      	movs	r2, #14
 80010b6:	490c      	ldr	r1, [pc, #48]	@ (80010e8 <M8N_Initialization+0x5c>)
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <M8N_Initialization+0x54>)
 80010ba:	f007 fe01 	bl	8008cc0 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_RATE, sizeof(UBX_CFG_RATE), HAL_MAX_DELAY);
	HAL_Delay(500);
 80010be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010c2:	f003 ffe5 	bl	8005090 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_CFG, sizeof(UBX_CFG_CFG));
 80010c6:	2215      	movs	r2, #21
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <M8N_Initialization+0x60>)
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <M8N_Initialization+0x54>)
 80010cc:	f007 fdf8 	bl	8008cc0 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_CFG, sizeof(UBX_CFG_CFG), HAL_MAX_DELAY);
	HAL_Delay(500);
 80010d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010d4:	f003 ffdc 	bl	8005090 <HAL_Delay>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	0800c510 	.word	0x0800c510
 80010e0:	20000898 	.word	0x20000898
 80010e4:	0800c52c 	.word	0x0800c52c
 80010e8:	0800c53c 	.word	0x0800c53c
 80010ec:	0800c54c 	.word	0x0800c54c

080010f0 <setupSensor>:
extern float pid_p_gain_altitude;           //Gain setting for the altitude P-controller (default = 1.4).
extern float pid_i_gain_altitude;           //Gain setting for the altitude I-controller (default = 0.2).
extern float pid_d_gain_altitude;

void setupSensor(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    twiSend(address, 0x1E,1); //just send 1 byte that tells MS5611 to reset
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <setupSensor+0x70>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2201      	movs	r2, #1
 80010fc:	211e      	movs	r1, #30
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fd4e 	bl	8004ba0 <twiSend>
    HAL_Delay(20); //delay 10 mS needed for device to execute reset
 8001104:	2014      	movs	r0, #20
 8001106:	f003 ffc3 	bl	8005090 <HAL_Delay>
    for (int i=1;i<=6;i++)
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	e01e      	b.n	800114e <setupSensor+0x5e>
    {
    twiReceive(address, 0xA0+i*2, 2); //read all 14 bytes for callibration data from PROM
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <setupSensor+0x70>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3350      	adds	r3, #80	@ 0x50
 8001118:	b2db      	uxtb	r3, r3
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2202      	movs	r2, #2
 8001120:	4619      	mov	r1, r3
 8001122:	f003 fd8f 	bl	8004c44 <twiReceive>
    HAL_Delay(5); //at least 40 uS
 8001126:	2005      	movs	r0, #5
 8001128:	f003 ffb2 	bl	8005090 <HAL_Delay>
    calibrationData[i] = buffer[0]<<8|buffer[1]; //pair of bytes goes into each element of callibrationData[i], global variables, 14 uint8_t into 7 uint16_t
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <setupSensor+0x74>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <setupSensor+0x74>)
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	b299      	uxth	r1, r3
 8001140:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <setupSensor+0x78>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i=1;i<=6;i++)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b06      	cmp	r3, #6
 8001152:	dddd      	ble.n	8001110 <setupSensor+0x20>
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000
 8001164:	200001ec 	.word	0x200001ec
 8001168:	200001f4 	.word	0x200001f4
 800116c:	00000000 	.word	0x00000000

08001170 <getPressure>:

int getPressure(void)
{
 8001170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001174:	b0a4      	sub	sp, #144	@ 0x90
 8001176:	af00      	add	r7, sp, #0
	counter_pressure ++;
 8001178:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <getPressure+0x100>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4a3b      	ldr	r2, [pc, #236]	@ (8001270 <getPressure+0x100>)
 8001182:	7013      	strb	r3, [r2, #0]
	if (counter_pressure == 1)
 8001184:	4b3a      	ldr	r3, [pc, #232]	@ (8001270 <getPressure+0x100>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	f040 808c 	bne.w	80012a6 <getPressure+0x136>
	{
		if(temperature_counter == 0)
 800118e:	4b39      	ldr	r3, [pc, #228]	@ (8001274 <getPressure+0x104>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d142      	bne.n	800121c <getPressure+0xac>
		{
			twiReceive(address, 0x00, 3);
 8001196:	4b38      	ldr	r3, [pc, #224]	@ (8001278 <getPressure+0x108>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2203      	movs	r2, #3
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fd50 	bl	8004c44 <twiReceive>
			raw_average_temperature_total -= raw_temperature_rotating_memory[average_temperature_mem_location];
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <getPressure+0x10c>)
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <getPressure+0x110>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b35      	ldr	r3, [pc, #212]	@ (8001284 <getPressure+0x114>)
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	1aca      	subs	r2, r1, r3
 80011b6:	4b31      	ldr	r3, [pc, #196]	@ (800127c <getPressure+0x10c>)
 80011b8:	601a      	str	r2, [r3, #0]
			raw_temperature_rotating_memory[average_temperature_mem_location] = buffer[0]<<16|buffer[1]<<8|buffer[2];
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <getPressure+0x118>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	041a      	lsls	r2, r3, #16
 80011c0:	4b31      	ldr	r3, [pc, #196]	@ (8001288 <getPressure+0x118>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	431a      	orrs	r2, r3
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <getPressure+0x118>)
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <getPressure+0x110>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <getPressure+0x114>)
 80011d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			raw_average_temperature_total += raw_temperature_rotating_memory[average_temperature_mem_location];
 80011da:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <getPressure+0x110>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <getPressure+0x114>)
 80011e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <getPressure+0x10c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	441a      	add	r2, r3
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <getPressure+0x10c>)
 80011ee:	601a      	str	r2, [r3, #0]
			average_temperature_mem_location++;
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <getPressure+0x110>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <getPressure+0x110>)
 80011fa:	7013      	strb	r3, [r2, #0]
			if (average_temperature_mem_location == 5)average_temperature_mem_location = 0;
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <getPressure+0x110>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d102      	bne.n	800120a <getPressure+0x9a>
 8001204:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <getPressure+0x110>)
 8001206:	2300      	movs	r3, #0
 8001208:	7013      	strb	r3, [r2, #0]
			raw_temperature = raw_average_temperature_total / 5;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <getPressure+0x10c>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <getPressure+0x11c>)
 8001210:	fba3 2302 	umull	r2, r3, r3, r2
 8001214:	089a      	lsrs	r2, r3, #2
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <getPressure+0x120>)
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e013      	b.n	8001244 <getPressure+0xd4>
		}
		else
		{
			twiReceive(address, 0x00, 3);
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <getPressure+0x108>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2203      	movs	r2, #3
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fd0d 	bl	8004c44 <twiReceive>
			raw_pressure = buffer[0]<<16|buffer[1]<<8|buffer[2];
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <getPressure+0x118>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	041a      	lsls	r2, r3, #16
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <getPressure+0x118>)
 8001232:	785b      	ldrb	r3, [r3, #1]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	431a      	orrs	r2, r3
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <getPressure+0x118>)
 800123a:	789b      	ldrb	r3, [r3, #2]
 800123c:	4313      	orrs	r3, r2
 800123e:	461a      	mov	r2, r3
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <getPressure+0x124>)
 8001242:	601a      	str	r2, [r3, #0]
		}
		temperature_counter ++;        //Increase the temperature_counter variable.
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <getPressure+0x104>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <getPressure+0x104>)
 800124e:	7013      	strb	r3, [r2, #0]
		if (temperature_counter == 20)
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <getPressure+0x104>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b14      	cmp	r3, #20
 8001256:	d11f      	bne.n	8001298 <getPressure+0x128>
		{
			temperature_counter = 0;
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <getPressure+0x104>)
 800125a:	2300      	movs	r3, #0
 800125c:	7013      	strb	r3, [r2, #0]
			twiSend(address, 0x54,1);
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <getPressure+0x108>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	2154      	movs	r1, #84	@ 0x54
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fc9a 	bl	8004ba0 <twiSend>
 800126c:	e01b      	b.n	80012a6 <getPressure+0x136>
 800126e:	bf00      	nop
 8001270:	200000e4 	.word	0x200000e4
 8001274:	200000e5 	.word	0x200000e5
 8001278:	20000000 	.word	0x20000000
 800127c:	20000108 	.word	0x20000108
 8001280:	200000e6 	.word	0x200000e6
 8001284:	200000f0 	.word	0x200000f0
 8001288:	200001ec 	.word	0x200001ec
 800128c:	cccccccd 	.word	0xcccccccd
 8001290:	200000ec 	.word	0x200000ec
 8001294:	200000e8 	.word	0x200000e8
		}
		else twiSend(address, 0x44,1);
 8001298:	4b91      	ldr	r3, [pc, #580]	@ (80014e0 <getPressure+0x370>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	2144      	movs	r1, #68	@ 0x44
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fc7d 	bl	8004ba0 <twiSend>
	}

	if (counter_pressure == 2)
 80012a6:	4b8f      	ldr	r3, [pc, #572]	@ (80014e4 <getPressure+0x374>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	f040 8331 	bne.w	8001912 <getPressure+0x7a2>
	{
		dT = raw_temperature - ((int)calibrationData[5] << 8);
 80012b0:	4b8d      	ldr	r3, [pc, #564]	@ (80014e8 <getPressure+0x378>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b8d      	ldr	r3, [pc, #564]	@ (80014ec <getPressure+0x37c>)
 80012b6:	895b      	ldrh	r3, [r3, #10]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	4b8c      	ldr	r3, [pc, #560]	@ (80014f0 <getPressure+0x380>)
 80012c0:	601a      	str	r2, [r3, #0]
		TEMP = (2000 + (((int64_t)dT * (int64_t)calibrationData[6]) >> 23));
 80012c2:	4b8b      	ldr	r3, [pc, #556]	@ (80014f0 <getPressure+0x380>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	17da      	asrs	r2, r3, #31
 80012c8:	469a      	mov	sl, r3
 80012ca:	4693      	mov	fp, r2
 80012cc:	4b87      	ldr	r3, [pc, #540]	@ (80014ec <getPressure+0x37c>)
 80012ce:	899b      	ldrh	r3, [r3, #12]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2200      	movs	r2, #0
 80012d4:	4698      	mov	r8, r3
 80012d6:	4691      	mov	r9, r2
 80012d8:	fb08 f20b 	mul.w	r2, r8, fp
 80012dc:	fb0a f309 	mul.w	r3, sl, r9
 80012e0:	4413      	add	r3, r2
 80012e2:	fbaa 4508 	umull	r4, r5, sl, r8
 80012e6:	442b      	add	r3, r5
 80012e8:	461d      	mov	r5, r3
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	0de2      	lsrs	r2, r4, #23
 80012f4:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 80012f8:	15eb      	asrs	r3, r5, #23
 80012fa:	4613      	mov	r3, r2
 80012fc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001300:	461a      	mov	r2, r3
 8001302:	4b7c      	ldr	r3, [pc, #496]	@ (80014f4 <getPressure+0x384>)
 8001304:	601a      	str	r2, [r3, #0]
		if (TEMP<2000)  //if temperature of the sensor goes below 20°C, it activates "second order temperature compensation"
 8001306:	4b7b      	ldr	r3, [pc, #492]	@ (80014f4 <getPressure+0x384>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800130e:	f280 8105 	bge.w	800151c <getPressure+0x3ac>
		    {
		      T2=pow(dT,2)/2147483648;
 8001312:	4b77      	ldr	r3, [pc, #476]	@ (80014f0 <getPressure+0x380>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f8a8 	bl	800046c <__aeabi_i2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 80014d8 <getPressure+0x368>
 8001324:	ec43 2b10 	vmov	d0, r2, r3
 8001328:	f008 fefe 	bl	800a128 <pow>
 800132c:	ec51 0b10 	vmov	r0, r1, d0
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b70      	ldr	r3, [pc, #448]	@ (80014f8 <getPressure+0x388>)
 8001336:	f7ff fa2d 	bl	8000794 <__aeabi_ddiv>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fbad 	bl	8000aa0 <__aeabi_d2iz>
 8001346:	4602      	mov	r2, r0
 8001348:	4b6c      	ldr	r3, [pc, #432]	@ (80014fc <getPressure+0x38c>)
 800134a:	601a      	str	r2, [r3, #0]
		      OFF2=5*pow((TEMP-2000),2)/2;
 800134c:	4b69      	ldr	r3, [pc, #420]	@ (80014f4 <getPressure+0x384>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f889 	bl	800046c <__aeabi_i2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 80014d8 <getPressure+0x368>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f008 fedf 	bl	800a128 <pow>
 800136a:	ec51 0b10 	vmov	r0, r1, d0
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <getPressure+0x390>)
 8001374:	f7ff f8e4 	bl	8000540 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001388:	f7ff fa04 	bl	8000794 <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc14 	bl	8000bc0 <__aeabi_d2lz>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4959      	ldr	r1, [pc, #356]	@ (8001504 <getPressure+0x394>)
 800139e:	e9c1 2300 	strd	r2, r3, [r1]
		      SENS2=5*pow((TEMP-2000),2)/4;
 80013a2:	4b54      	ldr	r3, [pc, #336]	@ (80014f4 <getPressure+0x384>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f85e 	bl	800046c <__aeabi_i2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 80014d8 <getPressure+0x368>
 80013b8:	ec43 2b10 	vmov	d0, r2, r3
 80013bc:	f008 feb4 	bl	800a128 <pow>
 80013c0:	ec51 0b10 	vmov	r0, r1, d0
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001500 <getPressure+0x390>)
 80013ca:	f7ff f8b9 	bl	8000540 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b4b      	ldr	r3, [pc, #300]	@ (8001508 <getPressure+0x398>)
 80013dc:	f7ff f9da 	bl	8000794 <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbea 	bl	8000bc0 <__aeabi_d2lz>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4946      	ldr	r1, [pc, #280]	@ (800150c <getPressure+0x39c>)
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
		      if (TEMP<-1500) //if temperature of the sensor goes even lower, below -15°C, then additional math is utilized
 80013f6:	4b3f      	ldr	r3, [pc, #252]	@ (80014f4 <getPressure+0x384>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <getPressure+0x3a0>)
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f280 809e 	bge.w	800153e <getPressure+0x3ce>
		        {
		          OFF2=OFF2+7*pow((TEMP+1500),2);
 8001402:	4b40      	ldr	r3, [pc, #256]	@ (8001504 <getPressure+0x394>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff f86a 	bl	80004e4 <__aeabi_l2d>
 8001410:	4604      	mov	r4, r0
 8001412:	460d      	mov	r5, r1
 8001414:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <getPressure+0x384>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f825 	bl	800046c <__aeabi_i2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 80014d8 <getPressure+0x368>
 800142a:	ec43 2b10 	vmov	d0, r2, r3
 800142e:	f008 fe7b 	bl	800a128 <pow>
 8001432:	ec51 0b10 	vmov	r0, r1, d0
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <getPressure+0x3a4>)
 800143c:	f7ff f880 	bl	8000540 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4620      	mov	r0, r4
 8001446:	4629      	mov	r1, r5
 8001448:	f7fe fec4 	bl	80001d4 <__adddf3>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fbb4 	bl	8000bc0 <__aeabi_d2lz>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4929      	ldr	r1, [pc, #164]	@ (8001504 <getPressure+0x394>)
 800145e:	e9c1 2300 	strd	r2, r3, [r1]
		          SENS2=SENS2+11*pow((TEMP+1500),2)/2;
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <getPressure+0x39c>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff f83a 	bl	80004e4 <__aeabi_l2d>
 8001470:	4604      	mov	r4, r0
 8001472:	460d      	mov	r5, r1
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <getPressure+0x384>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fff5 	bl	800046c <__aeabi_i2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80014d8 <getPressure+0x368>
 800148a:	ec43 2b10 	vmov	d0, r2, r3
 800148e:	f008 fe4b 	bl	800a128 <pow>
 8001492:	ec51 0b10 	vmov	r0, r1, d0
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <getPressure+0x3a8>)
 800149c:	f7ff f850 	bl	8000540 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014b0:	f7ff f970 	bl	8000794 <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe fe8a 	bl	80001d4 <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb7a 	bl	8000bc0 <__aeabi_d2lz>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	490e      	ldr	r1, [pc, #56]	@ (800150c <getPressure+0x39c>)
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
 80014d6:	e032      	b.n	800153e <getPressure+0x3ce>
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40000000 	.word	0x40000000
 80014e0:	20000000 	.word	0x20000000
 80014e4:	200000e4 	.word	0x200000e4
 80014e8:	200000ec 	.word	0x200000ec
 80014ec:	200001f4 	.word	0x200001f4
 80014f0:	20000228 	.word	0x20000228
 80014f4:	2000022c 	.word	0x2000022c
 80014f8:	41e00000 	.word	0x41e00000
 80014fc:	20000234 	.word	0x20000234
 8001500:	40140000 	.word	0x40140000
 8001504:	20000210 	.word	0x20000210
 8001508:	40100000 	.word	0x40100000
 800150c:	20000220 	.word	0x20000220
 8001510:	fffffa24 	.word	0xfffffa24
 8001514:	401c0000 	.word	0x401c0000
 8001518:	40260000 	.word	0x40260000
		        }
		    }
	   else { T2=0; OFF2=0; SENS2=0; }
 800151c:	4ac3      	ldr	r2, [pc, #780]	@ (800182c <getPressure+0x6bc>)
 800151e:	2300      	movs	r3, #0
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	49c3      	ldr	r1, [pc, #780]	@ (8001830 <getPressure+0x6c0>)
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9c1 2300 	strd	r2, r3, [r1]
 8001530:	49c0      	ldr	r1, [pc, #768]	@ (8001834 <getPressure+0x6c4>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9c1 2300 	strd	r2, r3, [r1]

		    TEMP = ((2000 + (((int64_t)dT * (int64_t)calibrationData[6]) >> 23))-T2); //second order compensation included
 800153e:	4bbe      	ldr	r3, [pc, #760]	@ (8001838 <getPressure+0x6c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	17da      	asrs	r2, r3, #31
 8001544:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001548:	4bbc      	ldr	r3, [pc, #752]	@ (800183c <getPressure+0x6cc>)
 800154a:	899b      	ldrh	r3, [r3, #12]
 800154c:	b29b      	uxth	r3, r3
 800154e:	2200      	movs	r2, #0
 8001550:	663b      	str	r3, [r7, #96]	@ 0x60
 8001552:	667a      	str	r2, [r7, #100]	@ 0x64
 8001554:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001558:	462b      	mov	r3, r5
 800155a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800155e:	4642      	mov	r2, r8
 8001560:	fb02 f203 	mul.w	r2, r2, r3
 8001564:	464b      	mov	r3, r9
 8001566:	4621      	mov	r1, r4
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	4622      	mov	r2, r4
 8001570:	4641      	mov	r1, r8
 8001572:	fba2 1201 	umull	r1, r2, r2, r1
 8001576:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800157a:	460a      	mov	r2, r1
 800157c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001580:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001584:	4413      	add	r3, r2
 8001586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001596:	4621      	mov	r1, r4
 8001598:	0dca      	lsrs	r2, r1, #23
 800159a:	4629      	mov	r1, r5
 800159c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80015a0:	4629      	mov	r1, r5
 80015a2:	15cb      	asrs	r3, r1, #23
 80015a4:	4ba1      	ldr	r3, [pc, #644]	@ (800182c <getPressure+0x6bc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4ba3      	ldr	r3, [pc, #652]	@ (8001840 <getPressure+0x6d0>)
 80015b2:	601a      	str	r2, [r3, #0]
		    OFF = (((unsigned int)calibrationData[2] << 16) + (((int64_t)calibrationData[4] * dT) >> 7)-OFF2); //second order compensation included
 80015b4:	4ba1      	ldr	r3, [pc, #644]	@ (800183c <getPressure+0x6cc>)
 80015b6:	889b      	ldrh	r3, [r3, #4]
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	2200      	movs	r2, #0
 80015bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015c0:	4b9e      	ldr	r3, [pc, #632]	@ (800183c <getPressure+0x6cc>)
 80015c2:	891b      	ldrh	r3, [r3, #8]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2200      	movs	r2, #0
 80015c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80015ca:	657a      	str	r2, [r7, #84]	@ 0x54
 80015cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001838 <getPressure+0x6c8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	17da      	asrs	r2, r3, #31
 80015d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80015d6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80015da:	462b      	mov	r3, r5
 80015dc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80015e0:	4642      	mov	r2, r8
 80015e2:	fb02 f203 	mul.w	r2, r2, r3
 80015e6:	464b      	mov	r3, r9
 80015e8:	4621      	mov	r1, r4
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	4622      	mov	r2, r4
 80015f2:	4641      	mov	r1, r8
 80015f4:	fba2 1201 	umull	r1, r2, r2, r1
 80015f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80015fc:	460a      	mov	r2, r1
 80015fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001602:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001606:	4413      	add	r3, r2
 8001608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001618:	4621      	mov	r1, r4
 800161a:	09ca      	lsrs	r2, r1, #7
 800161c:	4629      	mov	r1, r5
 800161e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001622:	4629      	mov	r1, r5
 8001624:	11cb      	asrs	r3, r1, #7
 8001626:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800162a:	4621      	mov	r1, r4
 800162c:	1889      	adds	r1, r1, r2
 800162e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001630:	4629      	mov	r1, r5
 8001632:	eb43 0101 	adc.w	r1, r3, r1
 8001636:	6479      	str	r1, [r7, #68]	@ 0x44
 8001638:	4b7d      	ldr	r3, [pc, #500]	@ (8001830 <getPressure+0x6c0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001642:	4621      	mov	r1, r4
 8001644:	1a89      	subs	r1, r1, r2
 8001646:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001648:	4629      	mov	r1, r5
 800164a:	eb61 0303 	sbc.w	r3, r1, r3
 800164e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001650:	4b7c      	ldr	r3, [pc, #496]	@ (8001844 <getPressure+0x6d4>)
 8001652:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8001656:	e9c3 1200 	strd	r1, r2, [r3]
		    SENS = (((unsigned int)calibrationData[1] << 15) + (((int64_t)calibrationData[3] * dT) >> 8)-SENS2); //second order compensation included
 800165a:	4b78      	ldr	r3, [pc, #480]	@ (800183c <getPressure+0x6cc>)
 800165c:	885b      	ldrh	r3, [r3, #2]
 800165e:	03db      	lsls	r3, r3, #15
 8001660:	2200      	movs	r2, #0
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
 8001664:	637a      	str	r2, [r7, #52]	@ 0x34
 8001666:	4b75      	ldr	r3, [pc, #468]	@ (800183c <getPressure+0x6cc>)
 8001668:	88db      	ldrh	r3, [r3, #6]
 800166a:	b29b      	uxth	r3, r3
 800166c:	2200      	movs	r2, #0
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001672:	4b71      	ldr	r3, [pc, #452]	@ (8001838 <getPressure+0x6c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	17da      	asrs	r2, r3, #31
 8001678:	623b      	str	r3, [r7, #32]
 800167a:	627a      	str	r2, [r7, #36]	@ 0x24
 800167c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001680:	462b      	mov	r3, r5
 8001682:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001686:	4642      	mov	r2, r8
 8001688:	fb02 f203 	mul.w	r2, r2, r3
 800168c:	464b      	mov	r3, r9
 800168e:	4621      	mov	r1, r4
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	4622      	mov	r2, r4
 8001698:	4641      	mov	r1, r8
 800169a:	fba2 1201 	umull	r1, r2, r2, r1
 800169e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80016a0:	460a      	mov	r2, r1
 80016a2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80016a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016a6:	4413      	add	r3, r2
 80016a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016b6:	4621      	mov	r1, r4
 80016b8:	0a0a      	lsrs	r2, r1, #8
 80016ba:	4629      	mov	r1, r5
 80016bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016c0:	4629      	mov	r1, r5
 80016c2:	120b      	asrs	r3, r1, #8
 80016c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016c8:	4621      	mov	r1, r4
 80016ca:	1889      	adds	r1, r1, r2
 80016cc:	61b9      	str	r1, [r7, #24]
 80016ce:	4629      	mov	r1, r5
 80016d0:	eb43 0101 	adc.w	r1, r3, r1
 80016d4:	61f9      	str	r1, [r7, #28]
 80016d6:	4b57      	ldr	r3, [pc, #348]	@ (8001834 <getPressure+0x6c4>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80016e0:	4621      	mov	r1, r4
 80016e2:	1a89      	subs	r1, r1, r2
 80016e4:	6139      	str	r1, [r7, #16]
 80016e6:	4629      	mov	r1, r5
 80016e8:	eb61 0303 	sbc.w	r3, r1, r3
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b56      	ldr	r3, [pc, #344]	@ (8001848 <getPressure+0x6d8>)
 80016f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80016f4:	e9c3 1200 	strd	r1, r2, [r3]
		    P = (((raw_pressure * SENS) >> 21) - OFF) >> 15;
 80016f8:	4b54      	ldr	r3, [pc, #336]	@ (800184c <getPressure+0x6dc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	60fa      	str	r2, [r7, #12]
 8001702:	4b51      	ldr	r3, [pc, #324]	@ (8001848 <getPressure+0x6d8>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800170c:	4629      	mov	r1, r5
 800170e:	fb02 f001 	mul.w	r0, r2, r1
 8001712:	4621      	mov	r1, r4
 8001714:	fb01 f103 	mul.w	r1, r1, r3
 8001718:	4401      	add	r1, r0
 800171a:	4620      	mov	r0, r4
 800171c:	fba0 2302 	umull	r2, r3, r0, r2
 8001720:	677b      	str	r3, [r7, #116]	@ 0x74
 8001722:	4613      	mov	r3, r2
 8001724:	673b      	str	r3, [r7, #112]	@ 0x70
 8001726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001728:	18cb      	adds	r3, r1, r3
 800172a:	677b      	str	r3, [r7, #116]	@ 0x74
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001738:	4621      	mov	r1, r4
 800173a:	0d4a      	lsrs	r2, r1, #21
 800173c:	4629      	mov	r1, r5
 800173e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001742:	4629      	mov	r1, r5
 8001744:	154b      	asrs	r3, r1, #21
 8001746:	493f      	ldr	r1, [pc, #252]	@ (8001844 <getPressure+0x6d4>)
 8001748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800174c:	1a14      	subs	r4, r2, r0
 800174e:	603c      	str	r4, [r7, #0]
 8001750:	eb63 0301 	sbc.w	r3, r3, r1
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001762:	4621      	mov	r1, r4
 8001764:	0bca      	lsrs	r2, r1, #15
 8001766:	4629      	mov	r1, r5
 8001768:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800176c:	4629      	mov	r1, r5
 800176e:	13cb      	asrs	r3, r1, #15
 8001770:	4b37      	ldr	r3, [pc, #220]	@ (8001850 <getPressure+0x6e0>)
 8001772:	601a      	str	r2, [r3, #0]

		    //To get a smoother pressure value we will use a 20 location rotating memory.
		    pressure_total_avarage -= pressure_rotating_mem[pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <getPressure+0x6e4>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <getPressure+0x6e8>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <getPressure+0x6ec>)
 8001780:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	4a33      	ldr	r2, [pc, #204]	@ (8001854 <getPressure+0x6e4>)
 8001788:	6013      	str	r3, [r2, #0]
		    pressure_rotating_mem[pressure_rotating_mem_location] = P;                                                //Calculate the new change between the actual pressure and the previous measurement.
 800178a:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <getPressure+0x6e8>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4b2f      	ldr	r3, [pc, #188]	@ (8001850 <getPressure+0x6e0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <getPressure+0x6ec>)
 8001796:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		    pressure_total_avarage += pressure_rotating_mem[pressure_rotating_mem_location];                          //Add the new value to the long term avarage value.
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <getPressure+0x6e8>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <getPressure+0x6ec>)
 80017a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <getPressure+0x6e4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a29      	ldr	r2, [pc, #164]	@ (8001854 <getPressure+0x6e4>)
 80017ae:	6013      	str	r3, [r2, #0]
            pressure_rotating_mem_location++;                                                                         //Increase the rotating memory location.
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <getPressure+0x6e8>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <getPressure+0x6e8>)
 80017ba:	701a      	strb	r2, [r3, #0]
		    if (pressure_rotating_mem_location == 20)pressure_rotating_mem_location = 0;                              //Start at 0 when the memory location 20 is reached.
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <getPressure+0x6e8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b14      	cmp	r3, #20
 80017c2:	d102      	bne.n	80017ca <getPressure+0x65a>
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <getPressure+0x6e8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
		    actual_pressure_fast = (float)pressure_total_avarage / 20.0;
 80017ca:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <getPressure+0x6e4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d6:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80017da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <getPressure+0x6f0>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]

		    //To get better results we will use a complementary fillter that can be adjusted by the fast average.
		    actual_pressure_slow = actual_pressure_slow * (float)0.985 + actual_pressure_fast * (float)0.015;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <getPressure+0x6f4>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001868 <getPressure+0x6f8>
 80017ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <getPressure+0x6f0>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800186c <getPressure+0x6fc>
 80017fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <getPressure+0x6f4>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
		    actual_pressure_diff = actual_pressure_slow - actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <getPressure+0x6f4>)
 800180c:	ed93 7a00 	vldr	s14, [r3]
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <getPressure+0x6f0>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <getPressure+0x700>)
 800181c:	edc3 7a00 	vstr	s15, [r3]
		    if (actual_pressure_diff > 8)actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <getPressure+0x700>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800182a:	e023      	b.n	8001874 <getPressure+0x704>
 800182c:	20000234 	.word	0x20000234
 8001830:	20000210 	.word	0x20000210
 8001834:	20000220 	.word	0x20000220
 8001838:	20000228 	.word	0x20000228
 800183c:	200001f4 	.word	0x200001f4
 8001840:	2000022c 	.word	0x2000022c
 8001844:	20000208 	.word	0x20000208
 8001848:	20000218 	.word	0x20000218
 800184c:	200000e8 	.word	0x200000e8
 8001850:	20000230 	.word	0x20000230
 8001854:	200001e4 	.word	0x200001e4
 8001858:	200001e8 	.word	0x200001e8
 800185c:	2000011c 	.word	0x2000011c
 8001860:	20000114 	.word	0x20000114
 8001864:	20000110 	.word	0x20000110
 8001868:	3f7c28f6 	.word	0x3f7c28f6
 800186c:	3c75c28f 	.word	0x3c75c28f
 8001870:	20000118 	.word	0x20000118
 8001874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	dd03      	ble.n	8001886 <getPressure+0x716>
 800187e:	4ba7      	ldr	r3, [pc, #668]	@ (8001b1c <getPressure+0x9ac>)
 8001880:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8001884:	601a      	str	r2, [r3, #0]
		    if (actual_pressure_diff < -8)actual_pressure_diff = -8;                                                  //If the difference is smaller then -8 limit the difference to -8.
 8001886:	4ba5      	ldr	r3, [pc, #660]	@ (8001b1c <getPressure+0x9ac>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eeba 7a00 	vmov.f32	s14, #160	@ 0xc1000000 -8.0
 8001890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	d503      	bpl.n	80018a2 <getPressure+0x732>
 800189a:	4ba0      	ldr	r3, [pc, #640]	@ (8001b1c <getPressure+0x9ac>)
 800189c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80018a0:	601a      	str	r2, [r3, #0]
		    //If the difference is larger then 1 or smaller then -1 the slow average is adjuste based on the error between the fast and slow average.
		    if (actual_pressure_diff > 1 || actual_pressure_diff < -1)actual_pressure_slow -= actual_pressure_diff / 6.0;
 80018a2:	4b9e      	ldr	r3, [pc, #632]	@ (8001b1c <getPressure+0x9ac>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	dc09      	bgt.n	80018ca <getPressure+0x75a>
 80018b6:	4b99      	ldr	r3, [pc, #612]	@ (8001b1c <getPressure+0x9ac>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80018c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d51f      	bpl.n	800190a <getPressure+0x79a>
 80018ca:	4b95      	ldr	r3, [pc, #596]	@ (8001b20 <getPressure+0x9b0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdde 	bl	8000490 <__aeabi_f2d>
 80018d4:	4604      	mov	r4, r0
 80018d6:	460d      	mov	r5, r1
 80018d8:	4b90      	ldr	r3, [pc, #576]	@ (8001b1c <getPressure+0x9ac>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fdd7 	bl	8000490 <__aeabi_f2d>
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b8f      	ldr	r3, [pc, #572]	@ (8001b24 <getPressure+0x9b4>)
 80018e8:	f7fe ff54 	bl	8000794 <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f7fe fc6c 	bl	80001d0 <__aeabi_dsub>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f8f6 	bl	8000af0 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	4a86      	ldr	r2, [pc, #536]	@ (8001b20 <getPressure+0x9b0>)
 8001908:	6013      	str	r3, [r2, #0]
		    actual_pressure = actual_pressure_slow;
 800190a:	4b85      	ldr	r3, [pc, #532]	@ (8001b20 <getPressure+0x9b0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a86      	ldr	r2, [pc, #536]	@ (8001b28 <getPressure+0x9b8>)
 8001910:	6013      	str	r3, [r2, #0]
	}
	if (counter_pressure == 3) {
 8001912:	4b86      	ldr	r3, [pc, #536]	@ (8001b2c <getPressure+0x9bc>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b03      	cmp	r3, #3
 8001918:	f040 81a6 	bne.w	8001c68 <getPressure+0xaf8>
		counter_pressure = 0;
 800191c:	4b83      	ldr	r3, [pc, #524]	@ (8001b2c <getPressure+0x9bc>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]

	    if (manual_altitude_change == 1)	pressure_parachute_previous = actual_pressure * 10;                       //During manual altitude change the up/down detection is disabled.
 8001922:	4b83      	ldr	r3, [pc, #524]	@ (8001b30 <getPressure+0x9c0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d109      	bne.n	800193e <getPressure+0x7ce>
 800192a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b28 <getPressure+0x9b8>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001938:	4b7e      	ldr	r3, [pc, #504]	@ (8001b34 <getPressure+0x9c4>)
 800193a:	edc3 7a00 	vstr	s15, [r3]
	    parachute_throttle -= parachute_buffer[parachute_rotating_mem_location];                                  //Subtract the current memory position to make room for the new value.
 800193e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b38 <getPressure+0x9c8>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b7e      	ldr	r3, [pc, #504]	@ (8001b3c <getPressure+0x9cc>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	4b7d      	ldr	r3, [pc, #500]	@ (8001b40 <getPressure+0x9d0>)
 800194a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a79      	ldr	r2, [pc, #484]	@ (8001b38 <getPressure+0x9c8>)
 8001952:	6013      	str	r3, [r2, #0]
	    parachute_buffer[parachute_rotating_mem_location] = actual_pressure * 10 - pressure_parachute_previous;   //Calculate the new change between the actual pressure and the previous measurement.
 8001954:	4b74      	ldr	r3, [pc, #464]	@ (8001b28 <getPressure+0x9b8>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800195e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001962:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <getPressure+0x9c4>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196c:	4b73      	ldr	r3, [pc, #460]	@ (8001b3c <getPressure+0x9cc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001976:	ee17 1a90 	vmov	r1, s15
 800197a:	4b71      	ldr	r3, [pc, #452]	@ (8001b40 <getPressure+0x9d0>)
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    parachute_throttle += parachute_buffer[parachute_rotating_mem_location];                                  //Add the new value to the long term avarage value.
 8001980:	4b6e      	ldr	r3, [pc, #440]	@ (8001b3c <getPressure+0x9cc>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b6e      	ldr	r3, [pc, #440]	@ (8001b40 <getPressure+0x9d0>)
 8001988:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800198c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <getPressure+0x9c8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4413      	add	r3, r2
 8001992:	4a69      	ldr	r2, [pc, #420]	@ (8001b38 <getPressure+0x9c8>)
 8001994:	6013      	str	r3, [r2, #0]
	    pressure_parachute_previous = actual_pressure * 10;                                                       //Store the current measurement for the next loop.
 8001996:	4b64      	ldr	r3, [pc, #400]	@ (8001b28 <getPressure+0x9b8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80019a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a4:	4b63      	ldr	r3, [pc, #396]	@ (8001b34 <getPressure+0x9c4>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	    parachute_rotating_mem_location++;                                                                        //Increase the rotating memory location.
 80019aa:	4b64      	ldr	r3, [pc, #400]	@ (8001b3c <getPressure+0x9cc>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b62      	ldr	r3, [pc, #392]	@ (8001b3c <getPressure+0x9cc>)
 80019b4:	701a      	strb	r2, [r3, #0]
	    if (parachute_rotating_mem_location == 30)	parachute_rotating_mem_location = 0;
 80019b6:	4b61      	ldr	r3, [pc, #388]	@ (8001b3c <getPressure+0x9cc>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b1e      	cmp	r3, #30
 80019bc:	d102      	bne.n	80019c4 <getPressure+0x854>
 80019be:	4b5f      	ldr	r3, [pc, #380]	@ (8001b3c <getPressure+0x9cc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]

	    if (flight_mode == 2) {
 80019c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b44 <getPressure+0x9d4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f040 813e 	bne.w	8001c4a <getPressure+0xada>
	    	manual_altitude_change = 0;
 80019ce:	4b58      	ldr	r3, [pc, #352]	@ (8001b30 <getPressure+0x9c0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	    	if (pid_altitude_setpoint == 0)	pid_altitude_setpoint = actual_pressure;
 80019d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b48 <getPressure+0x9d8>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	d103      	bne.n	80019ec <getPressure+0x87c>
 80019e4:	4b50      	ldr	r3, [pc, #320]	@ (8001b28 <getPressure+0x9b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a57      	ldr	r2, [pc, #348]	@ (8001b48 <getPressure+0x9d8>)
 80019ea:	6013      	str	r3, [r2, #0]

	        //Calculate the PID output of the altitude hold.
	        pid_altitude_input = actual_pressure;                                          //Set the setpoint (pid_altitude_input) of the PID-controller.
 80019ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001b28 <getPressure+0x9b8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <getPressure+0x9dc>)
 80019f2:	6013      	str	r3, [r2, #0]
	        pid_error_temp = pid_altitude_input - pid_altitude_setpoint;                   //Calculate the error between the setpoint and the actual pressure value.
 80019f4:	4b55      	ldr	r3, [pc, #340]	@ (8001b4c <getPressure+0x9dc>)
 80019f6:	ed93 7a00 	vldr	s14, [r3]
 80019fa:	4b53      	ldr	r3, [pc, #332]	@ (8001b48 <getPressure+0x9d8>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a04:	4b52      	ldr	r3, [pc, #328]	@ (8001b50 <getPressure+0x9e0>)
 8001a06:	edc3 7a00 	vstr	s15, [r3]

	        //To get better results the P-gain is increased when the error between the setpoint and the actual pressure value increases.
	        //The variable pid_error_gain_altitude will be used to adjust the P-gain of the PID-controller.
	        pid_error_gain_altitude = 0;                                                   //Set the pid_error_gain_altitude to 0.
 8001a0a:	4b52      	ldr	r3, [pc, #328]	@ (8001b54 <getPressure+0x9e4>)
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
	        if (pid_error_temp > 10 || pid_error_temp < -10) {                             //If the error between the setpoint and the actual pressure is larger than 10 or smaller then -10.
 8001a12:	4b4f      	ldr	r3, [pc, #316]	@ (8001b50 <getPressure+0x9e0>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a24:	dc09      	bgt.n	8001a3a <getPressure+0x8ca>
 8001a26:	4b4a      	ldr	r3, [pc, #296]	@ (8001b50 <getPressure+0x9e0>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a38:	d528      	bpl.n	8001a8c <getPressure+0x91c>
	          pid_error_gain_altitude = (abs(pid_error_temp) - 10) / 20.0;                 //The positive pid_error_gain_altitude variable is calculated based based on the error.
 8001a3a:	4b45      	ldr	r3, [pc, #276]	@ (8001b50 <getPressure+0x9e0>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a44:	ee17 3a90 	vmov	r3, s15
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bfb8      	it	lt
 8001a4c:	425b      	neglt	r3, r3
 8001a4e:	3b0a      	subs	r3, #10
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd0b 	bl	800046c <__aeabi_i2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b58 <getPressure+0x9e8>)
 8001a5c:	f7fe fe9a 	bl	8000794 <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f842 	bl	8000af0 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a39      	ldr	r2, [pc, #228]	@ (8001b54 <getPressure+0x9e4>)
 8001a70:	6013      	str	r3, [r2, #0]
	          if (pid_error_gain_altitude > 3)pid_error_gain_altitude = 3;                 //To prevent extreme P-gains it must be limited to 3.
 8001a72:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <getPressure+0x9e4>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	dd02      	ble.n	8001a8c <getPressure+0x91c>
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <getPressure+0x9e4>)
 8001a88:	4a34      	ldr	r2, [pc, #208]	@ (8001b5c <getPressure+0x9ec>)
 8001a8a:	601a      	str	r2, [r3, #0]
	        }

	        //In the following section the I-output is calculated. It's an accumulation of errors over time.
	        //The time factor is removed as the program loop runs at 250Hz.
	        pid_i_mem_altitude += (pid_i_gain_altitude / 100.0) * pid_error_temp;
 8001a8c:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <getPressure+0x9f0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fcfd 	bl	8000490 <__aeabi_f2d>
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
 8001a9a:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <getPressure+0x9f4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcf6 	bl	8000490 <__aeabi_f2d>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <getPressure+0x9f8>)
 8001aaa:	f7fe fe73 	bl	8000794 <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4690      	mov	r8, r2
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <getPressure+0x9e0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fce8 	bl	8000490 <__aeabi_f2d>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4640      	mov	r0, r8
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	f7fe fd3a 	bl	8000540 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f7fe fb7e 	bl	80001d4 <__adddf3>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f806 	bl	8000af0 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b60 <getPressure+0x9f0>)
 8001ae8:	6013      	str	r3, [r2, #0]
	        if (pid_i_mem_altitude > pid_max_altitude)pid_i_mem_altitude = pid_max_altitude;
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <getPressure+0x9fc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <getPressure+0x9f0>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	d534      	bpl.n	8001b70 <getPressure+0xa00>
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <getPressure+0x9fc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <getPressure+0x9f0>)
 8001b14:	edc3 7a00 	vstr	s15, [r3]
 8001b18:	e043      	b.n	8001ba2 <getPressure+0xa32>
 8001b1a:	bf00      	nop
 8001b1c:	20000118 	.word	0x20000118
 8001b20:	20000110 	.word	0x20000110
 8001b24:	40180000 	.word	0x40180000
 8001b28:	2000010c 	.word	0x2000010c
 8001b2c:	200000e4 	.word	0x200000e4
 8001b30:	200002e8 	.word	0x200002e8
 8001b34:	200002e0 	.word	0x200002e0
 8001b38:	200002dc 	.word	0x200002dc
 8001b3c:	2000024c 	.word	0x2000024c
 8001b40:	20000250 	.word	0x20000250
 8001b44:	20000458 	.word	0x20000458
 8001b48:	2000023c 	.word	0x2000023c
 8001b4c:	20000240 	.word	0x20000240
 8001b50:	20000248 	.word	0x20000248
 8001b54:	200002e4 	.word	0x200002e4
 8001b58:	40340000 	.word	0x40340000
 8001b5c:	40400000 	.word	0x40400000
 8001b60:	20000238 	.word	0x20000238
 8001b64:	20000050 	.word	0x20000050
 8001b68:	40590000 	.word	0x40590000
 8001b6c:	20000004 	.word	0x20000004
	        else if (pid_i_mem_altitude < pid_max_altitude * -1)pid_i_mem_altitude = pid_max_altitude * -1;
 8001b70:	4b43      	ldr	r3, [pc, #268]	@ (8001c80 <getPressure+0xb10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	425b      	negs	r3, r3
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7e:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <getPressure+0xb14>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	dd09      	ble.n	8001ba2 <getPressure+0xa32>
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c80 <getPressure+0xb10>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	425b      	negs	r3, r3
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	4b39      	ldr	r3, [pc, #228]	@ (8001c84 <getPressure+0xb14>)
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
	        //In the following line the PID-output is calculated.
	        //P = (pid_p_gain_altitude + pid_error_gain_altitude) * pid_error_temp.
	        //I = pid_i_mem_altitude += (pid_i_gain_altitude / 100.0) * pid_error_temp (see above).
	        //D = pid_d_gain_altitude * parachute_throttle.
	        pid_output_altitude = (pid_p_gain_altitude + pid_error_gain_altitude) * pid_error_temp + pid_i_mem_altitude + pid_d_gain_altitude * parachute_throttle;
 8001ba2:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <getPressure+0xb18>)
 8001ba4:	ed93 7a00 	vldr	s14, [r3]
 8001ba8:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <getPressure+0xb1c>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb2:	4b37      	ldr	r3, [pc, #220]	@ (8001c90 <getPressure+0xb20>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bbc:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <getPressure+0xb14>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc6:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <getPressure+0xb24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bd2:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <getPressure+0xb28>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <getPressure+0xb2c>)
 8001be2:	edc3 7a00 	vstr	s15, [r3]
	        //To prevent extreme PID-output the output must be limited.
	        if (pid_output_altitude > pid_max_altitude)pid_output_altitude = pid_max_altitude;
 8001be6:	4b26      	ldr	r3, [pc, #152]	@ (8001c80 <getPressure+0xb10>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <getPressure+0xb2c>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	d509      	bpl.n	8001c16 <getPressure+0xaa6>
 8001c02:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <getPressure+0xb10>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <getPressure+0xb2c>)
 8001c10:	edc3 7a00 	vstr	s15, [r3]
 8001c14:	e028      	b.n	8001c68 <getPressure+0xaf8>
	        else if (pid_output_altitude < pid_max_altitude * -1)pid_output_altitude = pid_max_altitude * -1;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <getPressure+0xb10>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	425b      	negs	r3, r3
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <getPressure+0xb2c>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	dd19      	ble.n	8001c68 <getPressure+0xaf8>
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <getPressure+0xb10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	425b      	negs	r3, r3
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <getPressure+0xb2c>)
 8001c44:	edc3 7a00 	vstr	s15, [r3]
 8001c48:	e00e      	b.n	8001c68 <getPressure+0xaf8>
	    }
	    else{
	        pid_altitude_setpoint = 0;                                                     //Reset the PID altitude setpoint.
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <getPressure+0xb30>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	        pid_output_altitude = 0;                                                       //Reset the output of the PID controller.
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <getPressure+0xb2c>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	        pid_i_mem_altitude = 0;                                                        //Reset the I-controller.
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <getPressure+0xb14>)
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
	        manual_altitude_change = 1;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <getPressure+0xb34>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
	    }
	}

  //return actual_pressure; //returns back pressure P
	return pid_output_altitude;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <getPressure+0xb2c>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c72:	ee17 3a90 	vmov	r3, s15
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3790      	adds	r7, #144	@ 0x90
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000238 	.word	0x20000238
 8001c88:	2000004c 	.word	0x2000004c
 8001c8c:	200002e4 	.word	0x200002e4
 8001c90:	20000248 	.word	0x20000248
 8001c94:	200002dc 	.word	0x200002dc
 8001c98:	20000054 	.word	0x20000054
 8001c9c:	20000244 	.word	0x20000244
 8001ca0:	2000023c 	.word	0x2000023c
 8001ca4:	200002e8 	.word	0x200002e8

08001ca8 <Send_Data_To_Gui>:
void fault_dec()
{
	while(1);
}
void Send_Data_To_Gui()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08e      	sub	sp, #56	@ 0x38
 8001cac:	af00      	add	r7, sp, #0
	 Tx_buff[0] = 0x44;
 8001cae:	4b61      	ldr	r3, [pc, #388]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001cb0:	2244      	movs	r2, #68	@ 0x44
 8001cb2:	701a      	strb	r2, [r3, #0]
     Tx_buff[1] = 0x41;
 8001cb4:	4b5f      	ldr	r3, [pc, #380]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001cb6:	2241      	movs	r2, #65	@ 0x41
 8001cb8:	705a      	strb	r2, [r3, #1]
	 unsigned char *AngleRoll_Bytes = (unsigned char *)&KalmanAngleRoll; //KalmanAngleRoll
 8001cba:	4b5f      	ldr	r3, [pc, #380]	@ (8001e38 <Send_Data_To_Gui+0x190>)
 8001cbc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cc2:	e00a      	b.n	8001cda <Send_Data_To_Gui+0x32>
        Tx_buff[i + 2] = AngleRoll_Bytes[i];
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	441a      	add	r2, r3
 8001cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ccc:	3302      	adds	r3, #2
 8001cce:	7811      	ldrb	r1, [r2, #0]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001cd2:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d9f1      	bls.n	8001cc4 <Send_Data_To_Gui+0x1c>
    }
		unsigned char *AnglePitch_Bytes = (unsigned char *)&KalmanAnglePitch; //KalmanAnglePitch
 8001ce0:	4b56      	ldr	r3, [pc, #344]	@ (8001e3c <Send_Data_To_Gui+0x194>)
 8001ce2:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < sizeof(float); ++i) {
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ce8:	e00a      	b.n	8001d00 <Send_Data_To_Gui+0x58>
        Tx_buff[i + 6] = AnglePitch_Bytes[i];
 8001cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	441a      	add	r2, r3
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf2:	3306      	adds	r3, #6
 8001cf4:	7811      	ldrb	r1, [r2, #0]
 8001cf6:	4a4f      	ldr	r2, [pc, #316]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001cf8:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d9f1      	bls.n	8001cea <Send_Data_To_Gui+0x42>
    }
		unsigned char *AngleRoll_Setpoint_Bytes = (unsigned char *)&DesiredAngleRoll; //DesiredAngleRoll
 8001d06:	4b4e      	ldr	r3, [pc, #312]	@ (8001e40 <Send_Data_To_Gui+0x198>)
 8001d08:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d0e:	e00a      	b.n	8001d26 <Send_Data_To_Gui+0x7e>
        Tx_buff[i + 10] = AngleRoll_Setpoint_Bytes[i];
 8001d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	441a      	add	r2, r3
 8001d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d18:	330a      	adds	r3, #10
 8001d1a:	7811      	ldrb	r1, [r2, #0]
 8001d1c:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001d1e:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d22:	3301      	adds	r3, #1
 8001d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d9f1      	bls.n	8001d10 <Send_Data_To_Gui+0x68>
    }
		unsigned char *AnglePitch_Setpoint_Bytes = (unsigned char *)&DesiredAnglePitch; //DesiredAnglePitch
 8001d2c:	4b45      	ldr	r3, [pc, #276]	@ (8001e44 <Send_Data_To_Gui+0x19c>)
 8001d2e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d34:	e00a      	b.n	8001d4c <Send_Data_To_Gui+0xa4>
        Tx_buff[i + 14] = AnglePitch_Setpoint_Bytes[i];
 8001d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3e:	330e      	adds	r3, #14
 8001d40:	7811      	ldrb	r1, [r2, #0]
 8001d42:	4a3c      	ldr	r2, [pc, #240]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001d44:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d48:	3301      	adds	r3, #1
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9f1      	bls.n	8001d36 <Send_Data_To_Gui+0x8e>
    }
    	unsigned char *InputThrottle_Bytes = (unsigned char *)&InputThrottle;    //InputThrottle
 8001d52:	4b3d      	ldr	r3, [pc, #244]	@ (8001e48 <Send_Data_To_Gui+0x1a0>)
 8001d54:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5a:	e00a      	b.n	8001d72 <Send_Data_To_Gui+0xca>
        Tx_buff[i + 18] = InputThrottle_Bytes[i];
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	441a      	add	r2, r3
 8001d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d64:	3312      	adds	r3, #18
 8001d66:	7811      	ldrb	r1, [r2, #0]
 8001d68:	4a32      	ldr	r2, [pc, #200]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001d6a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6e:	3301      	adds	r3, #1
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d9f1      	bls.n	8001d5c <Send_Data_To_Gui+0xb4>
    }
		unsigned char *actual_pressure_Bytes = (unsigned char *)&actual_pressure;   //actual_pressure
 8001d78:	4b34      	ldr	r3, [pc, #208]	@ (8001e4c <Send_Data_To_Gui+0x1a4>)
 8001d7a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < sizeof(float); ++i) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
 8001d80:	e00a      	b.n	8001d98 <Send_Data_To_Gui+0xf0>
		Tx_buff[i + 22] = actual_pressure_Bytes[i];
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	441a      	add	r2, r3
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	3316      	adds	r3, #22
 8001d8c:	7811      	ldrb	r1, [r2, #0]
 8001d8e:	4a29      	ldr	r2, [pc, #164]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001d90:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(float); ++i) {
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	3301      	adds	r3, #1
 8001d96:	623b      	str	r3, [r7, #32]
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d9f1      	bls.n	8001d82 <Send_Data_To_Gui+0xda>
	}

	Tx_buff[26] = m8n_rx_buf[10]; Tx_buff[27] = m8n_rx_buf[11];
 8001d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001da0:	7a9a      	ldrb	r2, [r3, #10]
 8001da2:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001da4:	769a      	strb	r2, [r3, #26]
 8001da6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001da8:	7ada      	ldrb	r2, [r3, #11]
 8001daa:	4b22      	ldr	r3, [pc, #136]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dac:	76da      	strb	r2, [r3, #27]
	Tx_buff[28] = m8n_rx_buf[12]; Tx_buff[29] = m8n_rx_buf[13];
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001db0:	7b1a      	ldrb	r2, [r3, #12]
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001db4:	771a      	strb	r2, [r3, #28]
 8001db6:	4b26      	ldr	r3, [pc, #152]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001db8:	7b5a      	ldrb	r2, [r3, #13]
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dbc:	775a      	strb	r2, [r3, #29]

	Tx_buff[30] = m8n_rx_buf[14]; Tx_buff[31] = m8n_rx_buf[15];
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001dc0:	7b9a      	ldrb	r2, [r3, #14]
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dc4:	779a      	strb	r2, [r3, #30]
 8001dc6:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001dc8:	7bda      	ldrb	r2, [r3, #15]
 8001dca:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dcc:	77da      	strb	r2, [r3, #31]
	Tx_buff[32] = m8n_rx_buf[16]; Tx_buff[33] = m8n_rx_buf[17];
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001dd0:	7c1a      	ldrb	r2, [r3, #16]
 8001dd2:	4b18      	ldr	r3, [pc, #96]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]
 8001dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <Send_Data_To_Gui+0x1a8>)
 8001dda:	7c5a      	ldrb	r2, [r3, #17]
 8001ddc:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	unsigned char *actual_compass_heading_Bytes = (unsigned char *)&actual_compass_heading;   //actual_pressure
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <Send_Data_To_Gui+0x1ac>)
 8001de4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < sizeof(float); ++i) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e00a      	b.n	8001e02 <Send_Data_To_Gui+0x15a>
		Tx_buff[i + 34] = actual_compass_heading_Bytes[i];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	441a      	add	r2, r3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	3322      	adds	r3, #34	@ 0x22
 8001df6:	7811      	ldrb	r1, [r2, #0]
 8001df8:	4a0e      	ldr	r2, [pc, #56]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001dfa:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(float); ++i) {
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d9f1      	bls.n	8001dec <Send_Data_To_Gui+0x144>
	}

	Tx_buff[38] = '\r'; Tx_buff[39] = '\n';
 8001e08:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001e0a:	220d      	movs	r2, #13
 8001e0c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001e12:	220a      	movs	r2, #10
 8001e14:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if(Flag_Plot)
 8001e18:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <Send_Data_To_Gui+0x1b0>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <Send_Data_To_Gui+0x182>
	{
		HAL_UART_Transmit_DMA(&huart2, Tx_buff,40);
 8001e20:	2228      	movs	r2, #40	@ 0x28
 8001e22:	4904      	ldr	r1, [pc, #16]	@ (8001e34 <Send_Data_To_Gui+0x18c>)
 8001e24:	480d      	ldr	r0, [pc, #52]	@ (8001e5c <Send_Data_To_Gui+0x1b4>)
 8001e26:	f006 ff4b 	bl	8008cc0 <HAL_UART_Transmit_DMA>
	}
}
 8001e2a:	bf00      	nop
 8001e2c:	3738      	adds	r7, #56	@ 0x38
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000394 	.word	0x20000394
 8001e38:	20000484 	.word	0x20000484
 8001e3c:	20000488 	.word	0x20000488
 8001e40:	200004f0 	.word	0x200004f0
 8001e44:	200004f4 	.word	0x200004f4
 8001e48:	200004b0 	.word	0x200004b0
 8001e4c:	2000010c 	.word	0x2000010c
 8001e50:	2000045c 	.word	0x2000045c
 8001e54:	2000051c 	.word	0x2000051c
 8001e58:	200002f8 	.word	0x200002f8
 8001e5c:	20000854 	.word	0x20000854

08001e60 <kalman_1d>:

void kalman_1d(float KalmanState, float KalmanUncertainty, float KalmanInput, float KalmanMeasurement) {
 8001e60:	b5b0      	push	{r4, r5, r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e6a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e6e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001e72:	edc7 1a00 	vstr	s3, [r7]
  KalmanState = KalmanState + 0.004*KalmanInput;
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f7fe fb0a 	bl	8000490 <__aeabi_f2d>
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	460d      	mov	r5, r1
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7fe fb05 	bl	8000490 <__aeabi_f2d>
 8001e86:	a32b      	add	r3, pc, #172	@ (adr r3, 8001f34 <kalman_1d+0xd4>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fb58 	bl	8000540 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe f99c 	bl	80001d4 <__adddf3>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe24 	bl	8000af0 <__aeabi_d2f>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60fb      	str	r3, [r7, #12]
  KalmanUncertainty = KalmanUncertainty + 0.004 * 0.004 * 4 * 4;
 8001eac:	68b8      	ldr	r0, [r7, #8]
 8001eae:	f7fe faef 	bl	8000490 <__aeabi_f2d>
 8001eb2:	a322      	add	r3, pc, #136	@ (adr r3, 8001f3c <kalman_1d+0xdc>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe f98c 	bl	80001d4 <__adddf3>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7fe fe14 	bl	8000af0 <__aeabi_d2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60bb      	str	r3, [r7, #8]
  float KalmanGain = KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3);
 8001ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ed0:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001ed8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee0:	edc7 7a05 	vstr	s15, [r7, #20]
  KalmanState = KalmanState+KalmanGain * (KalmanMeasurement-KalmanState);
 8001ee4:	ed97 7a00 	vldr	s14, [r7]
 8001ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001eec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ef0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f00:	edc7 7a03 	vstr	s15, [r7, #12]
  KalmanUncertainty = (1-KalmanGain) * KalmanUncertainty;
 8001f04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f10:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f18:	edc7 7a02 	vstr	s15, [r7, #8]
  Kalman1DOutput[0] = KalmanState;
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <kalman_1d+0xd0>)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6013      	str	r3, [r2, #0]
  Kalman1DOutput[1] = KalmanUncertainty;
 8001f22:	4a03      	ldr	r2, [pc, #12]	@ (8001f30 <kalman_1d+0xd0>)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	6053      	str	r3, [r2, #4]
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f30:	2000048c 	.word	0x2000048c
 8001f34:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f38:	3f70624d 	.word	0x3f70624d
 8001f3c:	a0b5ed8d 	.word	0xa0b5ed8d
 8001f40:	3f30c6f7 	.word	0x3f30c6f7

08001f44 <SetValue>:
void kalman_2d(void);
void define_kalman_2d(void);

int SetValue(int value, int inMin, int inMax, int outMin, int outMax)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	603b      	str	r3, [r7, #0]
	if (value < inMin) return outMin;
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	da01      	bge.n	8001f5e <SetValue+0x1a>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	e006      	b.n	8001f6c <SetValue+0x28>
	else if (value > inMax) return outMax;
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	dd01      	ble.n	8001f6a <SetValue+0x26>
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	e000      	b.n	8001f6c <SetValue+0x28>
	else return value;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3714      	adds	r7, #20
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	4603      	mov	r3, r0
 8001f80:	80fb      	strh	r3, [r7, #6]

	if ( GPIO_Pin == GPIO_PIN_15){
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f88:	d133      	bne.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x7a>
		tick = __HAL_TIM_GET_COUNTER(&htim2);
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ffc <HAL_GPIO_EXTI_Callback+0x84>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b1b      	ldr	r3, [pc, #108]	@ (8002000 <HAL_GPIO_EXTI_Callback+0x88>)
 8001f94:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001f96:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_GPIO_EXTI_Callback+0x84>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	@ 0x24

		if ( tick < 2100){
 8001f9e:	4b18      	ldr	r3, [pc, #96]	@ (8002000 <HAL_GPIO_EXTI_Callback+0x88>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f640 0233 	movw	r2, #2099	@ 0x833
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	dc1c      	bgt.n	8001fe4 <HAL_GPIO_EXTI_Callback+0x6c>
			ch[pulse] = SetValue(tick, 1030, 1950, 1000, 2000);;
 8001faa:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_GPIO_EXTI_Callback+0x88>)
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461c      	mov	r4, r3
 8001fb6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc0:	f240 729e 	movw	r2, #1950	@ 0x79e
 8001fc4:	f240 4106 	movw	r1, #1030	@ 0x406
 8001fc8:	f7ff ffbc 	bl	8001f44 <SetValue>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <HAL_GPIO_EXTI_Callback+0x90>)
 8001fd0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			pulse++;
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	3301      	adds	r3, #1
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fe0:	701a      	strb	r2, [r3, #0]
		else{
			__HAL_TIM_SET_COUNTER(&htim2,0);
			pulse =0;
		}
	}
}
 8001fe2:	e006      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x7a>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_GPIO_EXTI_Callback+0x84>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24
			pulse =0;
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd90      	pop	{r4, r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000077c 	.word	0x2000077c
 8002000:	200003fc 	.word	0x200003fc
 8002004:	20000400 	.word	0x20000400
 8002008:	200003dc 	.word	0x200003dc

0800200c <MPU6050_Init>:


HAL_StatusTypeDef MPU6050_Init (void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1,1000)!= HAL_OK) return HAL_ERROR;
 8002012:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002016:	9302      	str	r3, [sp, #8]
 8002018:	2301      	movs	r3, #1
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	2301      	movs	r3, #1
 8002022:	2275      	movs	r2, #117	@ 0x75
 8002024:	21d0      	movs	r1, #208	@ 0xd0
 8002026:	483a      	ldr	r0, [pc, #232]	@ (8002110 <MPU6050_Init+0x104>)
 8002028:	f004 fb00 	bl	800662c <HAL_I2C_Mem_Read>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MPU6050_Init+0x2a>
 8002032:	2301      	movs	r3, #1
 8002034:	e067      	b.n	8002106 <MPU6050_Init+0xfa>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8002036:	79fb      	ldrb	r3, [r7, #7]
 8002038:	2b68      	cmp	r3, #104	@ 0x68
 800203a:	d163      	bne.n	8002104 <MPU6050_Init+0xf8>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1,1000)!= HAL_OK)
 8002040:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	2301      	movs	r3, #1
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	1dbb      	adds	r3, r7, #6
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2301      	movs	r3, #1
 8002050:	226b      	movs	r2, #107	@ 0x6b
 8002052:	21d0      	movs	r1, #208	@ 0xd0
 8002054:	482e      	ldr	r0, [pc, #184]	@ (8002110 <MPU6050_Init+0x104>)
 8002056:	f004 f9ef 	bl	8006438 <HAL_I2C_Mem_Write>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MPU6050_Init+0x58>
			return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e050      	b.n	8002106 <MPU6050_Init+0xfa>
		// config 1KHz Digital Low Pass Filter 10Hz
		Data = 0x05;
 8002064:	2305      	movs	r3, #5
 8002066:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1,&Data, 1,1000)!= HAL_OK)
 8002068:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	2301      	movs	r3, #1
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	1dbb      	adds	r3, r7, #6
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2301      	movs	r3, #1
 8002078:	221a      	movs	r2, #26
 800207a:	21d0      	movs	r1, #208	@ 0xd0
 800207c:	4824      	ldr	r0, [pc, #144]	@ (8002110 <MPU6050_Init+0x104>)
 800207e:	f004 f9db 	bl	8006438 <HAL_I2C_Mem_Write>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MPU6050_Init+0x80>
			return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e03c      	b.n	8002106 <MPU6050_Init+0xfa>
		
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800208c:	2307      	movs	r3, #7
 800208e:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000)!= HAL_OK)
 8002090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002094:	9302      	str	r3, [sp, #8]
 8002096:	2301      	movs	r3, #1
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	1dbb      	adds	r3, r7, #6
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2301      	movs	r3, #1
 80020a0:	2219      	movs	r2, #25
 80020a2:	21d0      	movs	r1, #208	@ 0xd0
 80020a4:	481a      	ldr	r0, [pc, #104]	@ (8002110 <MPU6050_Init+0x104>)
 80020a6:	f004 f9c7 	bl	8006438 <HAL_I2C_Mem_Write>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MPU6050_Init+0xa8>
			return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e028      	b.n	8002106 <MPU6050_Init+0xfa>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 8g
		Data = 0x10;
 80020b4:	2310      	movs	r3, #16
 80020b6:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000)!= HAL_OK)
 80020b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020bc:	9302      	str	r3, [sp, #8]
 80020be:	2301      	movs	r3, #1
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	1dbb      	adds	r3, r7, #6
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2301      	movs	r3, #1
 80020c8:	221c      	movs	r2, #28
 80020ca:	21d0      	movs	r1, #208	@ 0xd0
 80020cc:	4810      	ldr	r0, [pc, #64]	@ (8002110 <MPU6050_Init+0x104>)
 80020ce:	f004 f9b3 	bl	8006438 <HAL_I2C_Mem_Write>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MPU6050_Init+0xd0>
			return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e014      	b.n	8002106 <MPU6050_Init+0xfa>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 500 �/s
		Data = 0x08;
 80020dc:	2308      	movs	r3, #8
 80020de:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000)!= HAL_OK)
 80020e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e4:	9302      	str	r3, [sp, #8]
 80020e6:	2301      	movs	r3, #1
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	1dbb      	adds	r3, r7, #6
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2301      	movs	r3, #1
 80020f0:	221b      	movs	r2, #27
 80020f2:	21d0      	movs	r1, #208	@ 0xd0
 80020f4:	4806      	ldr	r0, [pc, #24]	@ (8002110 <MPU6050_Init+0x104>)
 80020f6:	f004 f99f 	bl	8006438 <HAL_I2C_Mem_Write>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MPU6050_Init+0xf8>
			return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <MPU6050_Init+0xfa>
	}
	return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000520 	.word	0x20000520
 8002114:	00000000 	.word	0x00000000

08002118 <MPU6050_Read_Data>:


HAL_StatusTypeDef MPU6050_Read_Data (void)
{
 8002118:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800211c:	b088      	sub	sp, #32
 800211e:	af04      	add	r7, sp, #16
	uint8_t Rec_Data_Acc[6];
	uint8_t Rec_Data_Gyro[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG,1,Rec_Data_Acc,6,20) != HAL_OK)
 8002120:	2314      	movs	r3, #20
 8002122:	9302      	str	r3, [sp, #8]
 8002124:	2306      	movs	r3, #6
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	2301      	movs	r3, #1
 8002130:	223b      	movs	r2, #59	@ 0x3b
 8002132:	21d0      	movs	r1, #208	@ 0xd0
 8002134:	484c      	ldr	r0, [pc, #304]	@ (8002268 <MPU6050_Read_Data+0x150>)
 8002136:	f004 fa79 	bl	800662c <HAL_I2C_Mem_Read>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MPU6050_Read_Data+0x2c>
		return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e1b1      	b.n	80024a8 <MPU6050_Read_Data+0x390>

	Accel_X_RAW = (int16_t)(Rec_Data_Acc[0] << 8 | Rec_Data_Acc [1]);
 8002144:	7a3b      	ldrb	r3, [r7, #8]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	b21a      	sxth	r2, r3
 800214a:	7a7b      	ldrb	r3, [r7, #9]
 800214c:	b21b      	sxth	r3, r3
 800214e:	4313      	orrs	r3, r2
 8002150:	b21a      	sxth	r2, r3
 8002152:	4b46      	ldr	r3, [pc, #280]	@ (800226c <MPU6050_Read_Data+0x154>)
 8002154:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data_Acc[2] << 8 | Rec_Data_Acc [3]);
 8002156:	7abb      	ldrb	r3, [r7, #10]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	b21a      	sxth	r2, r3
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	b21b      	sxth	r3, r3
 8002160:	4313      	orrs	r3, r2
 8002162:	b21a      	sxth	r2, r3
 8002164:	4b42      	ldr	r3, [pc, #264]	@ (8002270 <MPU6050_Read_Data+0x158>)
 8002166:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data_Acc[4] << 8 | Rec_Data_Acc [5]);
 8002168:	7b3b      	ldrb	r3, [r7, #12]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b21a      	sxth	r2, r3
 800216e:	7b7b      	ldrb	r3, [r7, #13]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21a      	sxth	r2, r3
 8002176:	4b3f      	ldr	r3, [pc, #252]	@ (8002274 <MPU6050_Read_Data+0x15c>)
 8002178:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/4096.0 - 0.026;
 800217a:	4b3c      	ldr	r3, [pc, #240]	@ (800226c <MPU6050_Read_Data+0x154>)
 800217c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f973 	bl	800046c <__aeabi_i2d>
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <MPU6050_Read_Data+0x160>)
 800218c:	f7fe fb02 	bl	8000794 <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	a32d      	add	r3, pc, #180	@ (adr r3, 8002250 <MPU6050_Read_Data+0x138>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe f817 	bl	80001d0 <__aeabi_dsub>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fca1 	bl	8000af0 <__aeabi_d2f>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4a32      	ldr	r2, [pc, #200]	@ (800227c <MPU6050_Read_Data+0x164>)
 80021b2:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/4096.0 + 0.028;
 80021b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002270 <MPU6050_Read_Data+0x158>)
 80021b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f956 	bl	800046c <__aeabi_i2d>
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002278 <MPU6050_Read_Data+0x160>)
 80021c6:	f7fe fae5 	bl	8000794 <__aeabi_ddiv>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	a321      	add	r3, pc, #132	@ (adr r3, 8002258 <MPU6050_Read_Data+0x140>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	f7fd fffc 	bl	80001d4 <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f7fe fc84 	bl	8000af0 <__aeabi_d2f>
 80021e8:	4603      	mov	r3, r0
 80021ea:	4a25      	ldr	r2, [pc, #148]	@ (8002280 <MPU6050_Read_Data+0x168>)
 80021ec:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/4096.0 + 0.038;
 80021ee:	4b21      	ldr	r3, [pc, #132]	@ (8002274 <MPU6050_Read_Data+0x15c>)
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f939 	bl	800046c <__aeabi_i2d>
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002278 <MPU6050_Read_Data+0x160>)
 8002200:	f7fe fac8 	bl	8000794 <__aeabi_ddiv>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	a314      	add	r3, pc, #80	@ (adr r3, 8002260 <MPU6050_Read_Data+0x148>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fd ffdf 	bl	80001d4 <__adddf3>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fc67 	bl	8000af0 <__aeabi_d2f>
 8002222:	4603      	mov	r3, r0
 8002224:	4a17      	ldr	r2, [pc, #92]	@ (8002284 <MPU6050_Read_Data+0x16c>)
 8002226:	6013      	str	r3, [r2, #0]
	
	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG,1,Rec_Data_Gyro,6,20)!= HAL_OK)
 8002228:	2314      	movs	r3, #20
 800222a:	9302      	str	r3, [sp, #8]
 800222c:	2306      	movs	r3, #6
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	463b      	mov	r3, r7
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2301      	movs	r3, #1
 8002236:	2243      	movs	r2, #67	@ 0x43
 8002238:	21d0      	movs	r1, #208	@ 0xd0
 800223a:	480b      	ldr	r0, [pc, #44]	@ (8002268 <MPU6050_Read_Data+0x150>)
 800223c:	f004 f9f6 	bl	800662c <HAL_I2C_Mem_Read>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d020      	beq.n	8002288 <MPU6050_Read_Data+0x170>
		return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e12e      	b.n	80024a8 <MPU6050_Read_Data+0x390>
 800224a:	bf00      	nop
 800224c:	f3af 8000 	nop.w
 8002250:	76c8b439 	.word	0x76c8b439
 8002254:	3f9a9fbe 	.word	0x3f9a9fbe
 8002258:	3126e979 	.word	0x3126e979
 800225c:	3f9cac08 	.word	0x3f9cac08
 8002260:	6a7ef9db 	.word	0x6a7ef9db
 8002264:	3fa374bc 	.word	0x3fa374bc
 8002268:	20000520 	.word	0x20000520
 800226c:	20000410 	.word	0x20000410
 8002270:	20000412 	.word	0x20000412
 8002274:	20000414 	.word	0x20000414
 8002278:	40b00000 	.word	0x40b00000
 800227c:	2000041c 	.word	0x2000041c
 8002280:	20000420 	.word	0x20000420
 8002284:	20000424 	.word	0x20000424
	Gyro_X_RAW = (int16_t)(Rec_Data_Gyro[0] << 8 | Rec_Data_Gyro [1]);
 8002288:	783b      	ldrb	r3, [r7, #0]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	787b      	ldrb	r3, [r7, #1]
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21a      	sxth	r2, r3
 8002296:	4b92      	ldr	r3, [pc, #584]	@ (80024e0 <MPU6050_Read_Data+0x3c8>)
 8002298:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data_Gyro[2] << 8 | Rec_Data_Gyro [3]);
 800229a:	78bb      	ldrb	r3, [r7, #2]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21a      	sxth	r2, r3
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	b21b      	sxth	r3, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b21a      	sxth	r2, r3
 80022a8:	4b8e      	ldr	r3, [pc, #568]	@ (80024e4 <MPU6050_Read_Data+0x3cc>)
 80022aa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data_Gyro[4] << 8 | Rec_Data_Gyro [5]);
 80022ac:	793b      	ldrb	r3, [r7, #4]
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	797b      	ldrb	r3, [r7, #5]
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	4b8b      	ldr	r3, [pc, #556]	@ (80024e8 <MPU6050_Read_Data+0x3d0>)
 80022bc:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/65.5 + 1.4654;
 80022be:	4b88      	ldr	r3, [pc, #544]	@ (80024e0 <MPU6050_Read_Data+0x3c8>)
 80022c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f8d1 	bl	800046c <__aeabi_i2d>
 80022ca:	a37b      	add	r3, pc, #492	@ (adr r3, 80024b8 <MPU6050_Read_Data+0x3a0>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe fa60 	bl	8000794 <__aeabi_ddiv>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	a378      	add	r3, pc, #480	@ (adr r3, 80024c0 <MPU6050_Read_Data+0x3a8>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fd ff77 	bl	80001d4 <__adddf3>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f7fe fbff 	bl	8000af0 <__aeabi_d2f>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a7d      	ldr	r2, [pc, #500]	@ (80024ec <MPU6050_Read_Data+0x3d4>)
 80022f6:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/65.5 + 0.0916;
 80022f8:	4b7a      	ldr	r3, [pc, #488]	@ (80024e4 <MPU6050_Read_Data+0x3cc>)
 80022fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f8b4 	bl	800046c <__aeabi_i2d>
 8002304:	a36c      	add	r3, pc, #432	@ (adr r3, 80024b8 <MPU6050_Read_Data+0x3a0>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe fa43 	bl	8000794 <__aeabi_ddiv>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	a36c      	add	r3, pc, #432	@ (adr r3, 80024c8 <MPU6050_Read_Data+0x3b0>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ff5a 	bl	80001d4 <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fbe2 	bl	8000af0 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
 800232e:	4a70      	ldr	r2, [pc, #448]	@ (80024f0 <MPU6050_Read_Data+0x3d8>)
 8002330:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/65.5 - 0.97709;
 8002332:	4b6d      	ldr	r3, [pc, #436]	@ (80024e8 <MPU6050_Read_Data+0x3d0>)
 8002334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f897 	bl	800046c <__aeabi_i2d>
 800233e:	a35e      	add	r3, pc, #376	@ (adr r3, 80024b8 <MPU6050_Read_Data+0x3a0>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe fa26 	bl	8000794 <__aeabi_ddiv>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	a35f      	add	r3, pc, #380	@ (adr r3, 80024d0 <MPU6050_Read_Data+0x3b8>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	f7fd ff3b 	bl	80001d0 <__aeabi_dsub>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	f7fe fbc5 	bl	8000af0 <__aeabi_d2f>
 8002366:	4603      	mov	r3, r0
 8002368:	4a62      	ldr	r2, [pc, #392]	@ (80024f4 <MPU6050_Read_Data+0x3dc>)
 800236a:	6013      	str	r3, [r2, #0]
	
	AngleRoll = atan(Ay/(sqrt(Ax*Ax + Az*Az)))*180/pi;
 800236c:	4b62      	ldr	r3, [pc, #392]	@ (80024f8 <MPU6050_Read_Data+0x3e0>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f88d 	bl	8000490 <__aeabi_f2d>
 8002376:	4680      	mov	r8, r0
 8002378:	4689      	mov	r9, r1
 800237a:	4b60      	ldr	r3, [pc, #384]	@ (80024fc <MPU6050_Read_Data+0x3e4>)
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	4b5e      	ldr	r3, [pc, #376]	@ (80024fc <MPU6050_Read_Data+0x3e4>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800238a:	4b5d      	ldr	r3, [pc, #372]	@ (8002500 <MPU6050_Read_Data+0x3e8>)
 800238c:	edd3 6a00 	vldr	s13, [r3]
 8002390:	4b5b      	ldr	r3, [pc, #364]	@ (8002500 <MPU6050_Read_Data+0x3e8>)
 8002392:	edd3 7a00 	vldr	s15, [r3]
 8002396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800239e:	ee17 0a90 	vmov	r0, s15
 80023a2:	f7fe f875 	bl	8000490 <__aeabi_f2d>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	ec43 2b10 	vmov	d0, r2, r3
 80023ae:	f007 ff2b 	bl	800a208 <sqrt>
 80023b2:	ec53 2b10 	vmov	r2, r3, d0
 80023b6:	4640      	mov	r0, r8
 80023b8:	4649      	mov	r1, r9
 80023ba:	f7fe f9eb 	bl	8000794 <__aeabi_ddiv>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	ec43 2b17 	vmov	d7, r2, r3
 80023c6:	eeb0 0a47 	vmov.f32	s0, s14
 80023ca:	eef0 0a67 	vmov.f32	s1, s15
 80023ce:	f007 ff47 	bl	800a260 <atan>
 80023d2:	ec51 0b10 	vmov	r0, r1, d0
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <MPU6050_Read_Data+0x3ec>)
 80023dc:	f7fe f8b0 	bl	8000540 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	a33b      	add	r3, pc, #236	@ (adr r3, 80024d8 <MPU6050_Read_Data+0x3c0>)
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ee:	f7fe f9d1 	bl	8000794 <__aeabi_ddiv>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fb79 	bl	8000af0 <__aeabi_d2f>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a41      	ldr	r2, [pc, #260]	@ (8002508 <MPU6050_Read_Data+0x3f0>)
 8002402:	6013      	str	r3, [r2, #0]
	AnglePitch = -atan(Ax/(sqrt(Ay*Ay + Az*Az)))*180/pi;
 8002404:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <MPU6050_Read_Data+0x3e4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f841 	bl	8000490 <__aeabi_f2d>
 800240e:	4680      	mov	r8, r0
 8002410:	4689      	mov	r9, r1
 8002412:	4b39      	ldr	r3, [pc, #228]	@ (80024f8 <MPU6050_Read_Data+0x3e0>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	4b37      	ldr	r3, [pc, #220]	@ (80024f8 <MPU6050_Read_Data+0x3e0>)
 800241a:	edd3 7a00 	vldr	s15, [r3]
 800241e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002422:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <MPU6050_Read_Data+0x3e8>)
 8002424:	edd3 6a00 	vldr	s13, [r3]
 8002428:	4b35      	ldr	r3, [pc, #212]	@ (8002500 <MPU6050_Read_Data+0x3e8>)
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002436:	ee17 0a90 	vmov	r0, s15
 800243a:	f7fe f829 	bl	8000490 <__aeabi_f2d>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	ec43 2b10 	vmov	d0, r2, r3
 8002446:	f007 fedf 	bl	800a208 <sqrt>
 800244a:	ec53 2b10 	vmov	r2, r3, d0
 800244e:	4640      	mov	r0, r8
 8002450:	4649      	mov	r1, r9
 8002452:	f7fe f99f 	bl	8000794 <__aeabi_ddiv>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	ec43 2b17 	vmov	d7, r2, r3
 800245e:	eeb0 0a47 	vmov.f32	s0, s14
 8002462:	eef0 0a67 	vmov.f32	s1, s15
 8002466:	f007 fefb 	bl	800a260 <atan>
 800246a:	ec53 2b10 	vmov	r2, r3, d0
 800246e:	4614      	mov	r4, r2
 8002470:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <MPU6050_Read_Data+0x3ec>)
 800247a:	4620      	mov	r0, r4
 800247c:	4629      	mov	r1, r5
 800247e:	f7fe f85f 	bl	8000540 <__aeabi_dmul>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	a313      	add	r3, pc, #76	@ (adr r3, 80024d8 <MPU6050_Read_Data+0x3c0>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fe f980 	bl	8000794 <__aeabi_ddiv>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fb28 	bl	8000af0 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a1a      	ldr	r2, [pc, #104]	@ (800250c <MPU6050_Read_Data+0x3f4>)
 80024a4:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024b2:	bf00      	nop
 80024b4:	f3af 8000 	nop.w
 80024b8:	00000000 	.word	0x00000000
 80024bc:	40506000 	.word	0x40506000
 80024c0:	4538ef35 	.word	0x4538ef35
 80024c4:	3ff77247 	.word	0x3ff77247
 80024c8:	fc504817 	.word	0xfc504817
 80024cc:	3fb77318 	.word	0x3fb77318
 80024d0:	3f67f4dc 	.word	0x3f67f4dc
 80024d4:	3fef4452 	.word	0x3fef4452
 80024d8:	f01b866e 	.word	0xf01b866e
 80024dc:	400921f9 	.word	0x400921f9
 80024e0:	20000416 	.word	0x20000416
 80024e4:	20000418 	.word	0x20000418
 80024e8:	2000041a 	.word	0x2000041a
 80024ec:	20000428 	.word	0x20000428
 80024f0:	2000042c 	.word	0x2000042c
 80024f4:	20000430 	.word	0x20000430
 80024f8:	20000420 	.word	0x20000420
 80024fc:	2000041c 	.word	0x2000041c
 8002500:	20000424 	.word	0x20000424
 8002504:	40668000 	.word	0x40668000
 8002508:	20000404 	.word	0x20000404
 800250c:	20000408 	.word	0x20000408

08002510 <hmc5883l_init>:

void hmc5883l_init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af04      	add	r7, sp, #16
	uint8_t data = 0x78; //0x78 la 75Hz   0x70 la 15Hz
 8002516:	2378      	movs	r3, #120	@ 0x78
 8002518:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3,0x3C,CONFIGURATION_A, 1, &data, 1,HAL_MAX_DELAY); //�?置寄存器A
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	9302      	str	r3, [sp, #8]
 8002520:	2301      	movs	r3, #1
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2301      	movs	r3, #1
 800252a:	2200      	movs	r2, #0
 800252c:	213c      	movs	r1, #60	@ 0x3c
 800252e:	4814      	ldr	r0, [pc, #80]	@ (8002580 <hmc5883l_init+0x70>)
 8002530:	f003 ff82 	bl	8006438 <HAL_I2C_Mem_Write>
	data = 0x20;   // ± 1.3 Ga
 8002534:	2320      	movs	r3, #32
 8002536:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3,0x3C,CONFIGURATION_B, 1, &data, 1,HAL_MAX_DELAY); //�?置寄存器B
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	2301      	movs	r3, #1
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	1dfb      	adds	r3, r7, #7
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	2301      	movs	r3, #1
 8002548:	2201      	movs	r2, #1
 800254a:	213c      	movs	r1, #60	@ 0x3c
 800254c:	480c      	ldr	r0, [pc, #48]	@ (8002580 <hmc5883l_init+0x70>)
 800254e:	f003 ff73 	bl	8006438 <HAL_I2C_Mem_Write>
	data = 0x00;  ////mode continuous measurement
 8002552:	2300      	movs	r3, #0
 8002554:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c3,0x3C,HMC5883L_MODE, 1, &data, 1,HAL_MAX_DELAY);
 8002556:	f04f 33ff 	mov.w	r3, #4294967295
 800255a:	9302      	str	r3, [sp, #8]
 800255c:	2301      	movs	r3, #1
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	1dfb      	adds	r3, r7, #7
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2301      	movs	r3, #1
 8002566:	2202      	movs	r2, #2
 8002568:	213c      	movs	r1, #60	@ 0x3c
 800256a:	4805      	ldr	r0, [pc, #20]	@ (8002580 <hmc5883l_init+0x70>)
 800256c:	f003 ff64 	bl	8006438 <HAL_I2C_Mem_Write>
	HAL_Delay(10);
 8002570:	200a      	movs	r0, #10
 8002572:	f002 fd8d 	bl	8005090 <HAL_Delay>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200005c8 	.word	0x200005c8
 8002584:	00000000 	.word	0x00000000

08002588 <hmc5883l_rawread>:

void hmc5883l_rawread(float *GaX, float *GaY, float *GaZ){
 8002588:	b580      	push	{r7, lr}
 800258a:	b08c      	sub	sp, #48	@ 0x30
 800258c:	af04      	add	r7, sp, #16
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
	uint8_t data[6];
    HAL_I2C_Mem_Read(&hi2c3, 0x3C, 0x03,I2C_MEMADD_SIZE_8BIT,(uint8_t *)data,6, 1000);
 8002594:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	2306      	movs	r3, #6
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2301      	movs	r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	213c      	movs	r1, #60	@ 0x3c
 80025aa:	4835      	ldr	r0, [pc, #212]	@ (8002680 <hmc5883l_rawread+0xf8>)
 80025ac:	f004 f83e 	bl	800662c <HAL_I2C_Mem_Read>
	int16_t dxra,dyra,dzra;
	dxra = (data[0] << 8) | data[1];
 80025b0:	7d3b      	ldrb	r3, [r7, #20]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	b21a      	sxth	r2, r3
 80025b6:	7d7b      	ldrb	r3, [r7, #21]
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	4313      	orrs	r3, r2
 80025bc:	83fb      	strh	r3, [r7, #30]
	*GaX = (float)dxra*0.92;      //*GaX = (float)dxra /1090;
 80025be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ca:	ee17 0a90 	vmov	r0, s15
 80025ce:	f7fd ff5f 	bl	8000490 <__aeabi_f2d>
 80025d2:	a329      	add	r3, pc, #164	@ (adr r3, 8002678 <hmc5883l_rawread+0xf0>)
 80025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d8:	f7fd ffb2 	bl	8000540 <__aeabi_dmul>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	f7fe fa84 	bl	8000af0 <__aeabi_d2f>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
	dyra = (data[4] << 8) | data[5];
 80025ee:	7e3b      	ldrb	r3, [r7, #24]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	b21a      	sxth	r2, r3
 80025f4:	7e7b      	ldrb	r3, [r7, #25]
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	4313      	orrs	r3, r2
 80025fa:	83bb      	strh	r3, [r7, #28]
	*GaY = (float)dyra*0.92;  //*GaY = (float)dyra /1090 ;
 80025fc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002600:	ee07 3a90 	vmov	s15, r3
 8002604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002608:	ee17 0a90 	vmov	r0, s15
 800260c:	f7fd ff40 	bl	8000490 <__aeabi_f2d>
 8002610:	a319      	add	r3, pc, #100	@ (adr r3, 8002678 <hmc5883l_rawread+0xf0>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd ff93 	bl	8000540 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fa65 	bl	8000af0 <__aeabi_d2f>
 8002626:	4602      	mov	r2, r0
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	601a      	str	r2, [r3, #0]
	dzra = (data[2] << 8) | data[3];
 800262c:	7dbb      	ldrb	r3, [r7, #22]
 800262e:	021b      	lsls	r3, r3, #8
 8002630:	b21a      	sxth	r2, r3
 8002632:	7dfb      	ldrb	r3, [r7, #23]
 8002634:	b21b      	sxth	r3, r3
 8002636:	4313      	orrs	r3, r2
 8002638:	837b      	strh	r3, [r7, #26]
	*GaZ = (float)dzra*0.92;	//*GaZ = (float)dzra /1090 ;
 800263a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002646:	ee17 0a90 	vmov	r0, s15
 800264a:	f7fd ff21 	bl	8000490 <__aeabi_f2d>
 800264e:	a30a      	add	r3, pc, #40	@ (adr r3, 8002678 <hmc5883l_rawread+0xf0>)
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f7fd ff74 	bl	8000540 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe fa46 	bl	8000af0 <__aeabi_d2f>
 8002664:	4602      	mov	r2, r0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	f3af 8000 	nop.w
 8002678:	d70a3d71 	.word	0xd70a3d71
 800267c:	3fed70a3 	.word	0x3fed70a3
 8002680:	200005c8 	.word	0x200005c8
 8002684:	00000000 	.word	0x00000000

08002688 <hmc5883l_read>:

void  hmc5883l_read(){
 8002688:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800268c:	b088      	sub	sp, #32
 800268e:	af00      	add	r7, sp, #0

		float rawGaX,rawGaY,rawGaZ;
		float compass_x_horizontal,compass_y_horizontal;
		hmc5883l_rawread(&rawGaX,&rawGaY,&rawGaZ);
 8002690:	463a      	mov	r2, r7
 8002692:	1d39      	adds	r1, r7, #4
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff75 	bl	8002588 <hmc5883l_rawread>
		rawGaX *= -1;
 800269e:	edd7 7a02 	vldr	s15, [r7, #8]
 80026a2:	eef1 7a67 	vneg.f32	s15, s15
 80026a6:	edc7 7a02 	vstr	s15, [r7, #8]
		rawGaY *= -1;
 80026aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ae:	eef1 7a67 	vneg.f32	s15, s15
 80026b2:	edc7 7a01 	vstr	s15, [r7, #4]
		float GaY = rawGaX - 75.9000015;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7fd fee9 	bl	8000490 <__aeabi_f2d>
 80026be:	a3e2      	add	r3, pc, #904	@ (adr r3, 8002a48 <hmc5883l_read+0x3c0>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f7fd fd84 	bl	80001d0 <__aeabi_dsub>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f7fe fa0e 	bl	8000af0 <__aeabi_d2f>
 80026d4:	4603      	mov	r3, r0
 80026d6:	61fb      	str	r3, [r7, #28]
		float GaX = rawGaY + 350.0600134;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fed8 	bl	8000490 <__aeabi_f2d>
 80026e0:	a3db      	add	r3, pc, #876	@ (adr r3, 8002a50 <hmc5883l_read+0x3c8>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd fd75 	bl	80001d4 <__adddf3>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4610      	mov	r0, r2
 80026f0:	4619      	mov	r1, r3
 80026f2:	f7fe f9fd 	bl	8000af0 <__aeabi_d2f>
 80026f6:	4603      	mov	r3, r0
 80026f8:	61bb      	str	r3, [r7, #24]
		float GaZ = rawGaZ + 54.2799988;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fec7 	bl	8000490 <__aeabi_f2d>
 8002702:	a3d5      	add	r3, pc, #852	@ (adr r3, 8002a58 <hmc5883l_read+0x3d0>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fd fd64 	bl	80001d4 <__adddf3>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f7fe f9ec 	bl	8000af0 <__aeabi_d2f>
 8002718:	4603      	mov	r3, r0
 800271a:	617b      	str	r3, [r7, #20]

		mz = GaZ;
 800271c:	4ac2      	ldr	r2, [pc, #776]	@ (8002a28 <hmc5883l_read+0x3a0>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	6013      	str	r3, [r2, #0]
		mx = GaX;
 8002722:	4ac2      	ldr	r2, [pc, #776]	@ (8002a2c <hmc5883l_read+0x3a4>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6013      	str	r3, [r2, #0]
		my = GaY;
 8002728:	4ac1      	ldr	r2, [pc, #772]	@ (8002a30 <hmc5883l_read+0x3a8>)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	6013      	str	r3, [r2, #0]
		//GaX = compass_y(arduino)
		// mai tets thu GaX = rawGaY + 350, GaY  = rawGaX -75;
		compass_x_horizontal = (float)GaX * cos(KalmanAnglePitch * (pi/180))
 800272e:	69b8      	ldr	r0, [r7, #24]
 8002730:	f7fd feae 	bl	8000490 <__aeabi_f2d>
 8002734:	4604      	mov	r4, r0
 8002736:	460d      	mov	r5, r1
 8002738:	4bbe      	ldr	r3, [pc, #760]	@ (8002a34 <hmc5883l_read+0x3ac>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fea7 	bl	8000490 <__aeabi_f2d>
 8002742:	a3b3      	add	r3, pc, #716	@ (adr r3, 8002a10 <hmc5883l_read+0x388>)
 8002744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002748:	f7fd fefa 	bl	8000540 <__aeabi_dmul>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	ec43 2b17 	vmov	d7, r2, r3
 8002754:	eeb0 0a47 	vmov.f32	s0, s14
 8002758:	eef0 0a67 	vmov.f32	s1, s15
 800275c:	f007 ff18 	bl	800a590 <cos>
 8002760:	ec53 2b10 	vmov	r2, r3, d0
 8002764:	4620      	mov	r0, r4
 8002766:	4629      	mov	r1, r5
 8002768:	f7fd feea 	bl	8000540 <__aeabi_dmul>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4690      	mov	r8, r2
 8002772:	4699      	mov	r9, r3
		                        + (float)GaY * sin(KalmanAngleRoll * (pi/180))* sin(KalmanAnglePitch * (pi/180))
 8002774:	69f8      	ldr	r0, [r7, #28]
 8002776:	f7fd fe8b 	bl	8000490 <__aeabi_f2d>
 800277a:	4604      	mov	r4, r0
 800277c:	460d      	mov	r5, r1
 800277e:	4bae      	ldr	r3, [pc, #696]	@ (8002a38 <hmc5883l_read+0x3b0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fe84 	bl	8000490 <__aeabi_f2d>
 8002788:	a3a1      	add	r3, pc, #644	@ (adr r3, 8002a10 <hmc5883l_read+0x388>)
 800278a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278e:	f7fd fed7 	bl	8000540 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	ec43 2b17 	vmov	d7, r2, r3
 800279a:	eeb0 0a47 	vmov.f32	s0, s14
 800279e:	eef0 0a67 	vmov.f32	s1, s15
 80027a2:	f007 ff51 	bl	800a648 <sin>
 80027a6:	ec53 2b10 	vmov	r2, r3, d0
 80027aa:	4620      	mov	r0, r4
 80027ac:	4629      	mov	r1, r5
 80027ae:	f7fd fec7 	bl	8000540 <__aeabi_dmul>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4614      	mov	r4, r2
 80027b8:	461d      	mov	r5, r3
 80027ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002a34 <hmc5883l_read+0x3ac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fe66 	bl	8000490 <__aeabi_f2d>
 80027c4:	a392      	add	r3, pc, #584	@ (adr r3, 8002a10 <hmc5883l_read+0x388>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd feb9 	bl	8000540 <__aeabi_dmul>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	ec43 2b17 	vmov	d7, r2, r3
 80027d6:	eeb0 0a47 	vmov.f32	s0, s14
 80027da:	eef0 0a67 	vmov.f32	s1, s15
 80027de:	f007 ff33 	bl	800a648 <sin>
 80027e2:	ec53 2b10 	vmov	r2, r3, d0
 80027e6:	4620      	mov	r0, r4
 80027e8:	4629      	mov	r1, r5
 80027ea:	f7fd fea9 	bl	8000540 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	4640      	mov	r0, r8
 80027f4:	4649      	mov	r1, r9
 80027f6:	f7fd fced 	bl	80001d4 <__adddf3>
 80027fa:	4602      	mov	r2, r0
 80027fc:	460b      	mov	r3, r1
 80027fe:	4690      	mov	r8, r2
 8002800:	4699      	mov	r9, r3
		                        - (float)GaZ * cos(KalmanAngleRoll * (pi/180)) * sin(KalmanAnglePitch * (pi/180));
 8002802:	6978      	ldr	r0, [r7, #20]
 8002804:	f7fd fe44 	bl	8000490 <__aeabi_f2d>
 8002808:	4604      	mov	r4, r0
 800280a:	460d      	mov	r5, r1
 800280c:	4b8a      	ldr	r3, [pc, #552]	@ (8002a38 <hmc5883l_read+0x3b0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7fd fe3d 	bl	8000490 <__aeabi_f2d>
 8002816:	a37e      	add	r3, pc, #504	@ (adr r3, 8002a10 <hmc5883l_read+0x388>)
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	f7fd fe90 	bl	8000540 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	ec43 2b17 	vmov	d7, r2, r3
 8002828:	eeb0 0a47 	vmov.f32	s0, s14
 800282c:	eef0 0a67 	vmov.f32	s1, s15
 8002830:	f007 feae 	bl	800a590 <cos>
 8002834:	ec53 2b10 	vmov	r2, r3, d0
 8002838:	4620      	mov	r0, r4
 800283a:	4629      	mov	r1, r5
 800283c:	f7fd fe80 	bl	8000540 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4614      	mov	r4, r2
 8002846:	461d      	mov	r5, r3
 8002848:	4b7a      	ldr	r3, [pc, #488]	@ (8002a34 <hmc5883l_read+0x3ac>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe1f 	bl	8000490 <__aeabi_f2d>
 8002852:	a36f      	add	r3, pc, #444	@ (adr r3, 8002a10 <hmc5883l_read+0x388>)
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	f7fd fe72 	bl	8000540 <__aeabi_dmul>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	ec43 2b17 	vmov	d7, r2, r3
 8002864:	eeb0 0a47 	vmov.f32	s0, s14
 8002868:	eef0 0a67 	vmov.f32	s1, s15
 800286c:	f007 feec 	bl	800a648 <sin>
 8002870:	ec53 2b10 	vmov	r2, r3, d0
 8002874:	4620      	mov	r0, r4
 8002876:	4629      	mov	r1, r5
 8002878:	f7fd fe62 	bl	8000540 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4640      	mov	r0, r8
 8002882:	4649      	mov	r1, r9
 8002884:	f7fd fca4 	bl	80001d0 <__aeabi_dsub>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
		compass_x_horizontal = (float)GaX * cos(KalmanAnglePitch * (pi/180))
 800288c:	4610      	mov	r0, r2
 800288e:	4619      	mov	r1, r3
 8002890:	f7fe f92e 	bl	8000af0 <__aeabi_d2f>
 8002894:	4603      	mov	r3, r0
 8002896:	613b      	str	r3, [r7, #16]
		compass_y_horizontal = (float)GaY * cos(KalmanAngleRoll * (pi/180))
 8002898:	69f8      	ldr	r0, [r7, #28]
 800289a:	f7fd fdf9 	bl	8000490 <__aeabi_f2d>
 800289e:	4604      	mov	r4, r0
 80028a0:	460d      	mov	r5, r1
 80028a2:	4b65      	ldr	r3, [pc, #404]	@ (8002a38 <hmc5883l_read+0x3b0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fd fdf2 	bl	8000490 <__aeabi_f2d>
 80028ac:	a358      	add	r3, pc, #352	@ (adr r3, 8002a10 <hmc5883l_read+0x388>)
 80028ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b2:	f7fd fe45 	bl	8000540 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	ec43 2b17 	vmov	d7, r2, r3
 80028be:	eeb0 0a47 	vmov.f32	s0, s14
 80028c2:	eef0 0a67 	vmov.f32	s1, s15
 80028c6:	f007 fe63 	bl	800a590 <cos>
 80028ca:	ec53 2b10 	vmov	r2, r3, d0
 80028ce:	4620      	mov	r0, r4
 80028d0:	4629      	mov	r1, r5
 80028d2:	f7fd fe35 	bl	8000540 <__aeabi_dmul>
 80028d6:	4602      	mov	r2, r0
 80028d8:	460b      	mov	r3, r1
 80028da:	4690      	mov	r8, r2
 80028dc:	4699      	mov	r9, r3
		                        + (float)GaZ * sin(KalmanAngleRoll * (pi/180));
 80028de:	6978      	ldr	r0, [r7, #20]
 80028e0:	f7fd fdd6 	bl	8000490 <__aeabi_f2d>
 80028e4:	4604      	mov	r4, r0
 80028e6:	460d      	mov	r5, r1
 80028e8:	4b53      	ldr	r3, [pc, #332]	@ (8002a38 <hmc5883l_read+0x3b0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fdcf 	bl	8000490 <__aeabi_f2d>
 80028f2:	a347      	add	r3, pc, #284	@ (adr r3, 8002a10 <hmc5883l_read+0x388>)
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	f7fd fe22 	bl	8000540 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	ec43 2b17 	vmov	d7, r2, r3
 8002904:	eeb0 0a47 	vmov.f32	s0, s14
 8002908:	eef0 0a67 	vmov.f32	s1, s15
 800290c:	f007 fe9c 	bl	800a648 <sin>
 8002910:	ec53 2b10 	vmov	r2, r3, d0
 8002914:	4620      	mov	r0, r4
 8002916:	4629      	mov	r1, r5
 8002918:	f7fd fe12 	bl	8000540 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4640      	mov	r0, r8
 8002922:	4649      	mov	r1, r9
 8002924:	f7fd fc56 	bl	80001d4 <__adddf3>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
		compass_y_horizontal = (float)GaY * cos(KalmanAngleRoll * (pi/180))
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f7fe f8de 	bl	8000af0 <__aeabi_d2f>
 8002934:	4603      	mov	r3, r0
 8002936:	60fb      	str	r3, [r7, #12]
		actual_compass_heading = atan2(compass_y_horizontal,compass_x_horizontal)*180/pi;
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7fd fda9 	bl	8000490 <__aeabi_f2d>
 800293e:	4604      	mov	r4, r0
 8002940:	460d      	mov	r5, r1
 8002942:	6938      	ldr	r0, [r7, #16]
 8002944:	f7fd fda4 	bl	8000490 <__aeabi_f2d>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	ec43 2b11 	vmov	d1, r2, r3
 8002950:	ec45 4b10 	vmov	d0, r4, r5
 8002954:	f007 fbe6 	bl	800a124 <atan2>
 8002958:	ec51 0b10 	vmov	r0, r1, d0
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	4b36      	ldr	r3, [pc, #216]	@ (8002a3c <hmc5883l_read+0x3b4>)
 8002962:	f7fd fded 	bl	8000540 <__aeabi_dmul>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	a32a      	add	r3, pc, #168	@ (adr r3, 8002a18 <hmc5883l_read+0x390>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd ff0e 	bl	8000794 <__aeabi_ddiv>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f7fe f8b6 	bl	8000af0 <__aeabi_d2f>
 8002984:	4603      	mov	r3, r0
 8002986:	4a2e      	ldr	r2, [pc, #184]	@ (8002a40 <hmc5883l_read+0x3b8>)
 8002988:	6013      	str	r3, [r2, #0]
		actual_compass_heading += 7.001;
 800298a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a40 <hmc5883l_read+0x3b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fd7e 	bl	8000490 <__aeabi_f2d>
 8002994:	a322      	add	r3, pc, #136	@ (adr r3, 8002a20 <hmc5883l_read+0x398>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fd fc1b 	bl	80001d4 <__adddf3>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	f7fe f8a3 	bl	8000af0 <__aeabi_d2f>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a24      	ldr	r2, [pc, #144]	@ (8002a40 <hmc5883l_read+0x3b8>)
 80029ae:	6013      	str	r3, [r2, #0]
		if(actual_compass_heading < 0) actual_compass_heading += 360;
 80029b0:	4b23      	ldr	r3, [pc, #140]	@ (8002a40 <hmc5883l_read+0x3b8>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029be:	d50a      	bpl.n	80029d6 <hmc5883l_read+0x34e>
 80029c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <hmc5883l_read+0x3b8>)
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002a44 <hmc5883l_read+0x3bc>
 80029ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <hmc5883l_read+0x3b8>)
 80029d0:	edc3 7a00 	vstr	s15, [r3]
		else if(actual_compass_heading > 360) actual_compass_heading -= 360;
}
 80029d4:	e014      	b.n	8002a00 <hmc5883l_read+0x378>
		else if(actual_compass_heading > 360) actual_compass_heading -= 360;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <hmc5883l_read+0x3b8>)
 80029d8:	edd3 7a00 	vldr	s15, [r3]
 80029dc:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002a44 <hmc5883l_read+0x3bc>
 80029e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e8:	dc00      	bgt.n	80029ec <hmc5883l_read+0x364>
}
 80029ea:	e009      	b.n	8002a00 <hmc5883l_read+0x378>
		else if(actual_compass_heading > 360) actual_compass_heading -= 360;
 80029ec:	4b14      	ldr	r3, [pc, #80]	@ (8002a40 <hmc5883l_read+0x3b8>)
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002a44 <hmc5883l_read+0x3bc>
 80029f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <hmc5883l_read+0x3b8>)
 80029fc:	edc3 7a00 	vstr	s15, [r3]
}
 8002a00:	bf00      	nop
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a0a:	bf00      	nop
 8002a0c:	f3af 8000 	nop.w
 8002a10:	a50de270 	.word	0xa50de270
 8002a14:	3f91df45 	.word	0x3f91df45
 8002a18:	f01b866e 	.word	0xf01b866e
 8002a1c:	400921f9 	.word	0x400921f9
 8002a20:	24dd2f1b 	.word	0x24dd2f1b
 8002a24:	401c0106 	.word	0x401c0106
 8002a28:	20000518 	.word	0x20000518
 8002a2c:	20000510 	.word	0x20000510
 8002a30:	20000514 	.word	0x20000514
 8002a34:	20000488 	.word	0x20000488
 8002a38:	20000484 	.word	0x20000484
 8002a3c:	40668000 	.word	0x40668000
 8002a40:	2000051c 	.word	0x2000051c
 8002a44:	43b40000 	.word	0x43b40000
 8002a48:	9fe43676 	.word	0x9fe43676
 8002a4c:	4052f999 	.word	0x4052f999
 8002a50:	d09c6526 	.word	0xd09c6526
 8002a54:	4075e0f5 	.word	0x4075e0f5
 8002a58:	002c75aa 	.word	0x002c75aa
 8002a5c:	404b23d7 	.word	0x404b23d7

08002a60 <pid_equation>:

void Calib_Gyro(void);
void Reset_MPU6050(void);

void pid_equation(float Error, float P , float I, float D, float PrevError, float PrevIterm) {
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b08a      	sub	sp, #40	@ 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	ed87 0a05 	vstr	s0, [r7, #20]
 8002a6a:	edc7 0a04 	vstr	s1, [r7, #16]
 8002a6e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002a72:	edc7 1a02 	vstr	s3, [r7, #8]
 8002a76:	ed87 2a01 	vstr	s4, [r7, #4]
 8002a7a:	edc7 2a00 	vstr	s5, [r7]
  // T = 4ms chu ky lay mau, 250Hz
  // T = 20ms chu ky lay mau, 50Hz
  float Pterm=P*Error;
 8002a7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a82:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8a:	edc7 7a07 	vstr	s15, [r7, #28]
  float Iterm=PrevIterm+I*(Error+PrevError)*0.004/2;
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f7fd fcfe 	bl	8000490 <__aeabi_f2d>
 8002a94:	4604      	mov	r4, r0
 8002a96:	460d      	mov	r5, r1
 8002a98:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aac:	ee17 0a90 	vmov	r0, s15
 8002ab0:	f7fd fcee 	bl	8000490 <__aeabi_f2d>
 8002ab4:	a340      	add	r3, pc, #256	@ (adr r3, 8002bb8 <pid_equation+0x158>)
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fd41 	bl	8000540 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002ace:	f7fd fe61 	bl	8000794 <__aeabi_ddiv>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4620      	mov	r0, r4
 8002ad8:	4629      	mov	r1, r5
 8002ada:	f7fd fb7b 	bl	80001d4 <__adddf3>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f803 	bl	8000af0 <__aeabi_d2f>
 8002aea:	4603      	mov	r3, r0
 8002aec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (Iterm > 400) Iterm=400;
 8002aee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002af2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002bc0 <pid_equation+0x160>
 8002af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afe:	dd02      	ble.n	8002b06 <pid_equation+0xa6>
 8002b00:	4b30      	ldr	r3, [pc, #192]	@ (8002bc4 <pid_equation+0x164>)
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b04:	e00a      	b.n	8002b1c <pid_equation+0xbc>
  else if (Iterm <-400) Iterm=-400;
 8002b06:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b0a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002bc8 <pid_equation+0x168>
 8002b0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b16:	d501      	bpl.n	8002b1c <pid_equation+0xbc>
 8002b18:	4b2c      	ldr	r3, [pc, #176]	@ (8002bcc <pid_equation+0x16c>)
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  float Dterm=D*(Error-PrevError)/0.004;
 8002b1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b30:	ee17 0a90 	vmov	r0, s15
 8002b34:	f7fd fcac 	bl	8000490 <__aeabi_f2d>
 8002b38:	a31f      	add	r3, pc, #124	@ (adr r3, 8002bb8 <pid_equation+0x158>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fe29 	bl	8000794 <__aeabi_ddiv>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4610      	mov	r0, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f7fd ffd1 	bl	8000af0 <__aeabi_d2f>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	61bb      	str	r3, [r7, #24]
  float PIDOutput= Pterm+Iterm+Dterm;
 8002b52:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b56:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b66:	edc7 7a08 	vstr	s15, [r7, #32]
  if (PIDOutput>400) PIDOutput=400;
 8002b6a:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b6e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002bc0 <pid_equation+0x160>
 8002b72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	dd02      	ble.n	8002b82 <pid_equation+0x122>
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <pid_equation+0x164>)
 8002b7e:	623b      	str	r3, [r7, #32]
 8002b80:	e00a      	b.n	8002b98 <pid_equation+0x138>
  else if (PIDOutput <-400) PIDOutput=-400;
 8002b82:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b86:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002bc8 <pid_equation+0x168>
 8002b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	d501      	bpl.n	8002b98 <pid_equation+0x138>
 8002b94:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <pid_equation+0x16c>)
 8002b96:	623b      	str	r3, [r7, #32]
  PIDReturn[0]=PIDOutput;
 8002b98:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd0 <pid_equation+0x170>)
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	6013      	str	r3, [r2, #0]
  PIDReturn[1]=Error;
 8002b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd0 <pid_equation+0x170>)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	6053      	str	r3, [r2, #4]
  PIDReturn[2]=Iterm;
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <pid_equation+0x170>)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba8:	6093      	str	r3, [r2, #8]
}
 8002baa:	bf00      	nop
 8002bac:	3728      	adds	r7, #40	@ 0x28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	f3af 8000 	nop.w
 8002bb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bbc:	3f70624d 	.word	0x3f70624d
 8002bc0:	43c80000 	.word	0x43c80000
 8002bc4:	43c80000 	.word	0x43c80000
 8002bc8:	c3c80000 	.word	0xc3c80000
 8002bcc:	c3c80000 	.word	0xc3c80000
 8002bd0:	200004d4 	.word	0x200004d4

08002bd4 <reset_pid>:

void reset_pid(void) {
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  PrevErrorRateRoll=0; PrevErrorRatePitch=0; PrevErrorRateYaw=0;
 8002bd8:	4b16      	ldr	r3, [pc, #88]	@ (8002c34 <reset_pid+0x60>)
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <reset_pid+0x64>)
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4b14      	ldr	r3, [pc, #80]	@ (8002c3c <reset_pid+0x68>)
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
  PrevItermRateRoll=0; PrevItermRatePitch=0; PrevItermRateYaw=0;
 8002bf0:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <reset_pid+0x6c>)
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	4b12      	ldr	r3, [pc, #72]	@ (8002c44 <reset_pid+0x70>)
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <reset_pid+0x74>)
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
  PrevErrorAngleRoll=0; PrevErrorAnglePitch=0;    
 8002c08:	4b10      	ldr	r3, [pc, #64]	@ (8002c4c <reset_pid+0x78>)
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	4b0f      	ldr	r3, [pc, #60]	@ (8002c50 <reset_pid+0x7c>)
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
  PrevItermAngleRoll=0; PrevItermAnglePitch=0;
 8002c18:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <reset_pid+0x80>)
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	4b0d      	ldr	r3, [pc, #52]	@ (8002c58 <reset_pid+0x84>)
 8002c22:	f04f 0200 	mov.w	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	200004bc 	.word	0x200004bc
 8002c38:	200004c0 	.word	0x200004c0
 8002c3c:	200004c4 	.word	0x200004c4
 8002c40:	200004c8 	.word	0x200004c8
 8002c44:	200004cc 	.word	0x200004cc
 8002c48:	200004d0 	.word	0x200004d0
 8002c4c:	20000500 	.word	0x20000500
 8002c50:	20000504 	.word	0x20000504
 8002c54:	20000508 	.word	0x20000508
 8002c58:	2000050c 	.word	0x2000050c

08002c5c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a04      	ldr	r2, [pc, #16]	@ (8002c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_TIM_PeriodElapsedCallback+0x16>
	{	
		Send_Data_To_Gui();
 8002c6e:	f7ff f81b 	bl	8001ca8 <Send_Data_To_Gui>
	}
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40000800 	.word	0x40000800

08002c80 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{   
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buff, sizeof(Rx_buff));
 8002c8c:	224b      	movs	r2, #75	@ 0x4b
 8002c8e:	4975      	ldr	r1, [pc, #468]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002c90:	4875      	ldr	r0, [pc, #468]	@ (8002e68 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8002c92:	f006 f8c3 	bl	8008e1c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002c96:	4b75      	ldr	r3, [pc, #468]	@ (8002e6c <HAL_UARTEx_RxEventCallback+0x1ec>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b73      	ldr	r3, [pc, #460]	@ (8002e6c <HAL_UARTEx_RxEventCallback+0x1ec>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0208 	bic.w	r2, r2, #8
 8002ca4:	601a      	str	r2, [r3, #0]
	size_RxData = Size;
 8002ca6:	4a72      	ldr	r2, [pc, #456]	@ (8002e70 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	8013      	strh	r3, [r2, #0]
	if ((Rx_buff[0] == 0xAA) && (Rx_buff[1] == 0xFF) && (Rx_buff[2] == size_RxData))
 8002cac:	4b6d      	ldr	r3, [pc, #436]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2baa      	cmp	r3, #170	@ 0xaa
 8002cb2:	f040 809e 	bne.w	8002df2 <HAL_UARTEx_RxEventCallback+0x172>
 8002cb6:	4b6b      	ldr	r3, [pc, #428]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	2bff      	cmp	r3, #255	@ 0xff
 8002cbc:	f040 8099 	bne.w	8002df2 <HAL_UARTEx_RxEventCallback+0x172>
 8002cc0:	4b68      	ldr	r3, [pc, #416]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002cc2:	789b      	ldrb	r3, [r3, #2]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002e70 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	f040 8091 	bne.w	8002df2 <HAL_UARTEx_RxEventCallback+0x172>
	{
		memset(Tx_buff, 0, sizeof(Tx_buff));
 8002cd0:	2246      	movs	r2, #70	@ 0x46
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4867      	ldr	r0, [pc, #412]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002cd6:	f007 f9e5 	bl	800a0a4 <memset>
		memcpy(Rx_Data, Rx_buff, sizeof(Rx_buff));
 8002cda:	4a67      	ldr	r2, [pc, #412]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002cdc:	4b61      	ldr	r3, [pc, #388]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	234b      	movs	r3, #75	@ 0x4b
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f007 fa0f 	bl	800a108 <memcpy>
		memset(Rx_buff, 0, sizeof(Rx_buff));
 8002cea:	224b      	movs	r2, #75	@ 0x4b
 8002cec:	2100      	movs	r1, #0
 8002cee:	485d      	ldr	r0, [pc, #372]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002cf0:	f007 f9d8 	bl	800a0a4 <memset>

		// gan gia tri pid vao
		memcpy(&PAngleRoll, &Rx_Data[3], sizeof(float));
 8002cf4:	4b60      	ldr	r3, [pc, #384]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002cf6:	f8d3 3003 	ldr.w	r3, [r3, #3]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b5f      	ldr	r3, [pc, #380]	@ (8002e7c <HAL_UARTEx_RxEventCallback+0x1fc>)
 8002cfe:	601a      	str	r2, [r3, #0]
		memcpy(&IAngleRoll, &Rx_Data[7], sizeof(float));
 8002d00:	4b5d      	ldr	r3, [pc, #372]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d02:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b5d      	ldr	r3, [pc, #372]	@ (8002e80 <HAL_UARTEx_RxEventCallback+0x200>)
 8002d0a:	601a      	str	r2, [r3, #0]
		memcpy(&DAngleRoll, &Rx_Data[11], sizeof(float));
 8002d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d0e:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002d12:	461a      	mov	r2, r3
 8002d14:	4b5b      	ldr	r3, [pc, #364]	@ (8002e84 <HAL_UARTEx_RxEventCallback+0x204>)
 8002d16:	601a      	str	r2, [r3, #0]

		memcpy(&PAnglePitch, &Rx_Data[15], sizeof(float));
 8002d18:	4b57      	ldr	r3, [pc, #348]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d1a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b59      	ldr	r3, [pc, #356]	@ (8002e88 <HAL_UARTEx_RxEventCallback+0x208>)
 8002d22:	601a      	str	r2, [r3, #0]
		memcpy(&IAnglePitch, &Rx_Data[19], sizeof(float));
 8002d24:	4b54      	ldr	r3, [pc, #336]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d26:	f8d3 3013 	ldr.w	r3, [r3, #19]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b57      	ldr	r3, [pc, #348]	@ (8002e8c <HAL_UARTEx_RxEventCallback+0x20c>)
 8002d2e:	601a      	str	r2, [r3, #0]
		memcpy(&DAnglePitch, &Rx_Data[23], sizeof(float));
 8002d30:	4b51      	ldr	r3, [pc, #324]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d32:	f8d3 3017 	ldr.w	r3, [r3, #23]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b55      	ldr	r3, [pc, #340]	@ (8002e90 <HAL_UARTEx_RxEventCallback+0x210>)
 8002d3a:	601a      	str	r2, [r3, #0]

		memcpy(&PRateRoll, &Rx_Data[27], sizeof(float));
 8002d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d3e:	f8d3 301b 	ldr.w	r3, [r3, #27]
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b53      	ldr	r3, [pc, #332]	@ (8002e94 <HAL_UARTEx_RxEventCallback+0x214>)
 8002d46:	601a      	str	r2, [r3, #0]
		memcpy(&IRateRoll, &Rx_Data[31], sizeof(float));
 8002d48:	4b4b      	ldr	r3, [pc, #300]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d4a:	f8d3 301f 	ldr.w	r3, [r3, #31]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b51      	ldr	r3, [pc, #324]	@ (8002e98 <HAL_UARTEx_RxEventCallback+0x218>)
 8002d52:	601a      	str	r2, [r3, #0]
		memcpy(&DRateRoll, &Rx_Data[35], sizeof(float));
 8002d54:	4b48      	ldr	r3, [pc, #288]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d56:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b4f      	ldr	r3, [pc, #316]	@ (8002e9c <HAL_UARTEx_RxEventCallback+0x21c>)
 8002d5e:	601a      	str	r2, [r3, #0]

		memcpy(&PRatePitch, &Rx_Data[39], sizeof(float));
 8002d60:	4b45      	ldr	r3, [pc, #276]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d62:	f8d3 3027 	ldr.w	r3, [r3, #39]	@ 0x27
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea0 <HAL_UARTEx_RxEventCallback+0x220>)
 8002d6a:	601a      	str	r2, [r3, #0]
		memcpy(&IRatePitch, &Rx_Data[43], sizeof(float));
 8002d6c:	4b42      	ldr	r3, [pc, #264]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d6e:	f8d3 302b 	ldr.w	r3, [r3, #43]	@ 0x2b
 8002d72:	461a      	mov	r2, r3
 8002d74:	4b4b      	ldr	r3, [pc, #300]	@ (8002ea4 <HAL_UARTEx_RxEventCallback+0x224>)
 8002d76:	601a      	str	r2, [r3, #0]
		memcpy(&DRatePitch, &Rx_Data[47], sizeof(float));
 8002d78:	4b3f      	ldr	r3, [pc, #252]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d7a:	f8d3 302f 	ldr.w	r3, [r3, #47]	@ 0x2f
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b49      	ldr	r3, [pc, #292]	@ (8002ea8 <HAL_UARTEx_RxEventCallback+0x228>)
 8002d82:	601a      	str	r2, [r3, #0]

		memcpy(&PRateYaw, &Rx_Data[51], sizeof(float));
 8002d84:	4b3c      	ldr	r3, [pc, #240]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d86:	f8d3 3033 	ldr.w	r3, [r3, #51]	@ 0x33
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b47      	ldr	r3, [pc, #284]	@ (8002eac <HAL_UARTEx_RxEventCallback+0x22c>)
 8002d8e:	601a      	str	r2, [r3, #0]
		memcpy(&IRateYaw, &Rx_Data[55], sizeof(float));
 8002d90:	4b39      	ldr	r3, [pc, #228]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d92:	f8d3 3037 	ldr.w	r3, [r3, #55]	@ 0x37
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b45      	ldr	r3, [pc, #276]	@ (8002eb0 <HAL_UARTEx_RxEventCallback+0x230>)
 8002d9a:	601a      	str	r2, [r3, #0]
		memcpy(&DRateYaw, &Rx_Data[59], sizeof(float));
 8002d9c:	4b36      	ldr	r3, [pc, #216]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002d9e:	f8d3 303b 	ldr.w	r3, [r3, #59]	@ 0x3b
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b43      	ldr	r3, [pc, #268]	@ (8002eb4 <HAL_UARTEx_RxEventCallback+0x234>)
 8002da6:	601a      	str	r2, [r3, #0]

		memcpy(&pid_p_gain_altitude, &Rx_Data[63], sizeof(float));
 8002da8:	4b33      	ldr	r3, [pc, #204]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002daa:	f8d3 303f 	ldr.w	r3, [r3, #63]	@ 0x3f
 8002dae:	461a      	mov	r2, r3
 8002db0:	4b41      	ldr	r3, [pc, #260]	@ (8002eb8 <HAL_UARTEx_RxEventCallback+0x238>)
 8002db2:	601a      	str	r2, [r3, #0]
		memcpy(&pid_i_gain_altitude, &Rx_Data[67], sizeof(float));
 8002db4:	4b30      	ldr	r3, [pc, #192]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002db6:	f8d3 3043 	ldr.w	r3, [r3, #67]	@ 0x43
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b3f      	ldr	r3, [pc, #252]	@ (8002ebc <HAL_UARTEx_RxEventCallback+0x23c>)
 8002dbe:	601a      	str	r2, [r3, #0]
		memcpy(&pid_d_gain_altitude, &Rx_Data[71], sizeof(float));
 8002dc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002e78 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002dc2:	f8d3 3047 	ldr.w	r3, [r3, #71]	@ 0x47
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec0 <HAL_UARTEx_RxEventCallback+0x240>)
 8002dca:	601a      	str	r2, [r3, #0]

		Tx_buff[0] = 'B'; Tx_buff[1] = 'E';Tx_buff[38] = '\r'; Tx_buff[39] = '\n';
 8002dcc:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002dce:	2242      	movs	r2, #66	@ 0x42
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	4b28      	ldr	r3, [pc, #160]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002dd4:	2245      	movs	r2, #69	@ 0x45
 8002dd6:	705a      	strb	r2, [r3, #1]
 8002dd8:	4b26      	ldr	r3, [pc, #152]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002dda:	220d      	movs	r2, #13
 8002ddc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8002de0:	4b24      	ldr	r3, [pc, #144]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002de2:	220a      	movs	r2, #10
 8002de4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Tx_buff,40);
 8002de8:	2228      	movs	r2, #40	@ 0x28
 8002dea:	4922      	ldr	r1, [pc, #136]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002dec:	481e      	ldr	r0, [pc, #120]	@ (8002e68 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8002dee:	f005 ff67 	bl	8008cc0 <HAL_UART_Transmit_DMA>
		//memset(Tx_buff, 0, sizeof(Tx_buff));	
	}
	if ((Rx_buff[0] == 0xCC) && (Rx_buff[1] == 0xDD))
 8002df2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2bcc      	cmp	r3, #204	@ 0xcc
 8002df8:	d12f      	bne.n	8002e5a <HAL_UARTEx_RxEventCallback+0x1da>
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002dfc:	785b      	ldrb	r3, [r3, #1]
 8002dfe:	2bdd      	cmp	r3, #221	@ 0xdd
 8002e00:	d12b      	bne.n	8002e5a <HAL_UARTEx_RxEventCallback+0x1da>
	{
		memset(Tx_buff, 0, sizeof(Tx_buff));
 8002e02:	2246      	movs	r2, #70	@ 0x46
 8002e04:	2100      	movs	r1, #0
 8002e06:	481b      	ldr	r0, [pc, #108]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e08:	f007 f94c 	bl	800a0a4 <memset>
		Flag_Plot = Rx_buff[2];
 8002e0c:	4b15      	ldr	r3, [pc, #84]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002e0e:	789a      	ldrb	r2, [r3, #2]
 8002e10:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec4 <HAL_UARTEx_RxEventCallback+0x244>)
 8002e12:	701a      	strb	r2, [r3, #0]
		memset(Rx_buff, 0, sizeof(Rx_buff));		
 8002e14:	224b      	movs	r2, #75	@ 0x4b
 8002e16:	2100      	movs	r1, #0
 8002e18:	4812      	ldr	r0, [pc, #72]	@ (8002e64 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002e1a:	f007 f943 	bl	800a0a4 <memset>
		if (Flag_Plot){ Tx_buff[0] = 'P'; Tx_buff[1] = 'L';} //Start
 8002e1e:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <HAL_UARTEx_RxEventCallback+0x244>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_UARTEx_RxEventCallback+0x1b4>
 8002e26:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e28:	2250      	movs	r2, #80	@ 0x50
 8002e2a:	701a      	strb	r2, [r3, #0]
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e2e:	224c      	movs	r2, #76	@ 0x4c
 8002e30:	705a      	strb	r2, [r3, #1]
 8002e32:	e005      	b.n	8002e40 <HAL_UARTEx_RxEventCallback+0x1c0>
		else{Tx_buff[0] = 'S'; Tx_buff[1] = 'T'; }		     //Stop
 8002e34:	4b0f      	ldr	r3, [pc, #60]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e36:	2253      	movs	r2, #83	@ 0x53
 8002e38:	701a      	strb	r2, [r3, #0]
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e3c:	2254      	movs	r2, #84	@ 0x54
 8002e3e:	705a      	strb	r2, [r3, #1]
		Tx_buff[38] = '\r'; Tx_buff[39] = '\n';
 8002e40:	4b0c      	ldr	r3, [pc, #48]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e42:	220d      	movs	r2, #13
 8002e44:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
 8002e48:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e4a:	220a      	movs	r2, #10
 8002e4c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Tx_buff,40);
 8002e50:	2228      	movs	r2, #40	@ 0x28
 8002e52:	4908      	ldr	r1, [pc, #32]	@ (8002e74 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002e54:	4804      	ldr	r0, [pc, #16]	@ (8002e68 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8002e56:	f005 ff33 	bl	8008cc0 <HAL_UART_Transmit_DMA>
		//memset(Tx_buff, 0, sizeof(Tx_buff));	
	}
	
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000348 	.word	0x20000348
 8002e68:	20000854 	.word	0x20000854
 8002e6c:	200008dc 	.word	0x200008dc
 8002e70:	200003da 	.word	0x200003da
 8002e74:	20000394 	.word	0x20000394
 8002e78:	200002fc 	.word	0x200002fc
 8002e7c:	20000034 	.word	0x20000034
 8002e80:	2000003c 	.word	0x2000003c
 8002e84:	20000044 	.word	0x20000044
 8002e88:	20000038 	.word	0x20000038
 8002e8c:	20000040 	.word	0x20000040
 8002e90:	20000048 	.word	0x20000048
 8002e94:	20000010 	.word	0x20000010
 8002e98:	2000001c 	.word	0x2000001c
 8002e9c:	20000028 	.word	0x20000028
 8002ea0:	20000014 	.word	0x20000014
 8002ea4:	20000020 	.word	0x20000020
 8002ea8:	2000002c 	.word	0x2000002c
 8002eac:	20000018 	.word	0x20000018
 8002eb0:	20000024 	.word	0x20000024
 8002eb4:	20000030 	.word	0x20000030
 8002eb8:	2000004c 	.word	0x2000004c
 8002ebc:	20000050 	.word	0x20000050
 8002ec0:	20000054 	.word	0x20000054
 8002ec4:	200002f8 	.word	0x200002f8

08002ec8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002ec8:	b4f0      	push	{r4, r5, r6, r7}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart2, rx_data, sizeof(rx_data));
	if(rx_data_gps[0] == 0xb5 && rx_data_gps[1] == 0x62)
 8002ed0:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <HAL_UART_RxCpltCallback+0x58>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2bb5      	cmp	r3, #181	@ 0xb5
 8002ed6:	d118      	bne.n	8002f0a <HAL_UART_RxCpltCallback+0x42>
 8002ed8:	4b11      	ldr	r3, [pc, #68]	@ (8002f20 <HAL_UART_RxCpltCallback+0x58>)
 8002eda:	785b      	ldrb	r3, [r3, #1]
 8002edc:	2b62      	cmp	r3, #98	@ 0x62
 8002ede:	d114      	bne.n	8002f0a <HAL_UART_RxCpltCallback+0x42>
	{
		memcpy(m8n_rx_buf, rx_data_gps, sizeof(rx_data_gps));
 8002ee0:	4b10      	ldr	r3, [pc, #64]	@ (8002f24 <HAL_UART_RxCpltCallback+0x5c>)
 8002ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8002f20 <HAL_UART_RxCpltCallback+0x58>)
 8002ee4:	4614      	mov	r4, r2
 8002ee6:	461e      	mov	r6, r3
 8002ee8:	f104 0c20 	add.w	ip, r4, #32
 8002eec:	4635      	mov	r5, r6
 8002eee:	4623      	mov	r3, r4
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	6859      	ldr	r1, [r3, #4]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002efa:	3410      	adds	r4, #16
 8002efc:	3610      	adds	r6, #16
 8002efe:	4564      	cmp	r4, ip
 8002f00:	d1f4      	bne.n	8002eec <HAL_UART_RxCpltCallback+0x24>
 8002f02:	4633      	mov	r3, r6
 8002f04:	4622      	mov	r2, r4
 8002f06:	6810      	ldr	r0, [r2, #0]
 8002f08:	6018      	str	r0, [r3, #0]
     //m8n_rx_cplt_flag = 1;
     //HAL_UART_Transmit_DMA(&huart2, (uint8_t*)rx_data_gps,sizeof(rx_data_gps));
	}
	cnt ++;
 8002f0a:	4b07      	ldr	r3, [pc, #28]	@ (8002f28 <HAL_UART_RxCpltCallback+0x60>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	4a05      	ldr	r2, [pc, #20]	@ (8002f28 <HAL_UART_RxCpltCallback+0x60>)
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bcf0      	pop	{r4, r5, r6, r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20000a5c 	.word	0x20000a5c
 8002f24:	2000045c 	.word	0x2000045c
 8002f28:	20000480 	.word	0x20000480
 8002f2c:	00000000 	.word	0x00000000

08002f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f36:	f002 f839 	bl	8004fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f3a:	f000 fd05 	bl	8003948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f3e:	f001 f82d 	bl	8003f9c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f42:	f000 ffe3 	bl	8003f0c <MX_DMA_Init>
  MX_I2C1_Init();
 8002f46:	f000 fd69 	bl	8003a1c <MX_I2C1_Init>
  MX_TIM1_Init();
 8002f4a:	f000 fe27 	bl	8003b9c <MX_TIM1_Init>
  MX_TIM2_Init();
 8002f4e:	f000 fe75 	bl	8003c3c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002f52:	f000 febf 	bl	8003cd4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002f56:	f000 ff37 	bl	8003dc8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002f5a:	f000 ff83 	bl	8003e64 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002f5e:	f000 fd8b 	bl	8003a78 <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8002f62:	f000 ffa9 	bl	8003eb8 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002f66:	f000 fde3 	bl	8003b30 <MX_SPI3_Init>
  MX_I2C3_Init();
 8002f6a:	f000 fdb3 	bl	8003ad4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  setupSensor();
 8002f6e:	f7fe f8bf 	bl	80010f0 <setupSensor>
  HAL_Delay(10);
 8002f72:	200a      	movs	r0, #10
 8002f74:	f002 f88c 	bl	8005090 <HAL_Delay>
  for(int i = 0;i<100; i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e00e      	b.n	8002f9c <main+0x6c>
  {
	  pid_output_altitude1 = getPressure();
 8002f7e:	f7fe f8f7 	bl	8001170 <getPressure>
 8002f82:	ee07 0a90 	vmov	s15, r0
 8002f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8a:	4b61      	ldr	r3, [pc, #388]	@ (8003110 <main+0x1e0>)
 8002f8c:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(5);
 8002f90:	2005      	movs	r0, #5
 8002f92:	f002 f87d 	bl	8005090 <HAL_Delay>
  for(int i = 0;i<100; i++)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b63      	cmp	r3, #99	@ 0x63
 8002fa0:	dded      	ble.n	8002f7e <main+0x4e>
  }
  actual_pressure = 0;
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003114 <main+0x1e4>)
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
  hmc5883l_init();
 8002faa:	f7ff fab1 	bl	8002510 <hmc5883l_init>
  HAL_TIM_Base_Start_IT(&htim4);
 8002fae:	485a      	ldr	r0, [pc, #360]	@ (8003118 <main+0x1e8>)
 8002fb0:	f004 fe56 	bl	8007c60 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buff, sizeof(Rx_buff));
 8002fb4:	224b      	movs	r2, #75	@ 0x4b
 8002fb6:	4959      	ldr	r1, [pc, #356]	@ (800311c <main+0x1ec>)
 8002fb8:	4859      	ldr	r0, [pc, #356]	@ (8003120 <main+0x1f0>)
 8002fba:	f005 ff2f 	bl	8008e1c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002fbe:	4b59      	ldr	r3, [pc, #356]	@ (8003124 <main+0x1f4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b57      	ldr	r3, [pc, #348]	@ (8003124 <main+0x1f4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 0208 	bic.w	r2, r2, #8
 8002fcc:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8002fce:	4856      	ldr	r0, [pc, #344]	@ (8003128 <main+0x1f8>)
 8002fd0:	f004 fdde 	bl	8007b90 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8002fd4:	4855      	ldr	r0, [pc, #340]	@ (800312c <main+0x1fc>)
 8002fd6:	f004 fddb 	bl	8007b90 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	4854      	ldr	r0, [pc, #336]	@ (8003130 <main+0x200>)
 8002fde:	f004 feff 	bl	8007de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	4852      	ldr	r0, [pc, #328]	@ (8003130 <main+0x200>)
 8002fe6:	f004 fefb 	bl	8007de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002fea:	2108      	movs	r1, #8
 8002fec:	4850      	ldr	r0, [pc, #320]	@ (8003130 <main+0x200>)
 8002fee:	f004 fef7 	bl	8007de0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002ff2:	210c      	movs	r1, #12
 8002ff4:	484e      	ldr	r0, [pc, #312]	@ (8003130 <main+0x200>)
 8002ff6:	f004 fef3 	bl	8007de0 <HAL_TIM_PWM_Start>
  HAL_Delay(20);
 8002ffa:	2014      	movs	r0, #20
 8002ffc:	f002 f848 	bl	8005090 <HAL_Delay>
  MX_I2C1_Init();
 8003000:	f000 fd0c 	bl	8003a1c <MX_I2C1_Init>
  HAL_Delay(20);
 8003004:	2014      	movs	r0, #20
 8003006:	f002 f843 	bl	8005090 <HAL_Delay>
  MPU6050_Init();
 800300a:	f7fe ffff 	bl	800200c <MPU6050_Init>
  HAL_Delay(1000);
 800300e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003012:	f002 f83d 	bl	8005090 <HAL_Delay>
  Calib_Gyro();
 8003016:	f001 f857 	bl	80040c8 <Calib_Gyro>
  HAL_Delay(50);
 800301a:	2032      	movs	r0, #50	@ 0x32
 800301c:	f002 f838 	bl	8005090 <HAL_Delay>
  M8N_Initialization();
 8003020:	f7fe f834 	bl	800108c <M8N_Initialization>
  HAL_Delay(2000);
 8003024:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003028:	f002 f832 	bl	8005090 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart3, rx_data_gps, sizeof(rx_data_gps));
 800302c:	2224      	movs	r2, #36	@ 0x24
 800302e:	4941      	ldr	r1, [pc, #260]	@ (8003134 <main+0x204>)
 8003030:	4841      	ldr	r0, [pc, #260]	@ (8003138 <main+0x208>)
 8003032:	f005 fec3 	bl	8008dbc <HAL_UART_Receive_DMA>
  HAL_Delay(1000);
 8003036:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800303a:	f002 f829 	bl	8005090 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,1000);
 800303e:	4b3c      	ldr	r3, [pc, #240]	@ (8003130 <main+0x200>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003046:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,1000);
 8003048:	4b39      	ldr	r3, [pc, #228]	@ (8003130 <main+0x200>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003050:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,1000);
 8003052:	4b37      	ldr	r3, [pc, #220]	@ (8003130 <main+0x200>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800305a:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,1000);
 800305c:	4b34      	ldr	r3, [pc, #208]	@ (8003130 <main+0x200>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003064:	641a      	str	r2, [r3, #64]	@ 0x40
  ch[0]=1500;      //Roll
 8003066:	4b35      	ldr	r3, [pc, #212]	@ (800313c <main+0x20c>)
 8003068:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800306c:	601a      	str	r2, [r3, #0]
  ch[1]=1500;      //Pitch
 800306e:	4b33      	ldr	r3, [pc, #204]	@ (800313c <main+0x20c>)
 8003070:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003074:	605a      	str	r2, [r3, #4]
  ch[2]=1000;      //Throttle
 8003076:	4b31      	ldr	r3, [pc, #196]	@ (800313c <main+0x20c>)
 8003078:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800307c:	609a      	str	r2, [r3, #8]
  ch[3]=1500;      //Yaw
 800307e:	4b2f      	ldr	r3, [pc, #188]	@ (800313c <main+0x20c>)
 8003080:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003084:	60da      	str	r2, [r3, #12]
  while(Receive_Throttle_Min() == 0);
 8003086:	bf00      	nop
 8003088:	f001 f80c 	bl	80040a4 <Receive_Throttle_Min>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0fa      	beq.n	8003088 <main+0x158>
  HAL_Delay(20);
 8003092:	2014      	movs	r0, #20
 8003094:	f001 fffc 	bl	8005090 <HAL_Delay>
  loop_timer = TIM1->CNT;
 8003098:	4b29      	ldr	r3, [pc, #164]	@ (8003140 <main+0x210>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	461a      	mov	r2, r3
 800309e:	4b29      	ldr	r3, [pc, #164]	@ (8003144 <main+0x214>)
 80030a0:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  check_time1 = TIM1->CNT;
 80030a2:	4b27      	ldr	r3, [pc, #156]	@ (8003140 <main+0x210>)
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ae:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <main+0x218>)
 80030b0:	edc3 7a00 	vstr	s15, [r3]
	  if(MPU6050_Read_Data() != HAL_OK)
 80030b4:	f7ff f830 	bl	8002118 <MPU6050_Read_Data>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <main+0x192>
	  {
	  	Reset_MPU6050();
 80030be:	f001 f87d 	bl	80041bc <Reset_MPU6050>
	  }

	  //Altitude = 44330.0f*(1-powf((pressure/101325.0f),(1.0f/5.257f)));
	  check_time2 = TIM1->CNT;
 80030c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003140 <main+0x210>)
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ce:	4b1f      	ldr	r3, [pc, #124]	@ (800314c <main+0x21c>)
 80030d0:	edc3 7a00 	vstr	s15, [r3]
	  receiver_input_channel_1 = ch[0];
 80030d4:	4b19      	ldr	r3, [pc, #100]	@ (800313c <main+0x20c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003150 <main+0x220>)
 80030da:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_2 = ch[1];
 80030dc:	4b17      	ldr	r3, [pc, #92]	@ (800313c <main+0x20c>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003154 <main+0x224>)
 80030e2:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_3 = ch[2]; // chan ga(Throttle)
 80030e4:	4b15      	ldr	r3, [pc, #84]	@ (800313c <main+0x20c>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003158 <main+0x228>)
 80030ea:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_4 = ch[3];
 80030ec:	4b13      	ldr	r3, [pc, #76]	@ (800313c <main+0x20c>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a1a      	ldr	r2, [pc, #104]	@ (800315c <main+0x22c>)
 80030f2:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_5 = ch[4];
 80030f4:	4b11      	ldr	r3, [pc, #68]	@ (800313c <main+0x20c>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <main+0x230>)
 80030fa:	6013      	str	r3, [r2, #0]

	  if (receiver_input_channel_5 < 1500 )		flight_mode = 1;    // Mode bay binh thuong
 80030fc:	4b18      	ldr	r3, [pc, #96]	@ (8003160 <main+0x230>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f240 52db 	movw	r2, #1499	@ 0x5db
 8003104:	4293      	cmp	r3, r2
 8003106:	dc2f      	bgt.n	8003168 <main+0x238>
 8003108:	4b16      	ldr	r3, [pc, #88]	@ (8003164 <main+0x234>)
 800310a:	2201      	movs	r2, #1
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	e02e      	b.n	800316e <main+0x23e>
 8003110:	2000040c 	.word	0x2000040c
 8003114:	2000010c 	.word	0x2000010c
 8003118:	2000080c 	.word	0x2000080c
 800311c:	20000348 	.word	0x20000348
 8003120:	20000854 	.word	0x20000854
 8003124:	200008dc 	.word	0x200008dc
 8003128:	2000077c 	.word	0x2000077c
 800312c:	20000734 	.word	0x20000734
 8003130:	200007c4 	.word	0x200007c4
 8003134:	20000a5c 	.word	0x20000a5c
 8003138:	20000898 	.word	0x20000898
 800313c:	200003dc 	.word	0x200003dc
 8003140:	40010000 	.word	0x40010000
 8003144:	20000440 	.word	0x20000440
 8003148:	200002ec 	.word	0x200002ec
 800314c:	200002f0 	.word	0x200002f0
 8003150:	20000444 	.word	0x20000444
 8003154:	20000448 	.word	0x20000448
 8003158:	2000044c 	.word	0x2000044c
 800315c:	20000450 	.word	0x20000450
 8003160:	20000454 	.word	0x20000454
 8003164:	20000458 	.word	0x20000458
	  else 		flight_mode = 2;  //Mode altitude hold
 8003168:	4bbf      	ldr	r3, [pc, #764]	@ (8003468 <main+0x538>)
 800316a:	2202      	movs	r2, #2
 800316c:	601a      	str	r2, [r3, #0]
	  pid_output_altitude1 = getPressure();
 800316e:	f7fd ffff 	bl	8001170 <getPressure>
 8003172:	ee07 0a90 	vmov	s15, r0
 8003176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317a:	4bbc      	ldr	r3, [pc, #752]	@ (800346c <main+0x53c>)
 800317c:	edc3 7a00 	vstr	s15, [r3]

	  Gx -= Gyro_X_Calib;
 8003180:	4bbb      	ldr	r3, [pc, #748]	@ (8003470 <main+0x540>)
 8003182:	ed93 7a00 	vldr	s14, [r3]
 8003186:	4bbb      	ldr	r3, [pc, #748]	@ (8003474 <main+0x544>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	4bb6      	ldr	r3, [pc, #728]	@ (8003470 <main+0x540>)
 8003198:	edc3 7a00 	vstr	s15, [r3]
	  Gy -= Gyro_Y_Calib;
 800319c:	4bb6      	ldr	r3, [pc, #728]	@ (8003478 <main+0x548>)
 800319e:	ed93 7a00 	vldr	s14, [r3]
 80031a2:	4bb6      	ldr	r3, [pc, #728]	@ (800347c <main+0x54c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b2:	4bb1      	ldr	r3, [pc, #708]	@ (8003478 <main+0x548>)
 80031b4:	edc3 7a00 	vstr	s15, [r3]
	  Gz -= Gyro_Z_Calib;
 80031b8:	4bb1      	ldr	r3, [pc, #708]	@ (8003480 <main+0x550>)
 80031ba:	ed93 7a00 	vldr	s14, [r3]
 80031be:	4bb1      	ldr	r3, [pc, #708]	@ (8003484 <main+0x554>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ce:	4bac      	ldr	r3, [pc, #688]	@ (8003480 <main+0x550>)
 80031d0:	edc3 7a00 	vstr	s15, [r3]

	  hmc5883l_read();  //read compass
 80031d4:	f7ff fa58 	bl	8002688 <hmc5883l_read>
	  kalman_1d(KalmanAngleRoll, KalmanUncertaintyAngleRoll, Gx, AngleRoll);
 80031d8:	4bab      	ldr	r3, [pc, #684]	@ (8003488 <main+0x558>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	4bab      	ldr	r3, [pc, #684]	@ (800348c <main+0x55c>)
 80031e0:	ed93 7a00 	vldr	s14, [r3]
 80031e4:	4ba2      	ldr	r3, [pc, #648]	@ (8003470 <main+0x540>)
 80031e6:	edd3 6a00 	vldr	s13, [r3]
 80031ea:	4ba9      	ldr	r3, [pc, #676]	@ (8003490 <main+0x560>)
 80031ec:	ed93 6a00 	vldr	s12, [r3]
 80031f0:	eef0 1a46 	vmov.f32	s3, s12
 80031f4:	eeb0 1a66 	vmov.f32	s2, s13
 80031f8:	eef0 0a47 	vmov.f32	s1, s14
 80031fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003200:	f7fe fe2e 	bl	8001e60 <kalman_1d>
      	  KalmanAngleRoll = Kalman1DOutput[0];
 8003204:	4ba3      	ldr	r3, [pc, #652]	@ (8003494 <main+0x564>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a9f      	ldr	r2, [pc, #636]	@ (8003488 <main+0x558>)
 800320a:	6013      	str	r3, [r2, #0]
      	  KalmanUncertaintyAngleRoll = Kalman1DOutput[1];
 800320c:	4ba1      	ldr	r3, [pc, #644]	@ (8003494 <main+0x564>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a9e      	ldr	r2, [pc, #632]	@ (800348c <main+0x55c>)
 8003212:	6013      	str	r3, [r2, #0]

	  kalman_1d(KalmanAnglePitch, KalmanUncertaintyAnglePitch, Gy, AnglePitch);
 8003214:	4ba0      	ldr	r3, [pc, #640]	@ (8003498 <main+0x568>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	4ba0      	ldr	r3, [pc, #640]	@ (800349c <main+0x56c>)
 800321c:	ed93 7a00 	vldr	s14, [r3]
 8003220:	4b95      	ldr	r3, [pc, #596]	@ (8003478 <main+0x548>)
 8003222:	edd3 6a00 	vldr	s13, [r3]
 8003226:	4b9e      	ldr	r3, [pc, #632]	@ (80034a0 <main+0x570>)
 8003228:	ed93 6a00 	vldr	s12, [r3]
 800322c:	eef0 1a46 	vmov.f32	s3, s12
 8003230:	eeb0 1a66 	vmov.f32	s2, s13
 8003234:	eef0 0a47 	vmov.f32	s1, s14
 8003238:	eeb0 0a67 	vmov.f32	s0, s15
 800323c:	f7fe fe10 	bl	8001e60 <kalman_1d>
	  	  KalmanAnglePitch = Kalman1DOutput[0];
 8003240:	4b94      	ldr	r3, [pc, #592]	@ (8003494 <main+0x564>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a94      	ldr	r2, [pc, #592]	@ (8003498 <main+0x568>)
 8003246:	6013      	str	r3, [r2, #0]
	  	  KalmanUncertaintyAnglePitch = Kalman1DOutput[1];
 8003248:	4b92      	ldr	r3, [pc, #584]	@ (8003494 <main+0x564>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a93      	ldr	r2, [pc, #588]	@ (800349c <main+0x56c>)
 800324e:	6013      	str	r3, [r2, #0]

	DesiredAngleRoll = 0.10*(receiver_input_channel_1-1500);  // -50do den 50do
 8003250:	4b94      	ldr	r3, [pc, #592]	@ (80034a4 <main+0x574>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd f907 	bl	800046c <__aeabi_i2d>
 800325e:	a380      	add	r3, pc, #512	@ (adr r3, 8003460 <main+0x530>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fd f96c 	bl	8000540 <__aeabi_dmul>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	f7fd fc3e 	bl	8000af0 <__aeabi_d2f>
 8003274:	4603      	mov	r3, r0
 8003276:	4a8c      	ldr	r2, [pc, #560]	@ (80034a8 <main+0x578>)
 8003278:	6013      	str	r3, [r2, #0]
    DesiredAnglePitch = 0.10*(receiver_input_channel_2-1500); // -50do den 50do
 800327a:	4b8c      	ldr	r3, [pc, #560]	@ (80034ac <main+0x57c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8003282:	4618      	mov	r0, r3
 8003284:	f7fd f8f2 	bl	800046c <__aeabi_i2d>
 8003288:	a375      	add	r3, pc, #468	@ (adr r3, 8003460 <main+0x530>)
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f7fd f957 	bl	8000540 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4610      	mov	r0, r2
 8003298:	4619      	mov	r1, r3
 800329a:	f7fd fc29 	bl	8000af0 <__aeabi_d2f>
 800329e:	4603      	mov	r3, r0
 80032a0:	4a83      	ldr	r2, [pc, #524]	@ (80034b0 <main+0x580>)
 80032a2:	6013      	str	r3, [r2, #0]
    InputThrottle = receiver_input_channel_3 + pid_output_altitude1;
 80032a4:	4b83      	ldr	r3, [pc, #524]	@ (80034b4 <main+0x584>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	ee07 3a90 	vmov	s15, r3
 80032ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032b0:	4b6e      	ldr	r3, [pc, #440]	@ (800346c <main+0x53c>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ba:	4b7f      	ldr	r3, [pc, #508]	@ (80034b8 <main+0x588>)
 80032bc:	edc3 7a00 	vstr	s15, [r3]
    DesiredRateYaw = 0.1*(receiver_input_channel_4-1500);
 80032c0:	4b7e      	ldr	r3, [pc, #504]	@ (80034bc <main+0x58c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f8cf 	bl	800046c <__aeabi_i2d>
 80032ce:	a364      	add	r3, pc, #400	@ (adr r3, 8003460 <main+0x530>)
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f7fd f934 	bl	8000540 <__aeabi_dmul>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fd fc06 	bl	8000af0 <__aeabi_d2f>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a76      	ldr	r2, [pc, #472]	@ (80034c0 <main+0x590>)
 80032e8:	6013      	str	r3, [r2, #0]
	
	ErrorAngleRoll = DesiredAngleRoll - KalmanAngleRoll;
 80032ea:	4b6f      	ldr	r3, [pc, #444]	@ (80034a8 <main+0x578>)
 80032ec:	ed93 7a00 	vldr	s14, [r3]
 80032f0:	4b65      	ldr	r3, [pc, #404]	@ (8003488 <main+0x558>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fa:	4b72      	ldr	r3, [pc, #456]	@ (80034c4 <main+0x594>)
 80032fc:	edc3 7a00 	vstr	s15, [r3]
	ErrorAnglePitch = DesiredAnglePitch - KalmanAnglePitch;
 8003300:	4b6b      	ldr	r3, [pc, #428]	@ (80034b0 <main+0x580>)
 8003302:	ed93 7a00 	vldr	s14, [r3]
 8003306:	4b64      	ldr	r3, [pc, #400]	@ (8003498 <main+0x568>)
 8003308:	edd3 7a00 	vldr	s15, [r3]
 800330c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003310:	4b6d      	ldr	r3, [pc, #436]	@ (80034c8 <main+0x598>)
 8003312:	edc3 7a00 	vstr	s15, [r3]
	
	pid_equation(ErrorAngleRoll,PAngleRoll,IAngleRoll,DAngleRoll,PrevErrorAngleRoll,PrevItermAngleRoll);
 8003316:	4b6b      	ldr	r3, [pc, #428]	@ (80034c4 <main+0x594>)
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	4b6b      	ldr	r3, [pc, #428]	@ (80034cc <main+0x59c>)
 800331e:	ed93 7a00 	vldr	s14, [r3]
 8003322:	4b6b      	ldr	r3, [pc, #428]	@ (80034d0 <main+0x5a0>)
 8003324:	edd3 6a00 	vldr	s13, [r3]
 8003328:	4b6a      	ldr	r3, [pc, #424]	@ (80034d4 <main+0x5a4>)
 800332a:	ed93 6a00 	vldr	s12, [r3]
 800332e:	4b6a      	ldr	r3, [pc, #424]	@ (80034d8 <main+0x5a8>)
 8003330:	edd3 5a00 	vldr	s11, [r3]
 8003334:	4b69      	ldr	r3, [pc, #420]	@ (80034dc <main+0x5ac>)
 8003336:	ed93 5a00 	vldr	s10, [r3]
 800333a:	eef0 2a45 	vmov.f32	s5, s10
 800333e:	eeb0 2a65 	vmov.f32	s4, s11
 8003342:	eef0 1a46 	vmov.f32	s3, s12
 8003346:	eeb0 1a66 	vmov.f32	s2, s13
 800334a:	eef0 0a47 	vmov.f32	s1, s14
 800334e:	eeb0 0a67 	vmov.f32	s0, s15
 8003352:	f7ff fb85 	bl	8002a60 <pid_equation>
	DesiredRateRoll = PIDReturn[0];
 8003356:	4b62      	ldr	r3, [pc, #392]	@ (80034e0 <main+0x5b0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a62      	ldr	r2, [pc, #392]	@ (80034e4 <main+0x5b4>)
 800335c:	6013      	str	r3, [r2, #0]
	PrevErrorAngleRoll = PIDReturn[1];
 800335e:	4b60      	ldr	r3, [pc, #384]	@ (80034e0 <main+0x5b0>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4a5d      	ldr	r2, [pc, #372]	@ (80034d8 <main+0x5a8>)
 8003364:	6013      	str	r3, [r2, #0]
	PrevItermAngleRoll = PIDReturn[2];
 8003366:	4b5e      	ldr	r3, [pc, #376]	@ (80034e0 <main+0x5b0>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	4a5c      	ldr	r2, [pc, #368]	@ (80034dc <main+0x5ac>)
 800336c:	6013      	str	r3, [r2, #0]
	
	pid_equation(ErrorAnglePitch,PAnglePitch,IAnglePitch,DAnglePitch,PrevErrorAnglePitch,PrevItermAnglePitch);
 800336e:	4b56      	ldr	r3, [pc, #344]	@ (80034c8 <main+0x598>)
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	4b5c      	ldr	r3, [pc, #368]	@ (80034e8 <main+0x5b8>)
 8003376:	ed93 7a00 	vldr	s14, [r3]
 800337a:	4b5c      	ldr	r3, [pc, #368]	@ (80034ec <main+0x5bc>)
 800337c:	edd3 6a00 	vldr	s13, [r3]
 8003380:	4b5b      	ldr	r3, [pc, #364]	@ (80034f0 <main+0x5c0>)
 8003382:	ed93 6a00 	vldr	s12, [r3]
 8003386:	4b5b      	ldr	r3, [pc, #364]	@ (80034f4 <main+0x5c4>)
 8003388:	edd3 5a00 	vldr	s11, [r3]
 800338c:	4b5a      	ldr	r3, [pc, #360]	@ (80034f8 <main+0x5c8>)
 800338e:	ed93 5a00 	vldr	s10, [r3]
 8003392:	eef0 2a45 	vmov.f32	s5, s10
 8003396:	eeb0 2a65 	vmov.f32	s4, s11
 800339a:	eef0 1a46 	vmov.f32	s3, s12
 800339e:	eeb0 1a66 	vmov.f32	s2, s13
 80033a2:	eef0 0a47 	vmov.f32	s1, s14
 80033a6:	eeb0 0a67 	vmov.f32	s0, s15
 80033aa:	f7ff fb59 	bl	8002a60 <pid_equation>
	DesiredRatePitch = PIDReturn[0];
 80033ae:	4b4c      	ldr	r3, [pc, #304]	@ (80034e0 <main+0x5b0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a52      	ldr	r2, [pc, #328]	@ (80034fc <main+0x5cc>)
 80033b4:	6013      	str	r3, [r2, #0]
	PrevErrorAnglePitch = PIDReturn[1];
 80033b6:	4b4a      	ldr	r3, [pc, #296]	@ (80034e0 <main+0x5b0>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a4e      	ldr	r2, [pc, #312]	@ (80034f4 <main+0x5c4>)
 80033bc:	6013      	str	r3, [r2, #0]
	PrevItermAnglePitch = PIDReturn[2];
 80033be:	4b48      	ldr	r3, [pc, #288]	@ (80034e0 <main+0x5b0>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4a4d      	ldr	r2, [pc, #308]	@ (80034f8 <main+0x5c8>)
 80033c4:	6013      	str	r3, [r2, #0]
	
	ErrorRateRoll = DesiredRateRoll - Gx;
 80033c6:	4b47      	ldr	r3, [pc, #284]	@ (80034e4 <main+0x5b4>)
 80033c8:	ed93 7a00 	vldr	s14, [r3]
 80033cc:	4b28      	ldr	r3, [pc, #160]	@ (8003470 <main+0x540>)
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003500 <main+0x5d0>)
 80033d8:	edc3 7a00 	vstr	s15, [r3]
	ErrorRatePitch = DesiredRatePitch - Gy;
 80033dc:	4b47      	ldr	r3, [pc, #284]	@ (80034fc <main+0x5cc>)
 80033de:	ed93 7a00 	vldr	s14, [r3]
 80033e2:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <main+0x548>)
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ec:	4b45      	ldr	r3, [pc, #276]	@ (8003504 <main+0x5d4>)
 80033ee:	edc3 7a00 	vstr	s15, [r3]
	ErrorRateYaw = DesiredRateYaw - Gz;
 80033f2:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <main+0x590>)
 80033f4:	ed93 7a00 	vldr	s14, [r3]
 80033f8:	4b21      	ldr	r3, [pc, #132]	@ (8003480 <main+0x550>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003402:	4b41      	ldr	r3, [pc, #260]	@ (8003508 <main+0x5d8>)
 8003404:	edc3 7a00 	vstr	s15, [r3]
	
  pid_equation(ErrorRateRoll, PRateRoll, IRateRoll, DRateRoll, PrevErrorRateRoll, PrevItermRateRoll);
 8003408:	4b3d      	ldr	r3, [pc, #244]	@ (8003500 <main+0x5d0>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	4b3f      	ldr	r3, [pc, #252]	@ (800350c <main+0x5dc>)
 8003410:	ed93 7a00 	vldr	s14, [r3]
 8003414:	4b3e      	ldr	r3, [pc, #248]	@ (8003510 <main+0x5e0>)
 8003416:	edd3 6a00 	vldr	s13, [r3]
 800341a:	4b3e      	ldr	r3, [pc, #248]	@ (8003514 <main+0x5e4>)
 800341c:	ed93 6a00 	vldr	s12, [r3]
 8003420:	4b3d      	ldr	r3, [pc, #244]	@ (8003518 <main+0x5e8>)
 8003422:	edd3 5a00 	vldr	s11, [r3]
 8003426:	4b3d      	ldr	r3, [pc, #244]	@ (800351c <main+0x5ec>)
 8003428:	ed93 5a00 	vldr	s10, [r3]
 800342c:	eef0 2a45 	vmov.f32	s5, s10
 8003430:	eeb0 2a65 	vmov.f32	s4, s11
 8003434:	eef0 1a46 	vmov.f32	s3, s12
 8003438:	eeb0 1a66 	vmov.f32	s2, s13
 800343c:	eef0 0a47 	vmov.f32	s1, s14
 8003440:	eeb0 0a67 	vmov.f32	s0, s15
 8003444:	f7ff fb0c 	bl	8002a60 <pid_equation>
       InputRoll=PIDReturn[0];
 8003448:	4b25      	ldr	r3, [pc, #148]	@ (80034e0 <main+0x5b0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a34      	ldr	r2, [pc, #208]	@ (8003520 <main+0x5f0>)
 800344e:	6013      	str	r3, [r2, #0]
       PrevErrorRateRoll=PIDReturn[1]; 
 8003450:	4b23      	ldr	r3, [pc, #140]	@ (80034e0 <main+0x5b0>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a30      	ldr	r2, [pc, #192]	@ (8003518 <main+0x5e8>)
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	e064      	b.n	8003524 <main+0x5f4>
 800345a:	bf00      	nop
 800345c:	f3af 8000 	nop.w
 8003460:	9999999a 	.word	0x9999999a
 8003464:	3fb99999 	.word	0x3fb99999
 8003468:	20000458 	.word	0x20000458
 800346c:	2000040c 	.word	0x2000040c
 8003470:	20000428 	.word	0x20000428
 8003474:	20000434 	.word	0x20000434
 8003478:	2000042c 	.word	0x2000042c
 800347c:	20000438 	.word	0x20000438
 8003480:	20000430 	.word	0x20000430
 8003484:	2000043c 	.word	0x2000043c
 8003488:	20000484 	.word	0x20000484
 800348c:	20000008 	.word	0x20000008
 8003490:	20000404 	.word	0x20000404
 8003494:	2000048c 	.word	0x2000048c
 8003498:	20000488 	.word	0x20000488
 800349c:	2000000c 	.word	0x2000000c
 80034a0:	20000408 	.word	0x20000408
 80034a4:	20000444 	.word	0x20000444
 80034a8:	200004f0 	.word	0x200004f0
 80034ac:	20000448 	.word	0x20000448
 80034b0:	200004f4 	.word	0x200004f4
 80034b4:	2000044c 	.word	0x2000044c
 80034b8:	200004b0 	.word	0x200004b0
 80034bc:	20000450 	.word	0x20000450
 80034c0:	2000049c 	.word	0x2000049c
 80034c4:	200004f8 	.word	0x200004f8
 80034c8:	200004fc 	.word	0x200004fc
 80034cc:	20000034 	.word	0x20000034
 80034d0:	2000003c 	.word	0x2000003c
 80034d4:	20000044 	.word	0x20000044
 80034d8:	20000500 	.word	0x20000500
 80034dc:	20000508 	.word	0x20000508
 80034e0:	200004d4 	.word	0x200004d4
 80034e4:	20000494 	.word	0x20000494
 80034e8:	20000038 	.word	0x20000038
 80034ec:	20000040 	.word	0x20000040
 80034f0:	20000048 	.word	0x20000048
 80034f4:	20000504 	.word	0x20000504
 80034f8:	2000050c 	.word	0x2000050c
 80034fc:	20000498 	.word	0x20000498
 8003500:	200004a0 	.word	0x200004a0
 8003504:	200004a4 	.word	0x200004a4
 8003508:	200004a8 	.word	0x200004a8
 800350c:	20000010 	.word	0x20000010
 8003510:	2000001c 	.word	0x2000001c
 8003514:	20000028 	.word	0x20000028
 8003518:	200004bc 	.word	0x200004bc
 800351c:	200004c8 	.word	0x200004c8
 8003520:	200004ac 	.word	0x200004ac
       PrevItermRateRoll=PIDReturn[2];
 8003524:	4bbb      	ldr	r3, [pc, #748]	@ (8003814 <main+0x8e4>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4abb      	ldr	r2, [pc, #748]	@ (8003818 <main+0x8e8>)
 800352a:	6013      	str	r3, [r2, #0]
			 
  pid_equation(ErrorRatePitch, PRatePitch,IRatePitch, DRatePitch, PrevErrorRatePitch, PrevItermRatePitch);
 800352c:	4bbb      	ldr	r3, [pc, #748]	@ (800381c <main+0x8ec>)
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	4bbb      	ldr	r3, [pc, #748]	@ (8003820 <main+0x8f0>)
 8003534:	ed93 7a00 	vldr	s14, [r3]
 8003538:	4bba      	ldr	r3, [pc, #744]	@ (8003824 <main+0x8f4>)
 800353a:	edd3 6a00 	vldr	s13, [r3]
 800353e:	4bba      	ldr	r3, [pc, #744]	@ (8003828 <main+0x8f8>)
 8003540:	ed93 6a00 	vldr	s12, [r3]
 8003544:	4bb9      	ldr	r3, [pc, #740]	@ (800382c <main+0x8fc>)
 8003546:	edd3 5a00 	vldr	s11, [r3]
 800354a:	4bb9      	ldr	r3, [pc, #740]	@ (8003830 <main+0x900>)
 800354c:	ed93 5a00 	vldr	s10, [r3]
 8003550:	eef0 2a45 	vmov.f32	s5, s10
 8003554:	eeb0 2a65 	vmov.f32	s4, s11
 8003558:	eef0 1a46 	vmov.f32	s3, s12
 800355c:	eeb0 1a66 	vmov.f32	s2, s13
 8003560:	eef0 0a47 	vmov.f32	s1, s14
 8003564:	eeb0 0a67 	vmov.f32	s0, s15
 8003568:	f7ff fa7a 	bl	8002a60 <pid_equation>
       InputPitch=PIDReturn[0]; 
 800356c:	4ba9      	ldr	r3, [pc, #676]	@ (8003814 <main+0x8e4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4ab0      	ldr	r2, [pc, #704]	@ (8003834 <main+0x904>)
 8003572:	6013      	str	r3, [r2, #0]
       PrevErrorRatePitch=PIDReturn[1]; 
 8003574:	4ba7      	ldr	r3, [pc, #668]	@ (8003814 <main+0x8e4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4aac      	ldr	r2, [pc, #688]	@ (800382c <main+0x8fc>)
 800357a:	6013      	str	r3, [r2, #0]
       PrevItermRatePitch=PIDReturn[2];
 800357c:	4ba5      	ldr	r3, [pc, #660]	@ (8003814 <main+0x8e4>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4aab      	ldr	r2, [pc, #684]	@ (8003830 <main+0x900>)
 8003582:	6013      	str	r3, [r2, #0]
			 
  pid_equation(ErrorRateYaw, PRateYaw,IRateYaw, DRateYaw, PrevErrorRateYaw, PrevItermRateYaw);
 8003584:	4bac      	ldr	r3, [pc, #688]	@ (8003838 <main+0x908>)
 8003586:	edd3 7a00 	vldr	s15, [r3]
 800358a:	4bac      	ldr	r3, [pc, #688]	@ (800383c <main+0x90c>)
 800358c:	ed93 7a00 	vldr	s14, [r3]
 8003590:	4bab      	ldr	r3, [pc, #684]	@ (8003840 <main+0x910>)
 8003592:	edd3 6a00 	vldr	s13, [r3]
 8003596:	4bab      	ldr	r3, [pc, #684]	@ (8003844 <main+0x914>)
 8003598:	ed93 6a00 	vldr	s12, [r3]
 800359c:	4baa      	ldr	r3, [pc, #680]	@ (8003848 <main+0x918>)
 800359e:	edd3 5a00 	vldr	s11, [r3]
 80035a2:	4baa      	ldr	r3, [pc, #680]	@ (800384c <main+0x91c>)
 80035a4:	ed93 5a00 	vldr	s10, [r3]
 80035a8:	eef0 2a45 	vmov.f32	s5, s10
 80035ac:	eeb0 2a65 	vmov.f32	s4, s11
 80035b0:	eef0 1a46 	vmov.f32	s3, s12
 80035b4:	eeb0 1a66 	vmov.f32	s2, s13
 80035b8:	eef0 0a47 	vmov.f32	s1, s14
 80035bc:	eeb0 0a67 	vmov.f32	s0, s15
 80035c0:	f7ff fa4e 	bl	8002a60 <pid_equation>
       InputYaw=PIDReturn[0]; 
 80035c4:	4b93      	ldr	r3, [pc, #588]	@ (8003814 <main+0x8e4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4aa1      	ldr	r2, [pc, #644]	@ (8003850 <main+0x920>)
 80035ca:	6013      	str	r3, [r2, #0]
       PrevErrorRateYaw=PIDReturn[1]; 
 80035cc:	4b91      	ldr	r3, [pc, #580]	@ (8003814 <main+0x8e4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a9d      	ldr	r2, [pc, #628]	@ (8003848 <main+0x918>)
 80035d2:	6013      	str	r3, [r2, #0]
       PrevItermRateYaw=PIDReturn[2];
 80035d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003814 <main+0x8e4>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a9c      	ldr	r2, [pc, #624]	@ (800384c <main+0x91c>)
 80035da:	6013      	str	r3, [r2, #0]

  if (InputThrottle > 1800) InputThrottle = 1800;	
 80035dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003854 <main+0x924>)
 80035de:	edd3 7a00 	vldr	s15, [r3]
 80035e2:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8003858 <main+0x928>
 80035e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ee:	dd02      	ble.n	80035f6 <main+0x6c6>
 80035f0:	4b98      	ldr	r3, [pc, #608]	@ (8003854 <main+0x924>)
 80035f2:	4a9a      	ldr	r2, [pc, #616]	@ (800385c <main+0x92c>)
 80035f4:	601a      	str	r2, [r3, #0]
  MotorInput1= (InputThrottle-InputRoll-InputPitch-InputYaw);
 80035f6:	4b97      	ldr	r3, [pc, #604]	@ (8003854 <main+0x924>)
 80035f8:	ed93 7a00 	vldr	s14, [r3]
 80035fc:	4b98      	ldr	r3, [pc, #608]	@ (8003860 <main+0x930>)
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003606:	4b8b      	ldr	r3, [pc, #556]	@ (8003834 <main+0x904>)
 8003608:	edd3 7a00 	vldr	s15, [r3]
 800360c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003610:	4b8f      	ldr	r3, [pc, #572]	@ (8003850 <main+0x920>)
 8003612:	edd3 7a00 	vldr	s15, [r3]
 8003616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800361a:	4b92      	ldr	r3, [pc, #584]	@ (8003864 <main+0x934>)
 800361c:	edc3 7a00 	vstr	s15, [r3]
  MotorInput2= (InputThrottle-InputRoll+InputPitch+InputYaw);
 8003620:	4b8c      	ldr	r3, [pc, #560]	@ (8003854 <main+0x924>)
 8003622:	ed93 7a00 	vldr	s14, [r3]
 8003626:	4b8e      	ldr	r3, [pc, #568]	@ (8003860 <main+0x930>)
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003630:	4b80      	ldr	r3, [pc, #512]	@ (8003834 <main+0x904>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	ee37 7a27 	vadd.f32	s14, s14, s15
 800363a:	4b85      	ldr	r3, [pc, #532]	@ (8003850 <main+0x920>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003644:	4b88      	ldr	r3, [pc, #544]	@ (8003868 <main+0x938>)
 8003646:	edc3 7a00 	vstr	s15, [r3]
  MotorInput3= (InputThrottle+InputRoll+InputPitch-InputYaw);
 800364a:	4b82      	ldr	r3, [pc, #520]	@ (8003854 <main+0x924>)
 800364c:	ed93 7a00 	vldr	s14, [r3]
 8003650:	4b83      	ldr	r3, [pc, #524]	@ (8003860 <main+0x930>)
 8003652:	edd3 7a00 	vldr	s15, [r3]
 8003656:	ee37 7a27 	vadd.f32	s14, s14, s15
 800365a:	4b76      	ldr	r3, [pc, #472]	@ (8003834 <main+0x904>)
 800365c:	edd3 7a00 	vldr	s15, [r3]
 8003660:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003664:	4b7a      	ldr	r3, [pc, #488]	@ (8003850 <main+0x920>)
 8003666:	edd3 7a00 	vldr	s15, [r3]
 800366a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800366e:	4b7f      	ldr	r3, [pc, #508]	@ (800386c <main+0x93c>)
 8003670:	edc3 7a00 	vstr	s15, [r3]
  MotorInput4= (InputThrottle+InputRoll-InputPitch+InputYaw);
 8003674:	4b77      	ldr	r3, [pc, #476]	@ (8003854 <main+0x924>)
 8003676:	ed93 7a00 	vldr	s14, [r3]
 800367a:	4b79      	ldr	r3, [pc, #484]	@ (8003860 <main+0x930>)
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003684:	4b6b      	ldr	r3, [pc, #428]	@ (8003834 <main+0x904>)
 8003686:	edd3 7a00 	vldr	s15, [r3]
 800368a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800368e:	4b70      	ldr	r3, [pc, #448]	@ (8003850 <main+0x920>)
 8003690:	edd3 7a00 	vldr	s15, [r3]
 8003694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003698:	4b75      	ldr	r3, [pc, #468]	@ (8003870 <main+0x940>)
 800369a:	edc3 7a00 	vstr	s15, [r3]
	
  if (MotorInput1 > 1999)MotorInput1 = 1999;
 800369e:	4b71      	ldr	r3, [pc, #452]	@ (8003864 <main+0x934>)
 80036a0:	edd3 7a00 	vldr	s15, [r3]
 80036a4:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8003874 <main+0x944>
 80036a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b0:	dd02      	ble.n	80036b8 <main+0x788>
 80036b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003864 <main+0x934>)
 80036b4:	4a70      	ldr	r2, [pc, #448]	@ (8003878 <main+0x948>)
 80036b6:	601a      	str	r2, [r3, #0]
  if (MotorInput2 > 1999)MotorInput2 = 1999; 
 80036b8:	4b6b      	ldr	r3, [pc, #428]	@ (8003868 <main+0x938>)
 80036ba:	edd3 7a00 	vldr	s15, [r3]
 80036be:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8003874 <main+0x944>
 80036c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	dd02      	ble.n	80036d2 <main+0x7a2>
 80036cc:	4b66      	ldr	r3, [pc, #408]	@ (8003868 <main+0x938>)
 80036ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003878 <main+0x948>)
 80036d0:	601a      	str	r2, [r3, #0]
  if (MotorInput3 > 1999)MotorInput3 = 1999; 
 80036d2:	4b66      	ldr	r3, [pc, #408]	@ (800386c <main+0x93c>)
 80036d4:	edd3 7a00 	vldr	s15, [r3]
 80036d8:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8003874 <main+0x944>
 80036dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	dd02      	ble.n	80036ec <main+0x7bc>
 80036e6:	4b61      	ldr	r3, [pc, #388]	@ (800386c <main+0x93c>)
 80036e8:	4a63      	ldr	r2, [pc, #396]	@ (8003878 <main+0x948>)
 80036ea:	601a      	str	r2, [r3, #0]
  if (MotorInput4 > 1999)MotorInput4 = 1999;
 80036ec:	4b60      	ldr	r3, [pc, #384]	@ (8003870 <main+0x940>)
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8003874 <main+0x944>
 80036f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fe:	dd02      	ble.n	8003706 <main+0x7d6>
 8003700:	4b5b      	ldr	r3, [pc, #364]	@ (8003870 <main+0x940>)
 8003702:	4a5d      	ldr	r2, [pc, #372]	@ (8003878 <main+0x948>)
 8003704:	601a      	str	r2, [r3, #0]
  
  int ThrottleIdle = 1180;
 8003706:	f240 439c 	movw	r3, #1180	@ 0x49c
 800370a:	60bb      	str	r3, [r7, #8]
  if (MotorInput1 < ThrottleIdle) MotorInput1 = ThrottleIdle;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003716:	4b53      	ldr	r3, [pc, #332]	@ (8003864 <main+0x934>)
 8003718:	edd3 7a00 	vldr	s15, [r3]
 800371c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003724:	dd07      	ble.n	8003736 <main+0x806>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003730:	4b4c      	ldr	r3, [pc, #304]	@ (8003864 <main+0x934>)
 8003732:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput2 < ThrottleIdle) MotorInput2 = ThrottleIdle;
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003740:	4b49      	ldr	r3, [pc, #292]	@ (8003868 <main+0x938>)
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800374a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374e:	dd07      	ble.n	8003760 <main+0x830>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800375a:	4b43      	ldr	r3, [pc, #268]	@ (8003868 <main+0x938>)
 800375c:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput3 < ThrottleIdle) MotorInput3 = ThrottleIdle;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800376a:	4b40      	ldr	r3, [pc, #256]	@ (800386c <main+0x93c>)
 800376c:	edd3 7a00 	vldr	s15, [r3]
 8003770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003778:	dd07      	ble.n	800378a <main+0x85a>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003784:	4b39      	ldr	r3, [pc, #228]	@ (800386c <main+0x93c>)
 8003786:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput4 < ThrottleIdle) MotorInput4 = ThrottleIdle;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	ee07 3a90 	vmov	s15, r3
 8003790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003794:	4b36      	ldr	r3, [pc, #216]	@ (8003870 <main+0x940>)
 8003796:	edd3 7a00 	vldr	s15, [r3]
 800379a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a2:	dd07      	ble.n	80037b4 <main+0x884>
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	ee07 3a90 	vmov	s15, r3
 80037aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037ae:	4b30      	ldr	r3, [pc, #192]	@ (8003870 <main+0x940>)
 80037b0:	edc3 7a00 	vstr	s15, [r3]
  
  int ThrottleCutOff = 1000;
 80037b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80037b8:	607b      	str	r3, [r7, #4]
  if (receiver_input_channel_3 < 1050) 
 80037ba:	4b30      	ldr	r3, [pc, #192]	@ (800387c <main+0x94c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f240 4219 	movw	r2, #1049	@ 0x419
 80037c2:	4293      	cmp	r3, r2
 80037c4:	dc21      	bgt.n	800380a <main+0x8da>
  {  
	MotorInput1=ThrottleCutOff;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037d0:	4b24      	ldr	r3, [pc, #144]	@ (8003864 <main+0x934>)
 80037d2:	edc3 7a00 	vstr	s15, [r3]
    MotorInput2=ThrottleCutOff;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	ee07 3a90 	vmov	s15, r3
 80037dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e0:	4b21      	ldr	r3, [pc, #132]	@ (8003868 <main+0x938>)
 80037e2:	edc3 7a00 	vstr	s15, [r3]
    MotorInput3=ThrottleCutOff; 
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f0:	4b1e      	ldr	r3, [pc, #120]	@ (800386c <main+0x93c>)
 80037f2:	edc3 7a00 	vstr	s15, [r3]
    MotorInput4=ThrottleCutOff;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003800:	4b1b      	ldr	r3, [pc, #108]	@ (8003870 <main+0x940>)
 8003802:	edc3 7a00 	vstr	s15, [r3]
    reset_pid();
 8003806:	f7ff f9e5 	bl	8002bd4 <reset_pid>
  }
	
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,MotorInput1);
 800380a:	4b16      	ldr	r3, [pc, #88]	@ (8003864 <main+0x934>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	e036      	b.n	8003880 <main+0x950>
 8003812:	bf00      	nop
 8003814:	200004d4 	.word	0x200004d4
 8003818:	200004c8 	.word	0x200004c8
 800381c:	200004a4 	.word	0x200004a4
 8003820:	20000014 	.word	0x20000014
 8003824:	20000020 	.word	0x20000020
 8003828:	2000002c 	.word	0x2000002c
 800382c:	200004c0 	.word	0x200004c0
 8003830:	200004cc 	.word	0x200004cc
 8003834:	200004b4 	.word	0x200004b4
 8003838:	200004a8 	.word	0x200004a8
 800383c:	20000018 	.word	0x20000018
 8003840:	20000024 	.word	0x20000024
 8003844:	20000030 	.word	0x20000030
 8003848:	200004c4 	.word	0x200004c4
 800384c:	200004d0 	.word	0x200004d0
 8003850:	200004b8 	.word	0x200004b8
 8003854:	200004b0 	.word	0x200004b0
 8003858:	44e10000 	.word	0x44e10000
 800385c:	44e10000 	.word	0x44e10000
 8003860:	200004ac 	.word	0x200004ac
 8003864:	200004e0 	.word	0x200004e0
 8003868:	200004e4 	.word	0x200004e4
 800386c:	200004e8 	.word	0x200004e8
 8003870:	200004ec 	.word	0x200004ec
 8003874:	44f9e000 	.word	0x44f9e000
 8003878:	44f9e000 	.word	0x44f9e000
 800387c:	2000044c 	.word	0x2000044c
 8003880:	4b27      	ldr	r3, [pc, #156]	@ (8003920 <main+0x9f0>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003888:	ee17 2a90 	vmov	r2, s15
 800388c:	635a      	str	r2, [r3, #52]	@ 0x34
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,MotorInput2);
 800388e:	4b25      	ldr	r3, [pc, #148]	@ (8003924 <main+0x9f4>)
 8003890:	edd3 7a00 	vldr	s15, [r3]
 8003894:	4b22      	ldr	r3, [pc, #136]	@ (8003920 <main+0x9f0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800389c:	ee17 2a90 	vmov	r2, s15
 80038a0:	639a      	str	r2, [r3, #56]	@ 0x38
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,MotorInput3);
 80038a2:	4b21      	ldr	r3, [pc, #132]	@ (8003928 <main+0x9f8>)
 80038a4:	edd3 7a00 	vldr	s15, [r3]
 80038a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003920 <main+0x9f0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038b0:	ee17 2a90 	vmov	r2, s15
 80038b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,MotorInput4);
 80038b6:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <main+0x9fc>)
 80038b8:	edd3 7a00 	vldr	s15, [r3]
 80038bc:	4b18      	ldr	r3, [pc, #96]	@ (8003920 <main+0x9f0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038c4:	ee17 2a90 	vmov	r2, s15
 80038c8:	641a      	str	r2, [r3, #64]	@ 0x40
	
	/*---------------------------------------------------------------------*/
	// chu ky lay mau T = 4ms , f = 250Hz
	// chu ky lay mau T = 20ms, f = 50Hz

	 	while ( abs(__HAL_TIM_GET_COUNTER(&htim1) - loop_timer) < 4000 ) ;
 80038ca:	bf00      	nop
 80038cc:	4b18      	ldr	r3, [pc, #96]	@ (8003930 <main+0xa00>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	4a18      	ldr	r2, [pc, #96]	@ (8003934 <main+0xa04>)
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bfb8      	it	lt
 80038dc:	425b      	neglt	r3, r3
 80038de:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80038e2:	dbf3      	blt.n	80038cc <main+0x99c>
	 		 __HAL_TIM_SET_COUNTER(&htim1,0);
 80038e4:	4b12      	ldr	r3, [pc, #72]	@ (8003930 <main+0xa00>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24
	 		 loop_timer = TIM1->CNT;
 80038ec:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <main+0xa08>)
 80038ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f0:	461a      	mov	r2, r3
 80038f2:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <main+0xa04>)
 80038f4:	601a      	str	r2, [r3, #0]
	 		check_time3 = check_time2 - check_time1;
 80038f6:	4b11      	ldr	r3, [pc, #68]	@ (800393c <main+0xa0c>)
 80038f8:	ed93 7a00 	vldr	s14, [r3]
 80038fc:	4b10      	ldr	r3, [pc, #64]	@ (8003940 <main+0xa10>)
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003906:	4b0f      	ldr	r3, [pc, #60]	@ (8003944 <main+0xa14>)
 8003908:	edc3 7a00 	vstr	s15, [r3]
	 		 check_time1 = 0; check_time2 = 0;
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <main+0xa10>)
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	4b09      	ldr	r3, [pc, #36]	@ (800393c <main+0xa0c>)
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
  {
 800391c:	f7ff bbc1 	b.w	80030a2 <main+0x172>
 8003920:	200007c4 	.word	0x200007c4
 8003924:	200004e4 	.word	0x200004e4
 8003928:	200004e8 	.word	0x200004e8
 800392c:	200004ec 	.word	0x200004ec
 8003930:	20000734 	.word	0x20000734
 8003934:	20000440 	.word	0x20000440
 8003938:	40010000 	.word	0x40010000
 800393c:	200002f0 	.word	0x200002f0
 8003940:	200002ec 	.word	0x200002ec
 8003944:	200002f4 	.word	0x200002f4

08003948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b094      	sub	sp, #80	@ 0x50
 800394c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800394e:	f107 0320 	add.w	r3, r7, #32
 8003952:	2230      	movs	r2, #48	@ 0x30
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f006 fba4 	bl	800a0a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800395c:	f107 030c 	add.w	r3, r7, #12
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	2300      	movs	r3, #0
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	4b28      	ldr	r3, [pc, #160]	@ (8003a14 <SystemClock_Config+0xcc>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003974:	4a27      	ldr	r2, [pc, #156]	@ (8003a14 <SystemClock_Config+0xcc>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800397a:	6413      	str	r3, [r2, #64]	@ 0x40
 800397c:	4b25      	ldr	r3, [pc, #148]	@ (8003a14 <SystemClock_Config+0xcc>)
 800397e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003980:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003988:	2300      	movs	r3, #0
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <SystemClock_Config+0xd0>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a21      	ldr	r2, [pc, #132]	@ (8003a18 <SystemClock_Config+0xd0>)
 8003992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b1f      	ldr	r3, [pc, #124]	@ (8003a18 <SystemClock_Config+0xd0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039a4:	2302      	movs	r3, #2
 80039a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039a8:	2301      	movs	r3, #1
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039ac:	2310      	movs	r3, #16
 80039ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039b0:	2302      	movs	r3, #2
 80039b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039b4:	2300      	movs	r3, #0
 80039b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039b8:	2308      	movs	r3, #8
 80039ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80039bc:	23a8      	movs	r3, #168	@ 0xa8
 80039be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039c0:	2302      	movs	r3, #2
 80039c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80039c4:	2304      	movs	r3, #4
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039c8:	f107 0320 	add.w	r3, r7, #32
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 fbaf 	bl	8007130 <HAL_RCC_OscConfig>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80039d8:	f000 fc02 	bl	80041e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039dc:	230f      	movs	r3, #15
 80039de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039e0:	2302      	movs	r3, #2
 80039e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80039e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80039ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80039ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	2105      	movs	r1, #5
 80039fa:	4618      	mov	r0, r3
 80039fc:	f003 fe10 	bl	8007620 <HAL_RCC_ClockConfig>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a06:	f000 fbeb 	bl	80041e0 <Error_Handler>
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	3750      	adds	r7, #80	@ 0x50
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	40007000 	.word	0x40007000

08003a1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a20:	4b12      	ldr	r3, [pc, #72]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a22:	4a13      	ldr	r2, [pc, #76]	@ (8003a70 <MX_I2C1_Init+0x54>)
 8003a24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003a26:	4b11      	ldr	r3, [pc, #68]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a28:	4a12      	ldr	r2, [pc, #72]	@ (8003a74 <MX_I2C1_Init+0x58>)
 8003a2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003a32:	4b0e      	ldr	r3, [pc, #56]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a40:	4b0a      	ldr	r3, [pc, #40]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003a46:	4b09      	ldr	r3, [pc, #36]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a4c:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a52:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a58:	4804      	ldr	r0, [pc, #16]	@ (8003a6c <MX_I2C1_Init+0x50>)
 8003a5a:	f002 fb79 	bl	8006150 <HAL_I2C_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a64:	f000 fbbc 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a68:	bf00      	nop
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000520 	.word	0x20000520
 8003a70:	40005400 	.word	0x40005400
 8003a74:	00061a80 	.word	0x00061a80

08003a78 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003a7c:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003a7e:	4a13      	ldr	r2, [pc, #76]	@ (8003acc <MX_I2C2_Init+0x54>)
 8003a80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003a82:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003a84:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <MX_I2C2_Init+0x58>)
 8003a86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a88:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003a96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003a9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003aa2:	4b09      	ldr	r3, [pc, #36]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003aa8:	4b07      	ldr	r3, [pc, #28]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003aae:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003ab4:	4804      	ldr	r0, [pc, #16]	@ (8003ac8 <MX_I2C2_Init+0x50>)
 8003ab6:	f002 fb4b 	bl	8006150 <HAL_I2C_Init>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003ac0:	f000 fb8e 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003ac4:	bf00      	nop
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	20000574 	.word	0x20000574
 8003acc:	40005800 	.word	0x40005800
 8003ad0:	00061a80 	.word	0x00061a80

08003ad4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003ad8:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003ada:	4a13      	ldr	r2, [pc, #76]	@ (8003b28 <MX_I2C3_Init+0x54>)
 8003adc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003ade:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003ae0:	4a12      	ldr	r2, [pc, #72]	@ (8003b2c <MX_I2C3_Init+0x58>)
 8003ae2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003aea:	4b0e      	ldr	r3, [pc, #56]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003af0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003af2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003af6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003afe:	4b09      	ldr	r3, [pc, #36]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b04:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b10:	4804      	ldr	r0, [pc, #16]	@ (8003b24 <MX_I2C3_Init+0x50>)
 8003b12:	f002 fb1d 	bl	8006150 <HAL_I2C_Init>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003b1c:	f000 fb60 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b20:	bf00      	nop
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	200005c8 	.word	0x200005c8
 8003b28:	40005c00 	.word	0x40005c00
 8003b2c:	000186a0 	.word	0x000186a0

08003b30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003b34:	4b17      	ldr	r3, [pc, #92]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b36:	4a18      	ldr	r2, [pc, #96]	@ (8003b98 <MX_SPI3_Init+0x68>)
 8003b38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003b3a:	4b16      	ldr	r3, [pc, #88]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003b42:	4b14      	ldr	r3, [pc, #80]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b48:	4b12      	ldr	r3, [pc, #72]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b4e:	4b11      	ldr	r3, [pc, #68]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b54:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b60:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b62:	4b0c      	ldr	r3, [pc, #48]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b68:	4b0a      	ldr	r3, [pc, #40]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b6e:	4b09      	ldr	r3, [pc, #36]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b74:	4b07      	ldr	r3, [pc, #28]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b7c:	220a      	movs	r2, #10
 8003b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003b80:	4804      	ldr	r0, [pc, #16]	@ (8003b94 <MX_SPI3_Init+0x64>)
 8003b82:	f003 ff2d 	bl	80079e0 <HAL_SPI_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003b8c:	f000 fb28 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003b90:	bf00      	nop
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	200006dc 	.word	0x200006dc
 8003b98:	40003c00 	.word	0x40003c00

08003b9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	609a      	str	r2, [r3, #8]
 8003bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bb0:	463b      	mov	r3, r7
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003bba:	4a1f      	ldr	r2, [pc, #124]	@ (8003c38 <MX_TIM1_Init+0x9c>)
 8003bbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003bc0:	22a7      	movs	r2, #167	@ 0xa7
 8003bc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003bca:	4b1a      	ldr	r3, [pc, #104]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bd2:	4b18      	ldr	r3, [pc, #96]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bd8:	4b16      	ldr	r3, [pc, #88]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bde:	4b15      	ldr	r3, [pc, #84]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003be4:	4813      	ldr	r0, [pc, #76]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003be6:	f003 ff84 	bl	8007af2 <HAL_TIM_Base_Init>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003bf0:	f000 faf6 	bl	80041e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003bfa:	f107 0308 	add.w	r3, r7, #8
 8003bfe:	4619      	mov	r1, r3
 8003c00:	480c      	ldr	r0, [pc, #48]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003c02:	f004 fb7f 	bl	8008304 <HAL_TIM_ConfigClockSource>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003c0c:	f000 fae8 	bl	80041e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c10:	2300      	movs	r3, #0
 8003c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c14:	2300      	movs	r3, #0
 8003c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c18:	463b      	mov	r3, r7
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4805      	ldr	r0, [pc, #20]	@ (8003c34 <MX_TIM1_Init+0x98>)
 8003c1e:	f004 ff71 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003c28:	f000 fada 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003c2c:	bf00      	nop
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000734 	.word	0x20000734
 8003c38:	40010000 	.word	0x40010000

08003c3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c42:	f107 0308 	add.w	r3, r7, #8
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c50:	463b      	mov	r3, r7
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c58:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd0 <MX_TIM2_Init+0x94>)
 8003c5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003c60:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd0 <MX_TIM2_Init+0x94>)
 8003c62:	2253      	movs	r2, #83	@ 0x53
 8003c64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c66:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd0 <MX_TIM2_Init+0x94>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 8003c6c:	4b18      	ldr	r3, [pc, #96]	@ (8003cd0 <MX_TIM2_Init+0x94>)
 8003c6e:	f06f 0201 	mvn.w	r2, #1
 8003c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c74:	4b16      	ldr	r3, [pc, #88]	@ (8003cd0 <MX_TIM2_Init+0x94>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c7a:	4b15      	ldr	r3, [pc, #84]	@ (8003cd0 <MX_TIM2_Init+0x94>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c80:	4813      	ldr	r0, [pc, #76]	@ (8003cd0 <MX_TIM2_Init+0x94>)
 8003c82:	f003 ff36 	bl	8007af2 <HAL_TIM_Base_Init>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003c8c:	f000 faa8 	bl	80041e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c96:	f107 0308 	add.w	r3, r7, #8
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	480c      	ldr	r0, [pc, #48]	@ (8003cd0 <MX_TIM2_Init+0x94>)
 8003c9e:	f004 fb31 	bl	8008304 <HAL_TIM_ConfigClockSource>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003ca8:	f000 fa9a 	bl	80041e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cac:	2300      	movs	r3, #0
 8003cae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003cb4:	463b      	mov	r3, r7
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4805      	ldr	r0, [pc, #20]	@ (8003cd0 <MX_TIM2_Init+0x94>)
 8003cba:	f004 ff23 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003cc4:	f000 fa8c 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003cc8:	bf00      	nop
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	2000077c 	.word	0x2000077c

08003cd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	@ 0x28
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cda:	f107 0320 	add.w	r3, r7, #32
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ce4:	1d3b      	adds	r3, r7, #4
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	605a      	str	r2, [r3, #4]
 8003cec:	609a      	str	r2, [r3, #8]
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	611a      	str	r2, [r3, #16]
 8003cf2:	615a      	str	r2, [r3, #20]
 8003cf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cf6:	4b32      	ldr	r3, [pc, #200]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003cf8:	4a32      	ldr	r2, [pc, #200]	@ (8003dc4 <MX_TIM3_Init+0xf0>)
 8003cfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003cfc:	4b30      	ldr	r3, [pc, #192]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003cfe:	2253      	movs	r2, #83	@ 0x53
 8003d00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d02:	4b2f      	ldr	r3, [pc, #188]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003d08:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003d0a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003d0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d10:	4b2b      	ldr	r3, [pc, #172]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d16:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d1c:	4828      	ldr	r0, [pc, #160]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003d1e:	f004 f80f 	bl	8007d40 <HAL_TIM_PWM_Init>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003d28:	f000 fa5a 	bl	80041e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d30:	2300      	movs	r3, #0
 8003d32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d34:	f107 0320 	add.w	r3, r7, #32
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4821      	ldr	r0, [pc, #132]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003d3c:	f004 fee2 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003d46:	f000 fa4b 	bl	80041e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d4a:	2360      	movs	r3, #96	@ 0x60
 8003d4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003d56:	2304      	movs	r3, #4
 8003d58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d5a:	1d3b      	adds	r3, r7, #4
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4817      	ldr	r0, [pc, #92]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003d62:	f004 fa0d 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003d6c:	f000 fa38 	bl	80041e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d70:	1d3b      	adds	r3, r7, #4
 8003d72:	2204      	movs	r2, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4812      	ldr	r0, [pc, #72]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003d78:	f004 fa02 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003d82:	f000 fa2d 	bl	80041e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d86:	1d3b      	adds	r3, r7, #4
 8003d88:	2208      	movs	r2, #8
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	480c      	ldr	r0, [pc, #48]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003d8e:	f004 f9f7 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003d98:	f000 fa22 	bl	80041e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	220c      	movs	r2, #12
 8003da0:	4619      	mov	r1, r3
 8003da2:	4807      	ldr	r0, [pc, #28]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003da4:	f004 f9ec 	bl	8008180 <HAL_TIM_PWM_ConfigChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8003dae:	f000 fa17 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003db2:	4803      	ldr	r0, [pc, #12]	@ (8003dc0 <MX_TIM3_Init+0xec>)
 8003db4:	f000 fc9a 	bl	80046ec <HAL_TIM_MspPostInit>

}
 8003db8:	bf00      	nop
 8003dba:	3728      	adds	r7, #40	@ 0x28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	200007c4 	.word	0x200007c4
 8003dc4:	40000400 	.word	0x40000400

08003dc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dce:	f107 0308 	add.w	r3, r7, #8
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ddc:	463b      	mov	r3, r7
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003de4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <MX_TIM4_Init+0x94>)
 8003de6:	4a1e      	ldr	r2, [pc, #120]	@ (8003e60 <MX_TIM4_Init+0x98>)
 8003de8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8003dea:	4b1c      	ldr	r3, [pc, #112]	@ (8003e5c <MX_TIM4_Init+0x94>)
 8003dec:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003df0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003df2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e5c <MX_TIM4_Init+0x94>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1249;
 8003df8:	4b18      	ldr	r3, [pc, #96]	@ (8003e5c <MX_TIM4_Init+0x94>)
 8003dfa:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8003dfe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e00:	4b16      	ldr	r3, [pc, #88]	@ (8003e5c <MX_TIM4_Init+0x94>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e06:	4b15      	ldr	r3, [pc, #84]	@ (8003e5c <MX_TIM4_Init+0x94>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003e0c:	4813      	ldr	r0, [pc, #76]	@ (8003e5c <MX_TIM4_Init+0x94>)
 8003e0e:	f003 fe70 	bl	8007af2 <HAL_TIM_Base_Init>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003e18:	f000 f9e2 	bl	80041e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003e22:	f107 0308 	add.w	r3, r7, #8
 8003e26:	4619      	mov	r1, r3
 8003e28:	480c      	ldr	r0, [pc, #48]	@ (8003e5c <MX_TIM4_Init+0x94>)
 8003e2a:	f004 fa6b 	bl	8008304 <HAL_TIM_ConfigClockSource>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d001      	beq.n	8003e38 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003e34:	f000 f9d4 	bl	80041e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e40:	463b      	mov	r3, r7
 8003e42:	4619      	mov	r1, r3
 8003e44:	4805      	ldr	r0, [pc, #20]	@ (8003e5c <MX_TIM4_Init+0x94>)
 8003e46:	f004 fe5d 	bl	8008b04 <HAL_TIMEx_MasterConfigSynchronization>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003e50:	f000 f9c6 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e54:	bf00      	nop
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	2000080c 	.word	0x2000080c
 8003e60:	40000800 	.word	0x40000800

08003e64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e68:	4b11      	ldr	r3, [pc, #68]	@ (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e6a:	4a12      	ldr	r2, [pc, #72]	@ (8003eb4 <MX_USART2_UART_Init+0x50>)
 8003e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e6e:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e76:	4b0e      	ldr	r3, [pc, #56]	@ (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e82:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e88:	4b09      	ldr	r3, [pc, #36]	@ (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e8a:	220c      	movs	r2, #12
 8003e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8e:	4b08      	ldr	r3, [pc, #32]	@ (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e94:	4b06      	ldr	r3, [pc, #24]	@ (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e9a:	4805      	ldr	r0, [pc, #20]	@ (8003eb0 <MX_USART2_UART_Init+0x4c>)
 8003e9c:	f004 fec2 	bl	8008c24 <HAL_UART_Init>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ea6:	f000 f99b 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000854 	.word	0x20000854
 8003eb4:	40004400 	.word	0x40004400

08003eb8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ebc:	4b11      	ldr	r3, [pc, #68]	@ (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ebe:	4a12      	ldr	r2, [pc, #72]	@ (8003f08 <MX_USART3_UART_Init+0x50>)
 8003ec0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003ec2:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ec4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003ec8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003eca:	4b0e      	ldr	r3, [pc, #56]	@ (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003edc:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ede:	220c      	movs	r2, #12
 8003ee0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ee2:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ee8:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003eee:	4805      	ldr	r0, [pc, #20]	@ (8003f04 <MX_USART3_UART_Init+0x4c>)
 8003ef0:	f004 fe98 	bl	8008c24 <HAL_UART_Init>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003efa:	f000 f971 	bl	80041e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000898 	.word	0x20000898
 8003f08:	40004800 	.word	0x40004800

08003f0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]
 8003f16:	4b20      	ldr	r3, [pc, #128]	@ (8003f98 <MX_DMA_Init+0x8c>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003f98 <MX_DMA_Init+0x8c>)
 8003f1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f22:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <MX_DMA_Init+0x8c>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	200b      	movs	r0, #11
 8003f34:	f001 f9ab 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003f38:	200b      	movs	r0, #11
 8003f3a:	f001 f9c4 	bl	80052c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003f3e:	2200      	movs	r2, #0
 8003f40:	2100      	movs	r1, #0
 8003f42:	200c      	movs	r0, #12
 8003f44:	f001 f9a3 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003f48:	200c      	movs	r0, #12
 8003f4a:	f001 f9bc 	bl	80052c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2100      	movs	r1, #0
 8003f52:	200e      	movs	r0, #14
 8003f54:	f001 f99b 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003f58:	200e      	movs	r0, #14
 8003f5a:	f001 f9b4 	bl	80052c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2100      	movs	r1, #0
 8003f62:	2010      	movs	r0, #16
 8003f64:	f001 f993 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003f68:	2010      	movs	r0, #16
 8003f6a:	f001 f9ac 	bl	80052c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2100      	movs	r1, #0
 8003f72:	2011      	movs	r0, #17
 8003f74:	f001 f98b 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003f78:	2011      	movs	r0, #17
 8003f7a:	f001 f9a4 	bl	80052c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2100      	movs	r1, #0
 8003f82:	202f      	movs	r0, #47	@ 0x2f
 8003f84:	f001 f983 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003f88:	202f      	movs	r0, #47	@ 0x2f
 8003f8a:	f001 f99c 	bl	80052c6 <HAL_NVIC_EnableIRQ>

}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800

08003f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	@ 0x28
 8003fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	60da      	str	r2, [r3, #12]
 8003fb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	613b      	str	r3, [r7, #16]
 8003fb6:	4b38      	ldr	r3, [pc, #224]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	4a37      	ldr	r2, [pc, #220]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8003fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc2:	4b35      	ldr	r3, [pc, #212]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8003fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	4b31      	ldr	r3, [pc, #196]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	4a30      	ldr	r2, [pc, #192]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fde:	4b2e      	ldr	r3, [pc, #184]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	4b2a      	ldr	r3, [pc, #168]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	4a29      	ldr	r2, [pc, #164]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8003ff4:	f043 0302 	orr.w	r3, r3, #2
 8003ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffa:	4b27      	ldr	r3, [pc, #156]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	60bb      	str	r3, [r7, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	4b23      	ldr	r3, [pc, #140]	@ (8004098 <MX_GPIO_Init+0xfc>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400e:	4a22      	ldr	r2, [pc, #136]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8004010:	f043 0308 	orr.w	r3, r3, #8
 8004014:	6313      	str	r3, [r2, #48]	@ 0x30
 8004016:	4b20      	ldr	r3, [pc, #128]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004022:	2300      	movs	r3, #0
 8004024:	603b      	str	r3, [r7, #0]
 8004026:	4b1c      	ldr	r3, [pc, #112]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402a:	4a1b      	ldr	r2, [pc, #108]	@ (8004098 <MX_GPIO_Init+0xfc>)
 800402c:	f043 0304 	orr.w	r3, r3, #4
 8004030:	6313      	str	r3, [r2, #48]	@ 0x30
 8004032:	4b19      	ldr	r3, [pc, #100]	@ (8004098 <MX_GPIO_Init+0xfc>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	603b      	str	r3, [r7, #0]
 800403c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800403e:	2200      	movs	r2, #0
 8004040:	2103      	movs	r1, #3
 8004042:	4816      	ldr	r0, [pc, #88]	@ (800409c <MX_GPIO_Init+0x100>)
 8004044:	f002 f852 	bl	80060ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004048:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800404c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800404e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004058:	f107 0314 	add.w	r3, r7, #20
 800405c:	4619      	mov	r1, r3
 800405e:	4810      	ldr	r0, [pc, #64]	@ (80040a0 <MX_GPIO_Init+0x104>)
 8004060:	f001 fdac 	bl	8005bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004064:	2303      	movs	r3, #3
 8004066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004068:	2301      	movs	r3, #1
 800406a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004070:	2300      	movs	r3, #0
 8004072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004074:	f107 0314 	add.w	r3, r7, #20
 8004078:	4619      	mov	r1, r3
 800407a:	4808      	ldr	r0, [pc, #32]	@ (800409c <MX_GPIO_Init+0x100>)
 800407c:	f001 fd9e 	bl	8005bbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004080:	2200      	movs	r2, #0
 8004082:	2100      	movs	r1, #0
 8004084:	2028      	movs	r0, #40	@ 0x28
 8004086:	f001 f902 	bl	800528e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800408a:	2028      	movs	r0, #40	@ 0x28
 800408c:	f001 f91b 	bl	80052c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004090:	bf00      	nop
 8004092:	3728      	adds	r7, #40	@ 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40023800 	.word	0x40023800
 800409c:	40020c00 	.word	0x40020c00
 80040a0:	40020400 	.word	0x40020400

080040a4 <Receive_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Receive_Throttle_Min(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
	if(ch[2]<1020) return 1;
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <Receive_Throttle_Min+0x20>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f5b3 7f7f 	cmp.w	r3, #1020	@ 0x3fc
 80040b0:	da01      	bge.n	80040b6 <Receive_Throttle_Min+0x12>
 80040b2:	2301      	movs	r3, #1
 80040b4:	e000      	b.n	80040b8 <Receive_Throttle_Min+0x14>
	else return 0;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	200003dc 	.word	0x200003dc

080040c8 <Calib_Gyro>:

void Calib_Gyro(void){
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
	for( int i = 0; i < 2000; i++){
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	e03f      	b.n	8004154 <Calib_Gyro+0x8c>
		if(MPU6050_Read_Data() != HAL_OK)
 80040d4:	f7fe f820 	bl	8002118 <MPU6050_Read_Data>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <Calib_Gyro+0x1a>
		{
			Reset_MPU6050();
 80040de:	f000 f86d 	bl	80041bc <Reset_MPU6050>
		}
		Gyro_X_Calib += Gx;
 80040e2:	4b2f      	ldr	r3, [pc, #188]	@ (80041a0 <Calib_Gyro+0xd8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ee:	4b2d      	ldr	r3, [pc, #180]	@ (80041a4 <Calib_Gyro+0xdc>)
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040fc:	ee17 2a90 	vmov	r2, s15
 8004100:	4b27      	ldr	r3, [pc, #156]	@ (80041a0 <Calib_Gyro+0xd8>)
 8004102:	601a      	str	r2, [r3, #0]
		Gyro_Y_Calib += Gy;
 8004104:	4b28      	ldr	r3, [pc, #160]	@ (80041a8 <Calib_Gyro+0xe0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004110:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <Calib_Gyro+0xe4>)
 8004112:	edd3 7a00 	vldr	s15, [r3]
 8004116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800411e:	ee17 2a90 	vmov	r2, s15
 8004122:	4b21      	ldr	r3, [pc, #132]	@ (80041a8 <Calib_Gyro+0xe0>)
 8004124:	601a      	str	r2, [r3, #0]
		Gyro_Z_Calib += Gz;
 8004126:	4b22      	ldr	r3, [pc, #136]	@ (80041b0 <Calib_Gyro+0xe8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004132:	4b20      	ldr	r3, [pc, #128]	@ (80041b4 <Calib_Gyro+0xec>)
 8004134:	edd3 7a00 	vldr	s15, [r3]
 8004138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800413c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004140:	ee17 2a90 	vmov	r2, s15
 8004144:	4b1a      	ldr	r3, [pc, #104]	@ (80041b0 <Calib_Gyro+0xe8>)
 8004146:	601a      	str	r2, [r3, #0]
		HAL_Delay(6);
 8004148:	2006      	movs	r0, #6
 800414a:	f000 ffa1 	bl	8005090 <HAL_Delay>
	for( int i = 0; i < 2000; i++){
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3301      	adds	r3, #1
 8004152:	607b      	str	r3, [r7, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800415a:	dbbb      	blt.n	80040d4 <Calib_Gyro+0xc>
	}
	Gyro_X_Calib /= 2000;
 800415c:	4b10      	ldr	r3, [pc, #64]	@ (80041a0 <Calib_Gyro+0xd8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a15      	ldr	r2, [pc, #84]	@ (80041b8 <Calib_Gyro+0xf0>)
 8004162:	fb82 1203 	smull	r1, r2, r2, r3
 8004166:	11d2      	asrs	r2, r2, #7
 8004168:	17db      	asrs	r3, r3, #31
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	4a0c      	ldr	r2, [pc, #48]	@ (80041a0 <Calib_Gyro+0xd8>)
 800416e:	6013      	str	r3, [r2, #0]
	Gyro_Y_Calib /= 2000;
 8004170:	4b0d      	ldr	r3, [pc, #52]	@ (80041a8 <Calib_Gyro+0xe0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a10      	ldr	r2, [pc, #64]	@ (80041b8 <Calib_Gyro+0xf0>)
 8004176:	fb82 1203 	smull	r1, r2, r2, r3
 800417a:	11d2      	asrs	r2, r2, #7
 800417c:	17db      	asrs	r3, r3, #31
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	4a09      	ldr	r2, [pc, #36]	@ (80041a8 <Calib_Gyro+0xe0>)
 8004182:	6013      	str	r3, [r2, #0]
	Gyro_Z_Calib /= 2000;
 8004184:	4b0a      	ldr	r3, [pc, #40]	@ (80041b0 <Calib_Gyro+0xe8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a0b      	ldr	r2, [pc, #44]	@ (80041b8 <Calib_Gyro+0xf0>)
 800418a:	fb82 1203 	smull	r1, r2, r2, r3
 800418e:	11d2      	asrs	r2, r2, #7
 8004190:	17db      	asrs	r3, r3, #31
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	4a06      	ldr	r2, [pc, #24]	@ (80041b0 <Calib_Gyro+0xe8>)
 8004196:	6013      	str	r3, [r2, #0]
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000434 	.word	0x20000434
 80041a4:	20000428 	.word	0x20000428
 80041a8:	20000438 	.word	0x20000438
 80041ac:	2000042c 	.word	0x2000042c
 80041b0:	2000043c 	.word	0x2000043c
 80041b4:	20000430 	.word	0x20000430
 80041b8:	10624dd3 	.word	0x10624dd3

080041bc <Reset_MPU6050>:

void Reset_MPU6050(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 80041c0:	4806      	ldr	r0, [pc, #24]	@ (80041dc <Reset_MPU6050+0x20>)
 80041c2:	f002 f909 	bl	80063d8 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 80041c6:	4805      	ldr	r0, [pc, #20]	@ (80041dc <Reset_MPU6050+0x20>)
 80041c8:	f001 ffc2 	bl	8006150 <HAL_I2C_Init>
	MX_I2C1_Init();
 80041cc:	f7ff fc26 	bl	8003a1c <MX_I2C1_Init>
	MPU6050_Init();
 80041d0:	f7fd ff1c 	bl	800200c <MPU6050_Init>
	MPU6050_Read_Data();
 80041d4:	f7fd ffa0 	bl	8002118 <MPU6050_Read_Data>
}
 80041d8:	bf00      	nop
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000520 	.word	0x20000520

080041e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80041e4:	b672      	cpsid	i
}
 80041e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <Error_Handler+0x8>

080041ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <HAL_MspInit+0x4c>)
 80041f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fa:	4a0f      	ldr	r2, [pc, #60]	@ (8004238 <HAL_MspInit+0x4c>)
 80041fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004200:	6453      	str	r3, [r2, #68]	@ 0x44
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <HAL_MspInit+0x4c>)
 8004204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800420a:	607b      	str	r3, [r7, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	2300      	movs	r3, #0
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <HAL_MspInit+0x4c>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004216:	4a08      	ldr	r2, [pc, #32]	@ (8004238 <HAL_MspInit+0x4c>)
 8004218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800421c:	6413      	str	r3, [r2, #64]	@ 0x40
 800421e:	4b06      	ldr	r3, [pc, #24]	@ (8004238 <HAL_MspInit+0x4c>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004226:	603b      	str	r3, [r7, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800

0800423c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08e      	sub	sp, #56	@ 0x38
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004244:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a8b      	ldr	r2, [pc, #556]	@ (8004488 <HAL_I2C_MspInit+0x24c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	f040 808b 	bne.w	8004376 <HAL_I2C_MspInit+0x13a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004260:	2300      	movs	r3, #0
 8004262:	623b      	str	r3, [r7, #32]
 8004264:	4b89      	ldr	r3, [pc, #548]	@ (800448c <HAL_I2C_MspInit+0x250>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004268:	4a88      	ldr	r2, [pc, #544]	@ (800448c <HAL_I2C_MspInit+0x250>)
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004270:	4b86      	ldr	r3, [pc, #536]	@ (800448c <HAL_I2C_MspInit+0x250>)
 8004272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	623b      	str	r3, [r7, #32]
 800427a:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800427c:	23c0      	movs	r3, #192	@ 0xc0
 800427e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004280:	2312      	movs	r3, #18
 8004282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004284:	2301      	movs	r3, #1
 8004286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004288:	2303      	movs	r3, #3
 800428a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800428c:	2304      	movs	r3, #4
 800428e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004294:	4619      	mov	r1, r3
 8004296:	487e      	ldr	r0, [pc, #504]	@ (8004490 <HAL_I2C_MspInit+0x254>)
 8004298:	f001 fc90 	bl	8005bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800429c:	2300      	movs	r3, #0
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	4b7a      	ldr	r3, [pc, #488]	@ (800448c <HAL_I2C_MspInit+0x250>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	4a79      	ldr	r2, [pc, #484]	@ (800448c <HAL_I2C_MspInit+0x250>)
 80042a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ac:	4b77      	ldr	r3, [pc, #476]	@ (800448c <HAL_I2C_MspInit+0x250>)
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80042b8:	4b76      	ldr	r3, [pc, #472]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042ba:	4a77      	ldr	r2, [pc, #476]	@ (8004498 <HAL_I2C_MspInit+0x25c>)
 80042bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80042be:	4b75      	ldr	r3, [pc, #468]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042c4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042c6:	4b73      	ldr	r3, [pc, #460]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042cc:	4b71      	ldr	r3, [pc, #452]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80042d2:	4b70      	ldr	r3, [pc, #448]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80042d8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042da:	4b6e      	ldr	r3, [pc, #440]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042dc:	2200      	movs	r2, #0
 80042de:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042e2:	2200      	movs	r2, #0
 80042e4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80042e6:	4b6b      	ldr	r3, [pc, #428]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80042ec:	4b69      	ldr	r3, [pc, #420]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80042f2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042f4:	4b67      	ldr	r3, [pc, #412]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80042fa:	4866      	ldr	r0, [pc, #408]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 80042fc:	f000 fffe 	bl	80052fc <HAL_DMA_Init>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8004306:	f7ff ff6b 	bl	80041e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a61      	ldr	r2, [pc, #388]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004310:	4a60      	ldr	r2, [pc, #384]	@ (8004494 <HAL_I2C_MspInit+0x258>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8004316:	4b61      	ldr	r3, [pc, #388]	@ (800449c <HAL_I2C_MspInit+0x260>)
 8004318:	4a61      	ldr	r2, [pc, #388]	@ (80044a0 <HAL_I2C_MspInit+0x264>)
 800431a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800431c:	4b5f      	ldr	r3, [pc, #380]	@ (800449c <HAL_I2C_MspInit+0x260>)
 800431e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004322:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004324:	4b5d      	ldr	r3, [pc, #372]	@ (800449c <HAL_I2C_MspInit+0x260>)
 8004326:	2240      	movs	r2, #64	@ 0x40
 8004328:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800432a:	4b5c      	ldr	r3, [pc, #368]	@ (800449c <HAL_I2C_MspInit+0x260>)
 800432c:	2200      	movs	r2, #0
 800432e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004330:	4b5a      	ldr	r3, [pc, #360]	@ (800449c <HAL_I2C_MspInit+0x260>)
 8004332:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004336:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004338:	4b58      	ldr	r3, [pc, #352]	@ (800449c <HAL_I2C_MspInit+0x260>)
 800433a:	2200      	movs	r2, #0
 800433c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800433e:	4b57      	ldr	r3, [pc, #348]	@ (800449c <HAL_I2C_MspInit+0x260>)
 8004340:	2200      	movs	r2, #0
 8004342:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004344:	4b55      	ldr	r3, [pc, #340]	@ (800449c <HAL_I2C_MspInit+0x260>)
 8004346:	2200      	movs	r2, #0
 8004348:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800434a:	4b54      	ldr	r3, [pc, #336]	@ (800449c <HAL_I2C_MspInit+0x260>)
 800434c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004350:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004352:	4b52      	ldr	r3, [pc, #328]	@ (800449c <HAL_I2C_MspInit+0x260>)
 8004354:	2200      	movs	r2, #0
 8004356:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004358:	4850      	ldr	r0, [pc, #320]	@ (800449c <HAL_I2C_MspInit+0x260>)
 800435a:	f000 ffcf 	bl	80052fc <HAL_DMA_Init>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8004364:	f7ff ff3c 	bl	80041e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a4c      	ldr	r2, [pc, #304]	@ (800449c <HAL_I2C_MspInit+0x260>)
 800436c:	635a      	str	r2, [r3, #52]	@ 0x34
 800436e:	4a4b      	ldr	r2, [pc, #300]	@ (800449c <HAL_I2C_MspInit+0x260>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004374:	e083      	b.n	800447e <HAL_I2C_MspInit+0x242>
  else if(hi2c->Instance==I2C2)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a4a      	ldr	r2, [pc, #296]	@ (80044a4 <HAL_I2C_MspInit+0x268>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d12d      	bne.n	80043dc <HAL_I2C_MspInit+0x1a0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	4b41      	ldr	r3, [pc, #260]	@ (800448c <HAL_I2C_MspInit+0x250>)
 8004386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004388:	4a40      	ldr	r2, [pc, #256]	@ (800448c <HAL_I2C_MspInit+0x250>)
 800438a:	f043 0302 	orr.w	r3, r3, #2
 800438e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004390:	4b3e      	ldr	r3, [pc, #248]	@ (800448c <HAL_I2C_MspInit+0x250>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800439c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043a2:	2312      	movs	r3, #18
 80043a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043a6:	2301      	movs	r3, #1
 80043a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043aa:	2303      	movs	r3, #3
 80043ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80043ae:	2304      	movs	r3, #4
 80043b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043b6:	4619      	mov	r1, r3
 80043b8:	4835      	ldr	r0, [pc, #212]	@ (8004490 <HAL_I2C_MspInit+0x254>)
 80043ba:	f001 fbff 	bl	8005bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	617b      	str	r3, [r7, #20]
 80043c2:	4b32      	ldr	r3, [pc, #200]	@ (800448c <HAL_I2C_MspInit+0x250>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	4a31      	ldr	r2, [pc, #196]	@ (800448c <HAL_I2C_MspInit+0x250>)
 80043c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80043ce:	4b2f      	ldr	r3, [pc, #188]	@ (800448c <HAL_I2C_MspInit+0x250>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	697b      	ldr	r3, [r7, #20]
}
 80043da:	e050      	b.n	800447e <HAL_I2C_MspInit+0x242>
  else if(hi2c->Instance==I2C3)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a31      	ldr	r2, [pc, #196]	@ (80044a8 <HAL_I2C_MspInit+0x26c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d14b      	bne.n	800447e <HAL_I2C_MspInit+0x242>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	4b28      	ldr	r3, [pc, #160]	@ (800448c <HAL_I2C_MspInit+0x250>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	4a27      	ldr	r2, [pc, #156]	@ (800448c <HAL_I2C_MspInit+0x250>)
 80043f0:	f043 0304 	orr.w	r3, r3, #4
 80043f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f6:	4b25      	ldr	r3, [pc, #148]	@ (800448c <HAL_I2C_MspInit+0x250>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	613b      	str	r3, [r7, #16]
 8004400:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	4b21      	ldr	r3, [pc, #132]	@ (800448c <HAL_I2C_MspInit+0x250>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	4a20      	ldr	r2, [pc, #128]	@ (800448c <HAL_I2C_MspInit+0x250>)
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	6313      	str	r3, [r2, #48]	@ 0x30
 8004412:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <HAL_I2C_MspInit+0x250>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800441e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004424:	2312      	movs	r3, #18
 8004426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004428:	2301      	movs	r3, #1
 800442a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800442c:	2303      	movs	r3, #3
 800442e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004430:	2304      	movs	r3, #4
 8004432:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004438:	4619      	mov	r1, r3
 800443a:	481c      	ldr	r0, [pc, #112]	@ (80044ac <HAL_I2C_MspInit+0x270>)
 800443c:	f001 fbbe 	bl	8005bbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004444:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004446:	2312      	movs	r3, #18
 8004448:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800444a:	2301      	movs	r3, #1
 800444c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800444e:	2303      	movs	r3, #3
 8004450:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004452:	2304      	movs	r3, #4
 8004454:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004456:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800445a:	4619      	mov	r1, r3
 800445c:	4814      	ldr	r0, [pc, #80]	@ (80044b0 <HAL_I2C_MspInit+0x274>)
 800445e:	f001 fbad 	bl	8005bbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b09      	ldr	r3, [pc, #36]	@ (800448c <HAL_I2C_MspInit+0x250>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	4a08      	ldr	r2, [pc, #32]	@ (800448c <HAL_I2C_MspInit+0x250>)
 800446c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004470:	6413      	str	r3, [r2, #64]	@ 0x40
 8004472:	4b06      	ldr	r3, [pc, #24]	@ (800448c <HAL_I2C_MspInit+0x250>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004476:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
}
 800447e:	bf00      	nop
 8004480:	3738      	adds	r7, #56	@ 0x38
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	40005400 	.word	0x40005400
 800448c:	40023800 	.word	0x40023800
 8004490:	40020400 	.word	0x40020400
 8004494:	2000061c 	.word	0x2000061c
 8004498:	40026010 	.word	0x40026010
 800449c:	2000067c 	.word	0x2000067c
 80044a0:	400260b8 	.word	0x400260b8
 80044a4:	40005800 	.word	0x40005800
 80044a8:	40005c00 	.word	0x40005c00
 80044ac:	40020800 	.word	0x40020800
 80044b0:	40020000 	.word	0x40020000

080044b4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a25      	ldr	r2, [pc, #148]	@ (8004558 <HAL_I2C_MspDeInit+0xa4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d118      	bne.n	80044f8 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80044c6:	4b25      	ldr	r3, [pc, #148]	@ (800455c <HAL_I2C_MspDeInit+0xa8>)
 80044c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ca:	4a24      	ldr	r2, [pc, #144]	@ (800455c <HAL_I2C_MspDeInit+0xa8>)
 80044cc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044d0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80044d2:	2140      	movs	r1, #64	@ 0x40
 80044d4:	4822      	ldr	r0, [pc, #136]	@ (8004560 <HAL_I2C_MspDeInit+0xac>)
 80044d6:	f001 fd0d 	bl	8005ef4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80044da:	2180      	movs	r1, #128	@ 0x80
 80044dc:	4820      	ldr	r0, [pc, #128]	@ (8004560 <HAL_I2C_MspDeInit+0xac>)
 80044de:	f001 fd09 	bl	8005ef4 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 ffb6 	bl	8005458 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 ffb1 	bl	8005458 <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80044f6:	e02a      	b.n	800454e <HAL_I2C_MspDeInit+0x9a>
  else if(hi2c->Instance==I2C2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a19      	ldr	r2, [pc, #100]	@ (8004564 <HAL_I2C_MspDeInit+0xb0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d110      	bne.n	8004524 <HAL_I2C_MspDeInit+0x70>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8004502:	4b16      	ldr	r3, [pc, #88]	@ (800455c <HAL_I2C_MspDeInit+0xa8>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	4a15      	ldr	r2, [pc, #84]	@ (800455c <HAL_I2C_MspDeInit+0xa8>)
 8004508:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800450c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800450e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004512:	4813      	ldr	r0, [pc, #76]	@ (8004560 <HAL_I2C_MspDeInit+0xac>)
 8004514:	f001 fcee 	bl	8005ef4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8004518:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800451c:	4810      	ldr	r0, [pc, #64]	@ (8004560 <HAL_I2C_MspDeInit+0xac>)
 800451e:	f001 fce9 	bl	8005ef4 <HAL_GPIO_DeInit>
}
 8004522:	e014      	b.n	800454e <HAL_I2C_MspDeInit+0x9a>
  else if(hi2c->Instance==I2C3)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0f      	ldr	r2, [pc, #60]	@ (8004568 <HAL_I2C_MspDeInit+0xb4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10f      	bne.n	800454e <HAL_I2C_MspDeInit+0x9a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800452e:	4b0b      	ldr	r3, [pc, #44]	@ (800455c <HAL_I2C_MspDeInit+0xa8>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <HAL_I2C_MspDeInit+0xa8>)
 8004534:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004538:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800453a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800453e:	480b      	ldr	r0, [pc, #44]	@ (800456c <HAL_I2C_MspDeInit+0xb8>)
 8004540:	f001 fcd8 	bl	8005ef4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8004544:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004548:	4809      	ldr	r0, [pc, #36]	@ (8004570 <HAL_I2C_MspDeInit+0xbc>)
 800454a:	f001 fcd3 	bl	8005ef4 <HAL_GPIO_DeInit>
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40005400 	.word	0x40005400
 800455c:	40023800 	.word	0x40023800
 8004560:	40020400 	.word	0x40020400
 8004564:	40005800 	.word	0x40005800
 8004568:	40005c00 	.word	0x40005c00
 800456c:	40020800 	.word	0x40020800
 8004570:	40020000 	.word	0x40020000

08004574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	@ 0x28
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457c:	f107 0314 	add.w	r3, r7, #20
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	605a      	str	r2, [r3, #4]
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	60da      	str	r2, [r3, #12]
 800458a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a19      	ldr	r2, [pc, #100]	@ (80045f8 <HAL_SPI_MspInit+0x84>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d12c      	bne.n	80045f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	4b18      	ldr	r3, [pc, #96]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a6:	4b15      	ldr	r3, [pc, #84]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ba:	4a10      	ldr	r2, [pc, #64]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045bc:	f043 0304 	orr.w	r3, r3, #4
 80045c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045c2:	4b0e      	ldr	r3, [pc, #56]	@ (80045fc <HAL_SPI_MspInit+0x88>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80045ce:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80045d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d4:	2302      	movs	r3, #2
 80045d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045dc:	2303      	movs	r3, #3
 80045de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80045e0:	2306      	movs	r3, #6
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045e4:	f107 0314 	add.w	r3, r7, #20
 80045e8:	4619      	mov	r1, r3
 80045ea:	4805      	ldr	r0, [pc, #20]	@ (8004600 <HAL_SPI_MspInit+0x8c>)
 80045ec:	f001 fae6 	bl	8005bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80045f0:	bf00      	nop
 80045f2:	3728      	adds	r7, #40	@ 0x28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40003c00 	.word	0x40003c00
 80045fc:	40023800 	.word	0x40023800
 8004600:	40020800 	.word	0x40020800

08004604 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a22      	ldr	r2, [pc, #136]	@ (800469c <HAL_TIM_Base_MspInit+0x98>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d10e      	bne.n	8004634 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	4b21      	ldr	r3, [pc, #132]	@ (80046a0 <HAL_TIM_Base_MspInit+0x9c>)
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	4a20      	ldr	r2, [pc, #128]	@ (80046a0 <HAL_TIM_Base_MspInit+0x9c>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6453      	str	r3, [r2, #68]	@ 0x44
 8004626:	4b1e      	ldr	r3, [pc, #120]	@ (80046a0 <HAL_TIM_Base_MspInit+0x9c>)
 8004628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004632:	e02e      	b.n	8004692 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800463c:	d10e      	bne.n	800465c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	4b17      	ldr	r3, [pc, #92]	@ (80046a0 <HAL_TIM_Base_MspInit+0x9c>)
 8004644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004646:	4a16      	ldr	r2, [pc, #88]	@ (80046a0 <HAL_TIM_Base_MspInit+0x9c>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6413      	str	r3, [r2, #64]	@ 0x40
 800464e:	4b14      	ldr	r3, [pc, #80]	@ (80046a0 <HAL_TIM_Base_MspInit+0x9c>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	693b      	ldr	r3, [r7, #16]
}
 800465a:	e01a      	b.n	8004692 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a10      	ldr	r2, [pc, #64]	@ (80046a4 <HAL_TIM_Base_MspInit+0xa0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d115      	bne.n	8004692 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <HAL_TIM_Base_MspInit+0x9c>)
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	4a0c      	ldr	r2, [pc, #48]	@ (80046a0 <HAL_TIM_Base_MspInit+0x9c>)
 8004670:	f043 0304 	orr.w	r3, r3, #4
 8004674:	6413      	str	r3, [r2, #64]	@ 0x40
 8004676:	4b0a      	ldr	r3, [pc, #40]	@ (80046a0 <HAL_TIM_Base_MspInit+0x9c>)
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004682:	2200      	movs	r2, #0
 8004684:	2100      	movs	r1, #0
 8004686:	201e      	movs	r0, #30
 8004688:	f000 fe01 	bl	800528e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800468c:	201e      	movs	r0, #30
 800468e:	f000 fe1a 	bl	80052c6 <HAL_NVIC_EnableIRQ>
}
 8004692:	bf00      	nop
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	40010000 	.word	0x40010000
 80046a0:	40023800 	.word	0x40023800
 80046a4:	40000800 	.word	0x40000800

080046a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0b      	ldr	r2, [pc, #44]	@ (80046e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d10d      	bne.n	80046d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b0a      	ldr	r3, [pc, #40]	@ (80046e8 <HAL_TIM_PWM_MspInit+0x40>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <HAL_TIM_PWM_MspInit+0x40>)
 80046c4:	f043 0302 	orr.w	r3, r3, #2
 80046c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ca:	4b07      	ldr	r3, [pc, #28]	@ (80046e8 <HAL_TIM_PWM_MspInit+0x40>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40023800 	.word	0x40023800

080046ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	@ 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a21      	ldr	r2, [pc, #132]	@ (8004790 <HAL_TIM_MspPostInit+0xa4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d13b      	bne.n	8004786 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <HAL_TIM_MspPostInit+0xa8>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	4a1f      	ldr	r2, [pc, #124]	@ (8004794 <HAL_TIM_MspPostInit+0xa8>)
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6313      	str	r3, [r2, #48]	@ 0x30
 800471e:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <HAL_TIM_MspPostInit+0xa8>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	4b19      	ldr	r3, [pc, #100]	@ (8004794 <HAL_TIM_MspPostInit+0xa8>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004732:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <HAL_TIM_MspPostInit+0xa8>)
 8004734:	f043 0302 	orr.w	r3, r3, #2
 8004738:	6313      	str	r3, [r2, #48]	@ 0x30
 800473a:	4b16      	ldr	r3, [pc, #88]	@ (8004794 <HAL_TIM_MspPostInit+0xa8>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004746:	23c0      	movs	r3, #192	@ 0xc0
 8004748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474a:	2302      	movs	r3, #2
 800474c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004752:	2300      	movs	r3, #0
 8004754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004756:	2302      	movs	r3, #2
 8004758:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800475a:	f107 0314 	add.w	r3, r7, #20
 800475e:	4619      	mov	r1, r3
 8004760:	480d      	ldr	r0, [pc, #52]	@ (8004798 <HAL_TIM_MspPostInit+0xac>)
 8004762:	f001 fa2b 	bl	8005bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004766:	2303      	movs	r3, #3
 8004768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476a:	2302      	movs	r3, #2
 800476c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004772:	2300      	movs	r3, #0
 8004774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004776:	2302      	movs	r3, #2
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800477a:	f107 0314 	add.w	r3, r7, #20
 800477e:	4619      	mov	r1, r3
 8004780:	4806      	ldr	r0, [pc, #24]	@ (800479c <HAL_TIM_MspPostInit+0xb0>)
 8004782:	f001 fa1b 	bl	8005bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004786:	bf00      	nop
 8004788:	3728      	adds	r7, #40	@ 0x28
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40000400 	.word	0x40000400
 8004794:	40023800 	.word	0x40023800
 8004798:	40020000 	.word	0x40020000
 800479c:	40020400 	.word	0x40020400

080047a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08c      	sub	sp, #48	@ 0x30
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a8:	f107 031c 	add.w	r3, r7, #28
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a99      	ldr	r2, [pc, #612]	@ (8004a24 <HAL_UART_MspInit+0x284>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	f040 8093 	bne.w	80048ea <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80047c4:	2300      	movs	r3, #0
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	4b97      	ldr	r3, [pc, #604]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	4a96      	ldr	r2, [pc, #600]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 80047ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d4:	4b94      	ldr	r3, [pc, #592]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	4b90      	ldr	r3, [pc, #576]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 80047e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e8:	4a8f      	ldr	r2, [pc, #572]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80047f0:	4b8d      	ldr	r3, [pc, #564]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 80047f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	617b      	str	r3, [r7, #20]
 80047fa:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80047fc:	230c      	movs	r3, #12
 80047fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004800:	2302      	movs	r3, #2
 8004802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004804:	2300      	movs	r3, #0
 8004806:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004808:	2303      	movs	r3, #3
 800480a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800480c:	2307      	movs	r3, #7
 800480e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004810:	f107 031c 	add.w	r3, r7, #28
 8004814:	4619      	mov	r1, r3
 8004816:	4885      	ldr	r0, [pc, #532]	@ (8004a2c <HAL_UART_MspInit+0x28c>)
 8004818:	f001 f9d0 	bl	8005bbc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800481c:	4b84      	ldr	r3, [pc, #528]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 800481e:	4a85      	ldr	r2, [pc, #532]	@ (8004a34 <HAL_UART_MspInit+0x294>)
 8004820:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004822:	4b83      	ldr	r3, [pc, #524]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 8004824:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004828:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800482a:	4b81      	ldr	r3, [pc, #516]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 800482c:	2200      	movs	r2, #0
 800482e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004830:	4b7f      	ldr	r3, [pc, #508]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 8004832:	2200      	movs	r2, #0
 8004834:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004836:	4b7e      	ldr	r3, [pc, #504]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 8004838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800483c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800483e:	4b7c      	ldr	r3, [pc, #496]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 8004840:	2200      	movs	r2, #0
 8004842:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004844:	4b7a      	ldr	r3, [pc, #488]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 8004846:	2200      	movs	r2, #0
 8004848:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800484a:	4b79      	ldr	r3, [pc, #484]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 800484c:	2200      	movs	r2, #0
 800484e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004850:	4b77      	ldr	r3, [pc, #476]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 8004852:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004856:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004858:	4b75      	ldr	r3, [pc, #468]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 800485a:	2200      	movs	r2, #0
 800485c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800485e:	4874      	ldr	r0, [pc, #464]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 8004860:	f000 fd4c 	bl	80052fc <HAL_DMA_Init>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800486a:	f7ff fcb9 	bl	80041e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a6f      	ldr	r2, [pc, #444]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 8004872:	639a      	str	r2, [r3, #56]	@ 0x38
 8004874:	4a6e      	ldr	r2, [pc, #440]	@ (8004a30 <HAL_UART_MspInit+0x290>)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800487a:	4b6f      	ldr	r3, [pc, #444]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 800487c:	4a6f      	ldr	r2, [pc, #444]	@ (8004a3c <HAL_UART_MspInit+0x29c>)
 800487e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004880:	4b6d      	ldr	r3, [pc, #436]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 8004882:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004886:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004888:	4b6b      	ldr	r3, [pc, #428]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 800488a:	2240      	movs	r2, #64	@ 0x40
 800488c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800488e:	4b6a      	ldr	r3, [pc, #424]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 8004890:	2200      	movs	r2, #0
 8004892:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004894:	4b68      	ldr	r3, [pc, #416]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 8004896:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800489a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800489c:	4b66      	ldr	r3, [pc, #408]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 800489e:	2200      	movs	r2, #0
 80048a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048a2:	4b65      	ldr	r3, [pc, #404]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80048a8:	4b63      	ldr	r3, [pc, #396]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80048ae:	4b62      	ldr	r3, [pc, #392]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 80048b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80048b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048b6:	4b60      	ldr	r3, [pc, #384]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80048bc:	485e      	ldr	r0, [pc, #376]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 80048be:	f000 fd1d 	bl	80052fc <HAL_DMA_Init>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80048c8:	f7ff fc8a 	bl	80041e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a5a      	ldr	r2, [pc, #360]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 80048d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80048d2:	4a59      	ldr	r2, [pc, #356]	@ (8004a38 <HAL_UART_MspInit+0x298>)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80048d8:	2200      	movs	r2, #0
 80048da:	2100      	movs	r1, #0
 80048dc:	2026      	movs	r0, #38	@ 0x26
 80048de:	f000 fcd6 	bl	800528e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048e2:	2026      	movs	r0, #38	@ 0x26
 80048e4:	f000 fcef 	bl	80052c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80048e8:	e097      	b.n	8004a1a <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART3)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a54      	ldr	r2, [pc, #336]	@ (8004a40 <HAL_UART_MspInit+0x2a0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	f040 8092 	bne.w	8004a1a <HAL_UART_MspInit+0x27a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	4a4a      	ldr	r2, [pc, #296]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004904:	6413      	str	r3, [r2, #64]	@ 0x40
 8004906:	4b48      	ldr	r3, [pc, #288]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]
 8004916:	4b44      	ldr	r3, [pc, #272]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	4a43      	ldr	r2, [pc, #268]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 800491c:	f043 0308 	orr.w	r3, r3, #8
 8004920:	6313      	str	r3, [r2, #48]	@ 0x30
 8004922:	4b41      	ldr	r3, [pc, #260]	@ (8004a28 <HAL_UART_MspInit+0x288>)
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800492e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004934:	2302      	movs	r3, #2
 8004936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493c:	2303      	movs	r3, #3
 800493e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004940:	2307      	movs	r3, #7
 8004942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004944:	f107 031c 	add.w	r3, r7, #28
 8004948:	4619      	mov	r1, r3
 800494a:	483e      	ldr	r0, [pc, #248]	@ (8004a44 <HAL_UART_MspInit+0x2a4>)
 800494c:	f001 f936 	bl	8005bbc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004950:	4b3d      	ldr	r3, [pc, #244]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 8004952:	4a3e      	ldr	r2, [pc, #248]	@ (8004a4c <HAL_UART_MspInit+0x2ac>)
 8004954:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004956:	4b3c      	ldr	r3, [pc, #240]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 8004958:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800495c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800495e:	4b3a      	ldr	r3, [pc, #232]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 8004960:	2200      	movs	r2, #0
 8004962:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004964:	4b38      	ldr	r3, [pc, #224]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 8004966:	2200      	movs	r2, #0
 8004968:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800496a:	4b37      	ldr	r3, [pc, #220]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 800496c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004970:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004972:	4b35      	ldr	r3, [pc, #212]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 8004974:	2200      	movs	r2, #0
 8004976:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004978:	4b33      	ldr	r3, [pc, #204]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 800497a:	2200      	movs	r2, #0
 800497c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800497e:	4b32      	ldr	r3, [pc, #200]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 8004980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004984:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004986:	4b30      	ldr	r3, [pc, #192]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 8004988:	2200      	movs	r2, #0
 800498a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800498c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 800498e:	2200      	movs	r2, #0
 8004990:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004992:	482d      	ldr	r0, [pc, #180]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 8004994:	f000 fcb2 	bl	80052fc <HAL_DMA_Init>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_UART_MspInit+0x202>
      Error_Handler();
 800499e:	f7ff fc1f 	bl	80041e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a28      	ldr	r2, [pc, #160]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 80049a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80049a8:	4a27      	ldr	r2, [pc, #156]	@ (8004a48 <HAL_UART_MspInit+0x2a8>)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80049ae:	4b28      	ldr	r3, [pc, #160]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049b0:	4a28      	ldr	r2, [pc, #160]	@ (8004a54 <HAL_UART_MspInit+0x2b4>)
 80049b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80049b4:	4b26      	ldr	r3, [pc, #152]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80049ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049bc:	4b24      	ldr	r3, [pc, #144]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049be:	2240      	movs	r2, #64	@ 0x40
 80049c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80049c2:	4b23      	ldr	r3, [pc, #140]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80049c8:	4b21      	ldr	r3, [pc, #132]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80049d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049d8:	2200      	movs	r2, #0
 80049da:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80049dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049de:	2200      	movs	r2, #0
 80049e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80049e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80049e8:	4b19      	ldr	r3, [pc, #100]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80049ee:	4818      	ldr	r0, [pc, #96]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 80049f0:	f000 fc84 	bl	80052fc <HAL_DMA_Init>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_UART_MspInit+0x25e>
      Error_Handler();
 80049fa:	f7ff fbf1 	bl	80041e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a13      	ldr	r2, [pc, #76]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 8004a02:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a04:	4a12      	ldr	r2, [pc, #72]	@ (8004a50 <HAL_UART_MspInit+0x2b0>)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	2027      	movs	r0, #39	@ 0x27
 8004a10:	f000 fc3d 	bl	800528e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a14:	2027      	movs	r0, #39	@ 0x27
 8004a16:	f000 fc56 	bl	80052c6 <HAL_NVIC_EnableIRQ>
}
 8004a1a:	bf00      	nop
 8004a1c:	3730      	adds	r7, #48	@ 0x30
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40004400 	.word	0x40004400
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40020000 	.word	0x40020000
 8004a30:	200008dc 	.word	0x200008dc
 8004a34:	40026088 	.word	0x40026088
 8004a38:	2000093c 	.word	0x2000093c
 8004a3c:	400260a0 	.word	0x400260a0
 8004a40:	40004800 	.word	0x40004800
 8004a44:	40020c00 	.word	0x40020c00
 8004a48:	2000099c 	.word	0x2000099c
 8004a4c:	40026028 	.word	0x40026028
 8004a50:	200009fc 	.word	0x200009fc
 8004a54:	40026058 	.word	0x40026058

08004a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a5c:	bf00      	nop
 8004a5e:	e7fd      	b.n	8004a5c <NMI_Handler+0x4>

08004a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a64:	bf00      	nop
 8004a66:	e7fd      	b.n	8004a64 <HardFault_Handler+0x4>

08004a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <MemManage_Handler+0x4>

08004a70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <BusFault_Handler+0x4>

08004a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a7c:	bf00      	nop
 8004a7e:	e7fd      	b.n	8004a7c <UsageFault_Handler+0x4>

08004a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a92:	bf00      	nop
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004aae:	f000 facf 	bl	8005050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004abc:	4802      	ldr	r0, [pc, #8]	@ (8004ac8 <DMA1_Stream0_IRQHandler+0x10>)
 8004abe:	f000 fe13 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	2000061c 	.word	0x2000061c

08004acc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004ad0:	4802      	ldr	r0, [pc, #8]	@ (8004adc <DMA1_Stream1_IRQHandler+0x10>)
 8004ad2:	f000 fe09 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004ad6:	bf00      	nop
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	2000099c 	.word	0x2000099c

08004ae0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004ae4:	4802      	ldr	r0, [pc, #8]	@ (8004af0 <DMA1_Stream3_IRQHandler+0x10>)
 8004ae6:	f000 fdff 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004aea:	bf00      	nop
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200009fc 	.word	0x200009fc

08004af4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004af8:	4802      	ldr	r0, [pc, #8]	@ (8004b04 <DMA1_Stream5_IRQHandler+0x10>)
 8004afa:	f000 fdf5 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004afe:	bf00      	nop
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200008dc 	.word	0x200008dc

08004b08 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004b0c:	4802      	ldr	r0, [pc, #8]	@ (8004b18 <DMA1_Stream6_IRQHandler+0x10>)
 8004b0e:	f000 fdeb 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	2000093c 	.word	0x2000093c

08004b1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004b20:	4802      	ldr	r0, [pc, #8]	@ (8004b2c <TIM4_IRQHandler+0x10>)
 8004b22:	f003 fa25 	bl	8007f70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	2000080c 	.word	0x2000080c

08004b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004b34:	4802      	ldr	r0, [pc, #8]	@ (8004b40 <USART2_IRQHandler+0x10>)
 8004b36:	f004 f9d7 	bl	8008ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000854 	.word	0x20000854

08004b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004b48:	4802      	ldr	r0, [pc, #8]	@ (8004b54 <USART3_IRQHandler+0x10>)
 8004b4a:	f004 f9cd 	bl	8008ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004b4e:	bf00      	nop
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000898 	.word	0x20000898

08004b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004b5c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004b60:	f001 fade 	bl	8006120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b64:	bf00      	nop
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004b6c:	4802      	ldr	r0, [pc, #8]	@ (8004b78 <DMA1_Stream7_IRQHandler+0x10>)
 8004b6e:	f000 fdbb 	bl	80056e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	2000067c 	.word	0x2000067c

08004b7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b80:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <SystemInit+0x20>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b86:	4a05      	ldr	r2, [pc, #20]	@ (8004b9c <SystemInit+0x20>)
 8004b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <twiSend>:

#include "stm32f4xx_hal.h"
#include "wire.h"
#include "DelayUs.h"
void twiSend(uint8_t address, uint8_t command, uint8_t length)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
 8004baa:	460b      	mov	r3, r1
 8004bac:	71bb      	strb	r3, [r7, #6]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	717b      	strb	r3, [r7, #5]
    I2C2->CR1 |= I2C_CR1_START; //START condition
 8004bb2:	4b22      	ldr	r3, [pc, #136]	@ (8004c3c <twiSend+0x9c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a21      	ldr	r2, [pc, #132]	@ (8004c3c <twiSend+0x9c>)
 8004bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bbc:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8004bbe:	bf00      	nop
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8004c3c <twiSend+0x9c>)
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f9      	beq.n	8004bc0 <twiSend+0x20>
    I2C2->DR=(address<<1|0); //sending address of the device, 0 = sending
 8004bcc:	79fb      	ldrb	r3, [r7, #7]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	@ (8004c3c <twiSend+0x9c>)
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	6113      	str	r3, [r2, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2));
 8004bd4:	bf00      	nop
 8004bd6:	4b19      	ldr	r3, [pc, #100]	@ (8004c3c <twiSend+0x9c>)
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf0c      	ite	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	2300      	movne	r3, #0
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	4b14      	ldr	r3, [pc, #80]	@ (8004c3c <twiSend+0x9c>)
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1eb      	bne.n	8004bd6 <twiSend+0x36>
    I2C2->DR=command; //filling data register with byte, if single - command, multiple - command(s) and data
 8004bfe:	4a0f      	ldr	r2, [pc, #60]	@ (8004c3c <twiSend+0x9c>)
 8004c00:	79bb      	ldrb	r3, [r7, #6]
 8004c02:	6113      	str	r3, [r2, #16]
    for (uint8_t i=0;i<length;i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	73fb      	strb	r3, [r7, #15]
 8004c08:	e00a      	b.n	8004c20 <twiSend+0x80>
    {
        I2C2->DR=buffer[i]; //filling buffer with command or data
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c40 <twiSend+0xa0>)
 8004c0e:	5cd2      	ldrb	r2, [r2, r3]
 8004c10:	4b0a      	ldr	r3, [pc, #40]	@ (8004c3c <twiSend+0x9c>)
 8004c12:	611a      	str	r2, [r3, #16]
        delay(60);
 8004c14:	203c      	movs	r0, #60	@ 0x3c
 8004c16:	f7fc f989 	bl	8000f2c <delay>
    for (uint8_t i=0;i<length;i++)
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	7bfa      	ldrb	r2, [r7, #15]
 8004c22:	797b      	ldrb	r3, [r7, #5]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d3f0      	bcc.n	8004c0a <twiSend+0x6a>
    }
    I2C2->CR1 |= I2C_CR1_STOP;
 8004c28:	4b04      	ldr	r3, [pc, #16]	@ (8004c3c <twiSend+0x9c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a03      	ldr	r2, [pc, #12]	@ (8004c3c <twiSend+0x9c>)
 8004c2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c32:	6013      	str	r3, [r2, #0]
}
 8004c34:	bf00      	nop
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40005800 	.word	0x40005800
 8004c40:	200001ec 	.word	0x200001ec

08004c44 <twiReceive>:

void twiReceive(uint8_t address, uint8_t command, uint8_t length)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	71fb      	strb	r3, [r7, #7]
 8004c4e:	460b      	mov	r3, r1
 8004c50:	71bb      	strb	r3, [r7, #6]
 8004c52:	4613      	mov	r3, r2
 8004c54:	717b      	strb	r3, [r7, #5]
    I2C2->CR1 |= I2C_CR1_ACK;
 8004c56:	4b74      	ldr	r3, [pc, #464]	@ (8004e28 <twiReceive+0x1e4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a73      	ldr	r2, [pc, #460]	@ (8004e28 <twiReceive+0x1e4>)
 8004c5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c60:	6013      	str	r3, [r2, #0]
  I2C2->CR1 |= I2C_CR1_START; //start pulse
 8004c62:	4b71      	ldr	r3, [pc, #452]	@ (8004e28 <twiReceive+0x1e4>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a70      	ldr	r2, [pc, #448]	@ (8004e28 <twiReceive+0x1e4>)
 8004c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c6c:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8004c6e:	bf00      	nop
 8004c70:	4b6d      	ldr	r3, [pc, #436]	@ (8004e28 <twiReceive+0x1e4>)
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f9      	beq.n	8004c70 <twiReceive+0x2c>
    I2C2->DR=(address<<1|0); //sending address of the device, 0 = sending
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
 8004c7e:	4a6a      	ldr	r2, [pc, #424]	@ (8004e28 <twiReceive+0x1e4>)
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	6113      	str	r3, [r2, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2 & I2C_SR2_BUSY));
 8004c84:	bf00      	nop
 8004c86:	4b68      	ldr	r3, [pc, #416]	@ (8004e28 <twiReceive+0x1e4>)
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	4b63      	ldr	r3, [pc, #396]	@ (8004e28 <twiReceive+0x1e4>)
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	4313      	orrs	r3, r2
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e9      	bne.n	8004c86 <twiReceive+0x42>
    I2C2->DR=command; //sending command to the device in order to request data
 8004cb2:	4a5d      	ldr	r2, [pc, #372]	@ (8004e28 <twiReceive+0x1e4>)
 8004cb4:	79bb      	ldrb	r3, [r7, #6]
 8004cb6:	6113      	str	r3, [r2, #16]
    I2C2->CR1 |= I2C_CR1_START; //REPEATED START condition to change from sending address + command to receive data
 8004cb8:	4b5b      	ldr	r3, [pc, #364]	@ (8004e28 <twiReceive+0x1e4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a5a      	ldr	r2, [pc, #360]	@ (8004e28 <twiReceive+0x1e4>)
 8004cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc2:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8004cc4:	bf00      	nop
 8004cc6:	4b58      	ldr	r3, [pc, #352]	@ (8004e28 <twiReceive+0x1e4>)
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f9      	beq.n	8004cc6 <twiReceive+0x82>
    I2C2->DR=(address<<1|1); //sending address of the device, 1 = reading
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	f043 0201 	orr.w	r2, r3, #1
 8004cda:	4b53      	ldr	r3, [pc, #332]	@ (8004e28 <twiReceive+0x1e4>)
 8004cdc:	611a      	str	r2, [r3, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2));
 8004cde:	bf00      	nop
 8004ce0:	4b51      	ldr	r3, [pc, #324]	@ (8004e28 <twiReceive+0x1e4>)
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8004e28 <twiReceive+0x1e4>)
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	4313      	orrs	r3, r2
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1eb      	bne.n	8004ce0 <twiReceive+0x9c>

if (length==1)  //receiving single byte, N=1
 8004d08:	797b      	ldrb	r3, [r7, #5]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d123      	bne.n	8004d56 <twiReceive+0x112>
    {
        while(!(I2C2->SR1)|!(I2C2->SR2));
 8004d0e:	bf00      	nop
 8004d10:	4b45      	ldr	r3, [pc, #276]	@ (8004e28 <twiReceive+0x1e4>)
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	bf0c      	ite	eq
 8004d18:	2301      	moveq	r3, #1
 8004d1a:	2300      	movne	r3, #0
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	4b42      	ldr	r3, [pc, #264]	@ (8004e28 <twiReceive+0x1e4>)
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bf0c      	ite	eq
 8004d26:	2301      	moveq	r3, #1
 8004d28:	2300      	movne	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1ed      	bne.n	8004d10 <twiReceive+0xcc>
        I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) to signal it is last byte
 8004d34:	4b3c      	ldr	r3, [pc, #240]	@ (8004e28 <twiReceive+0x1e4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a3b      	ldr	r2, [pc, #236]	@ (8004e28 <twiReceive+0x1e4>)
 8004d3a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d3e:	6013      	str	r3, [r2, #0]
        I2C2->CR1 |= I2C_CR1_STOP; //issuing STOP condition before (!) reading byte
 8004d40:	4b39      	ldr	r3, [pc, #228]	@ (8004e28 <twiReceive+0x1e4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a38      	ldr	r2, [pc, #224]	@ (8004e28 <twiReceive+0x1e4>)
 8004d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d4a:	6013      	str	r3, [r2, #0]
        buffer[0]=I2C2->DR; //single byte is read AFTER NAK (!) and STOP condition
 8004d4c:	4b36      	ldr	r3, [pc, #216]	@ (8004e28 <twiReceive+0x1e4>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	4b36      	ldr	r3, [pc, #216]	@ (8004e2c <twiReceive+0x1e8>)
 8004d54:	701a      	strb	r2, [r3, #0]
    }
    if (length==2) //receiving two bytes, N=2
 8004d56:	797b      	ldrb	r3, [r7, #5]
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d13d      	bne.n	8004dd8 <twiReceive+0x194>
    {
        while(!(I2C2->SR1)|!(I2C2->SR2));
 8004d5c:	bf00      	nop
 8004d5e:	4b32      	ldr	r3, [pc, #200]	@ (8004e28 <twiReceive+0x1e4>)
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf0c      	ite	eq
 8004d66:	2301      	moveq	r3, #1
 8004d68:	2300      	movne	r3, #0
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e28 <twiReceive+0x1e4>)
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	bf0c      	ite	eq
 8004d74:	2301      	moveq	r3, #1
 8004d76:	2300      	movne	r3, #0
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ed      	bne.n	8004d5e <twiReceive+0x11a>
        I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) before last byte
 8004d82:	4b29      	ldr	r3, [pc, #164]	@ (8004e28 <twiReceive+0x1e4>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a28      	ldr	r2, [pc, #160]	@ (8004e28 <twiReceive+0x1e4>)
 8004d88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d8c:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_STOP;
 8004d8e:	4b26      	ldr	r3, [pc, #152]	@ (8004e28 <twiReceive+0x1e4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a25      	ldr	r2, [pc, #148]	@ (8004e28 <twiReceive+0x1e4>)
 8004d94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004d98:	6013      	str	r3, [r2, #0]
        buffer[0]=I2C2->DR; //reading N-1 byte, next to last byte is in DR, last one still in shift register
 8004d9a:	4b23      	ldr	r3, [pc, #140]	@ (8004e28 <twiReceive+0x1e4>)
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	4b22      	ldr	r3, [pc, #136]	@ (8004e2c <twiReceive+0x1e8>)
 8004da2:	701a      	strb	r2, [r3, #0]
        while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004da4:	bf00      	nop
 8004da6:	4b20      	ldr	r3, [pc, #128]	@ (8004e28 <twiReceive+0x1e4>)
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bf0c      	ite	eq
 8004db2:	2301      	moveq	r3, #1
 8004db4:	2300      	movne	r3, #0
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e28 <twiReceive+0x1e4>)
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	bf0c      	ite	eq
 8004dc0:	2301      	moveq	r3, #1
 8004dc2:	2300      	movne	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1eb      	bne.n	8004da6 <twiReceive+0x162>
        buffer[1]=I2C2->DR; //read last N byte now available
 8004dce:	4b16      	ldr	r3, [pc, #88]	@ (8004e28 <twiReceive+0x1e4>)
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	4b15      	ldr	r3, [pc, #84]	@ (8004e2c <twiReceive+0x1e8>)
 8004dd6:	705a      	strb	r2, [r3, #1]
    }
  if (length>2) //receiving more than two bytes, N>2
 8004dd8:	797b      	ldrb	r3, [r7, #5]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	f240 80b1 	bls.w	8004f42 <twiReceive+0x2fe>
    {

      for (uint8_t i=0;i<length;i++)
 8004de0:	2300      	movs	r3, #0
 8004de2:	73fb      	strb	r3, [r7, #15]
 8004de4:	e0a8      	b.n	8004f38 <twiReceive+0x2f4>
      {

          if (i<(length-3))      // if it is not N-2, then read all bytes
 8004de6:	7bfa      	ldrb	r2, [r7, #15]
 8004de8:	797b      	ldrb	r3, [r7, #5]
 8004dea:	3b03      	subs	r3, #3
 8004dec:	429a      	cmp	r2, r3
 8004dee:	da1f      	bge.n	8004e30 <twiReceive+0x1ec>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004df0:	bf00      	nop
 8004df2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e28 <twiReceive+0x1e4>)
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	4b08      	ldr	r3, [pc, #32]	@ (8004e28 <twiReceive+0x1e4>)
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2301      	moveq	r3, #1
 8004e0e:	2300      	movne	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4313      	orrs	r3, r2
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1eb      	bne.n	8004df2 <twiReceive+0x1ae>
                buffer[i]=I2C2->DR;
 8004e1a:	4b03      	ldr	r3, [pc, #12]	@ (8004e28 <twiReceive+0x1e4>)
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	b2d1      	uxtb	r1, r2
 8004e22:	4a02      	ldr	r2, [pc, #8]	@ (8004e2c <twiReceive+0x1e8>)
 8004e24:	54d1      	strb	r1, [r2, r3]
 8004e26:	e084      	b.n	8004f32 <twiReceive+0x2ee>
 8004e28:	40005800 	.word	0x40005800
 8004e2c:	200001ec 	.word	0x200001ec
            }
          else if (i==length-3) // if it is N-2 then read
 8004e30:	7bfa      	ldrb	r2, [r7, #15]
 8004e32:	797b      	ldrb	r3, [r7, #5]
 8004e34:	3b03      	subs	r3, #3
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d13a      	bne.n	8004eb0 <twiReceive+0x26c>
            {
                while(!(I2C2->SR1)|!(I2C2->SR2));
 8004e3a:	bf00      	nop
 8004e3c:	4b44      	ldr	r3, [pc, #272]	@ (8004f50 <twiReceive+0x30c>)
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b41      	ldr	r3, [pc, #260]	@ (8004f50 <twiReceive+0x30c>)
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	bf0c      	ite	eq
 8004e52:	2301      	moveq	r3, #1
 8004e54:	2300      	movne	r3, #0
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1ed      	bne.n	8004e3c <twiReceive+0x1f8>
                buffer[i]=I2C2->DR;
 8004e60:	4b3b      	ldr	r3, [pc, #236]	@ (8004f50 <twiReceive+0x30c>)
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	b2d1      	uxtb	r1, r2
 8004e68:	4a3a      	ldr	r2, [pc, #232]	@ (8004f54 <twiReceive+0x310>)
 8004e6a:	54d1      	strb	r1, [r2, r3]
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004e6c:	bf00      	nop
 8004e6e:	4b38      	ldr	r3, [pc, #224]	@ (8004f50 <twiReceive+0x30c>)
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bf0c      	ite	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	2300      	movne	r3, #0
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	4b33      	ldr	r3, [pc, #204]	@ (8004f50 <twiReceive+0x30c>)
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1eb      	bne.n	8004e6e <twiReceive+0x22a>
                I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) before last byte
 8004e96:	4b2e      	ldr	r3, [pc, #184]	@ (8004f50 <twiReceive+0x30c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f50 <twiReceive+0x30c>)
 8004e9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ea0:	6013      	str	r3, [r2, #0]
                I2C2->CR1 |= I2C_CR1_STOP;
 8004ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8004f50 <twiReceive+0x30c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f50 <twiReceive+0x30c>)
 8004ea8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e040      	b.n	8004f32 <twiReceive+0x2ee>
            }
        else if (i==length-2) // if it is N-1 then read
 8004eb0:	7bfa      	ldrb	r2, [r7, #15]
 8004eb2:	797b      	ldrb	r3, [r7, #5]
 8004eb4:	3b02      	subs	r3, #2
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d11b      	bne.n	8004ef2 <twiReceive+0x2ae>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004eba:	bf00      	nop
 8004ebc:	4b24      	ldr	r3, [pc, #144]	@ (8004f50 <twiReceive+0x30c>)
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	4b20      	ldr	r3, [pc, #128]	@ (8004f50 <twiReceive+0x30c>)
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bf0c      	ite	eq
 8004ed6:	2301      	moveq	r3, #1
 8004ed8:	2300      	movne	r3, #0
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	4313      	orrs	r3, r2
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1eb      	bne.n	8004ebc <twiReceive+0x278>
                buffer[i]=I2C2->DR;
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f50 <twiReceive+0x30c>)
 8004ee6:	691a      	ldr	r2, [r3, #16]
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	b2d1      	uxtb	r1, r2
 8004eec:	4a19      	ldr	r2, [pc, #100]	@ (8004f54 <twiReceive+0x310>)
 8004eee:	54d1      	strb	r1, [r2, r3]
 8004ef0:	e01f      	b.n	8004f32 <twiReceive+0x2ee>
            }
            else if (i==length-1) // else it is N byte
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	797b      	ldrb	r3, [r7, #5]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d11a      	bne.n	8004f32 <twiReceive+0x2ee>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2)){};
 8004efc:	bf00      	nop
 8004efe:	4b14      	ldr	r3, [pc, #80]	@ (8004f50 <twiReceive+0x30c>)
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <twiReceive+0x30c>)
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1eb      	bne.n	8004efe <twiReceive+0x2ba>
            buffer[i]=I2C2->DR;
 8004f26:	4b0a      	ldr	r3, [pc, #40]	@ (8004f50 <twiReceive+0x30c>)
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	b2d1      	uxtb	r1, r2
 8004f2e:	4a09      	ldr	r2, [pc, #36]	@ (8004f54 <twiReceive+0x310>)
 8004f30:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i=0;i<length;i++)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	3301      	adds	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	7bfa      	ldrb	r2, [r7, #15]
 8004f3a:	797b      	ldrb	r3, [r7, #5]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	f4ff af52 	bcc.w	8004de6 <twiReceive+0x1a2>
            }
    }
 }
}
 8004f42:	bf00      	nop
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40005800 	.word	0x40005800
 8004f54:	200001ec 	.word	0x200001ec

08004f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f5c:	480d      	ldr	r0, [pc, #52]	@ (8004f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f5e:	490e      	ldr	r1, [pc, #56]	@ (8004f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f60:	4a0e      	ldr	r2, [pc, #56]	@ (8004f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f64:	e002      	b.n	8004f6c <LoopCopyDataInit>

08004f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f6a:	3304      	adds	r3, #4

08004f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f70:	d3f9      	bcc.n	8004f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f72:	4a0b      	ldr	r2, [pc, #44]	@ (8004fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f74:	4c0b      	ldr	r4, [pc, #44]	@ (8004fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f78:	e001      	b.n	8004f7e <LoopFillZerobss>

08004f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f7c:	3204      	adds	r2, #4

08004f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f80:	d3fb      	bcc.n	8004f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f82:	f7ff fdfb 	bl	8004b7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f86:	f005 f89b 	bl	800a0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f8a:	f7fd ffd1 	bl	8002f30 <main>
  bx  lr    
 8004f8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f98:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8004f9c:	0800c810 	.word	0x0800c810
  ldr r2, =_sbss
 8004fa0:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8004fa4:	20000bbc 	.word	0x20000bbc

08004fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fa8:	e7fe      	b.n	8004fa8 <ADC_IRQHandler>
	...

08004fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8004fec <HAL_Init+0x40>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0d      	ldr	r2, [pc, #52]	@ (8004fec <HAL_Init+0x40>)
 8004fb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <HAL_Init+0x40>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8004fec <HAL_Init+0x40>)
 8004fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fc8:	4b08      	ldr	r3, [pc, #32]	@ (8004fec <HAL_Init+0x40>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a07      	ldr	r2, [pc, #28]	@ (8004fec <HAL_Init+0x40>)
 8004fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fd4:	2003      	movs	r0, #3
 8004fd6:	f000 f94f 	bl	8005278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fda:	200f      	movs	r0, #15
 8004fdc:	f000 f808 	bl	8004ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fe0:	f7ff f904 	bl	80041ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40023c00 	.word	0x40023c00

08004ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004ff8:	4b12      	ldr	r3, [pc, #72]	@ (8005044 <HAL_InitTick+0x54>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <HAL_InitTick+0x58>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	4619      	mov	r1, r3
 8005002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005006:	fbb3 f3f1 	udiv	r3, r3, r1
 800500a:	fbb2 f3f3 	udiv	r3, r2, r3
 800500e:	4618      	mov	r0, r3
 8005010:	f000 f967 	bl	80052e2 <HAL_SYSTICK_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e00e      	b.n	800503c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b0f      	cmp	r3, #15
 8005022:	d80a      	bhi.n	800503a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005024:	2200      	movs	r2, #0
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	f000 f92f 	bl	800528e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005030:	4a06      	ldr	r2, [pc, #24]	@ (800504c <HAL_InitTick+0x5c>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	e000      	b.n	800503c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20000058 	.word	0x20000058
 8005048:	20000060 	.word	0x20000060
 800504c:	2000005c 	.word	0x2000005c

08005050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005054:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <HAL_IncTick+0x20>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <HAL_IncTick+0x24>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4413      	add	r3, r2
 8005060:	4a04      	ldr	r2, [pc, #16]	@ (8005074 <HAL_IncTick+0x24>)
 8005062:	6013      	str	r3, [r2, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000060 	.word	0x20000060
 8005074:	20000a80 	.word	0x20000a80

08005078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return uwTick;
 800507c:	4b03      	ldr	r3, [pc, #12]	@ (800508c <HAL_GetTick+0x14>)
 800507e:	681b      	ldr	r3, [r3, #0]
}
 8005080:	4618      	mov	r0, r3
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000a80 	.word	0x20000a80

08005090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005098:	f7ff ffee 	bl	8005078 <HAL_GetTick>
 800509c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d005      	beq.n	80050b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80050aa:	4b0a      	ldr	r3, [pc, #40]	@ (80050d4 <HAL_Delay+0x44>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80050b6:	bf00      	nop
 80050b8:	f7ff ffde 	bl	8005078 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d8f7      	bhi.n	80050b8 <HAL_Delay+0x28>
  {
  }
}
 80050c8:	bf00      	nop
 80050ca:	bf00      	nop
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000060 	.word	0x20000060

080050d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050e8:	4b0c      	ldr	r3, [pc, #48]	@ (800511c <__NVIC_SetPriorityGrouping+0x44>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050f4:	4013      	ands	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005100:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005104:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800510a:	4a04      	ldr	r2, [pc, #16]	@ (800511c <__NVIC_SetPriorityGrouping+0x44>)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	60d3      	str	r3, [r2, #12]
}
 8005110:	bf00      	nop
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	e000ed00 	.word	0xe000ed00

08005120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005124:	4b04      	ldr	r3, [pc, #16]	@ (8005138 <__NVIC_GetPriorityGrouping+0x18>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	0a1b      	lsrs	r3, r3, #8
 800512a:	f003 0307 	and.w	r3, r3, #7
}
 800512e:	4618      	mov	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	e000ed00 	.word	0xe000ed00

0800513c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800514a:	2b00      	cmp	r3, #0
 800514c:	db0b      	blt.n	8005166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	f003 021f 	and.w	r2, r3, #31
 8005154:	4907      	ldr	r1, [pc, #28]	@ (8005174 <__NVIC_EnableIRQ+0x38>)
 8005156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2001      	movs	r0, #1
 800515e:	fa00 f202 	lsl.w	r2, r0, r2
 8005162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	e000e100 	.word	0xe000e100

08005178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	6039      	str	r1, [r7, #0]
 8005182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005188:	2b00      	cmp	r3, #0
 800518a:	db0a      	blt.n	80051a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	b2da      	uxtb	r2, r3
 8005190:	490c      	ldr	r1, [pc, #48]	@ (80051c4 <__NVIC_SetPriority+0x4c>)
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	0112      	lsls	r2, r2, #4
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	440b      	add	r3, r1
 800519c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051a0:	e00a      	b.n	80051b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	4908      	ldr	r1, [pc, #32]	@ (80051c8 <__NVIC_SetPriority+0x50>)
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	3b04      	subs	r3, #4
 80051b0:	0112      	lsls	r2, r2, #4
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	440b      	add	r3, r1
 80051b6:	761a      	strb	r2, [r3, #24]
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	e000e100 	.word	0xe000e100
 80051c8:	e000ed00 	.word	0xe000ed00

080051cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b089      	sub	sp, #36	@ 0x24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	f1c3 0307 	rsb	r3, r3, #7
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	bf28      	it	cs
 80051ea:	2304      	movcs	r3, #4
 80051ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3304      	adds	r3, #4
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d902      	bls.n	80051fc <NVIC_EncodePriority+0x30>
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	3b03      	subs	r3, #3
 80051fa:	e000      	b.n	80051fe <NVIC_EncodePriority+0x32>
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005200:	f04f 32ff 	mov.w	r2, #4294967295
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43da      	mvns	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	401a      	ands	r2, r3
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005214:	f04f 31ff 	mov.w	r1, #4294967295
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	fa01 f303 	lsl.w	r3, r1, r3
 800521e:	43d9      	mvns	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005224:	4313      	orrs	r3, r2
         );
}
 8005226:	4618      	mov	r0, r3
 8005228:	3724      	adds	r7, #36	@ 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3b01      	subs	r3, #1
 8005240:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005244:	d301      	bcc.n	800524a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005246:	2301      	movs	r3, #1
 8005248:	e00f      	b.n	800526a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800524a:	4a0a      	ldr	r2, [pc, #40]	@ (8005274 <SysTick_Config+0x40>)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3b01      	subs	r3, #1
 8005250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005252:	210f      	movs	r1, #15
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	f7ff ff8e 	bl	8005178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800525c:	4b05      	ldr	r3, [pc, #20]	@ (8005274 <SysTick_Config+0x40>)
 800525e:	2200      	movs	r2, #0
 8005260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005262:	4b04      	ldr	r3, [pc, #16]	@ (8005274 <SysTick_Config+0x40>)
 8005264:	2207      	movs	r2, #7
 8005266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	e000e010 	.word	0xe000e010

08005278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff29 	bl	80050d8 <__NVIC_SetPriorityGrouping>
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	4603      	mov	r3, r0
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
 800529a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052a0:	f7ff ff3e 	bl	8005120 <__NVIC_GetPriorityGrouping>
 80052a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	6978      	ldr	r0, [r7, #20]
 80052ac:	f7ff ff8e 	bl	80051cc <NVIC_EncodePriority>
 80052b0:	4602      	mov	r2, r0
 80052b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff ff5d 	bl	8005178 <__NVIC_SetPriority>
}
 80052be:	bf00      	nop
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b082      	sub	sp, #8
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	4603      	mov	r3, r0
 80052ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff ff31 	bl	800513c <__NVIC_EnableIRQ>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b082      	sub	sp, #8
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ffa2 	bl	8005234 <SysTick_Config>
 80052f0:	4603      	mov	r3, r0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005308:	f7ff feb6 	bl	8005078 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e099      	b.n	800544c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005338:	e00f      	b.n	800535a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800533a:	f7ff fe9d 	bl	8005078 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b05      	cmp	r3, #5
 8005346:	d908      	bls.n	800535a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2203      	movs	r2, #3
 8005352:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e078      	b.n	800544c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e8      	bne.n	800533a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4b38      	ldr	r3, [pc, #224]	@ (8005454 <HAL_DMA_Init+0x158>)
 8005374:	4013      	ands	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800539e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d107      	bne.n	80053c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	4313      	orrs	r3, r2
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	f023 0307 	bic.w	r3, r3, #7
 80053da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d117      	bne.n	800541e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00e      	beq.n	800541e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fb5f 	bl	8005ac4 <DMA_CheckFifoParam>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d008      	beq.n	800541e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2240      	movs	r2, #64	@ 0x40
 8005410:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800541a:	2301      	movs	r3, #1
 800541c:	e016      	b.n	800544c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fb16 	bl	8005a58 <DMA_CalcBaseAndBitshift>
 800542c:	4603      	mov	r3, r0
 800542e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005434:	223f      	movs	r2, #63	@ 0x3f
 8005436:	409a      	lsls	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	f010803f 	.word	0xf010803f

08005458 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e050      	b.n	800550c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d101      	bne.n	800547a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005476:	2302      	movs	r3, #2
 8005478:	e048      	b.n	800550c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2200      	movs	r2, #0
 80054a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2221      	movs	r2, #33	@ 0x21
 80054b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 facc 	bl	8005a58 <DMA_CalcBaseAndBitshift>
 80054c0:	4603      	mov	r3, r0
 80054c2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ec:	223f      	movs	r2, #63	@ 0x3f
 80054ee:	409a      	lsls	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800552a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <HAL_DMA_Start_IT+0x26>
 8005536:	2302      	movs	r3, #2
 8005538:	e040      	b.n	80055bc <HAL_DMA_Start_IT+0xa8>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d12f      	bne.n	80055ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fa4a 	bl	80059fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556c:	223f      	movs	r2, #63	@ 0x3f
 800556e:	409a      	lsls	r2, r3
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0216 	orr.w	r2, r2, #22
 8005582:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d007      	beq.n	800559c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e005      	b.n	80055ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80055b6:	2302      	movs	r3, #2
 80055b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80055d2:	f7ff fd51 	bl	8005078 <HAL_GetTick>
 80055d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d008      	beq.n	80055f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2280      	movs	r2, #128	@ 0x80
 80055e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e052      	b.n	800569c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0216 	bic.w	r2, r2, #22
 8005604:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695a      	ldr	r2, [r3, #20]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005614:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d103      	bne.n	8005626 <HAL_DMA_Abort+0x62>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0208 	bic.w	r2, r2, #8
 8005634:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005646:	e013      	b.n	8005670 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005648:	f7ff fd16 	bl	8005078 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	2b05      	cmp	r3, #5
 8005654:	d90c      	bls.n	8005670 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2203      	movs	r2, #3
 8005660:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e015      	b.n	800569c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e4      	bne.n	8005648 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005682:	223f      	movs	r2, #63	@ 0x3f
 8005684:	409a      	lsls	r2, r3
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d004      	beq.n	80056c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2280      	movs	r2, #128	@ 0x80
 80056bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e00c      	b.n	80056dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2205      	movs	r2, #5
 80056c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0201 	bic.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80056f0:	2300      	movs	r3, #0
 80056f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056f4:	4b8e      	ldr	r3, [pc, #568]	@ (8005930 <HAL_DMA_IRQHandler+0x248>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a8e      	ldr	r2, [pc, #568]	@ (8005934 <HAL_DMA_IRQHandler+0x24c>)
 80056fa:	fba2 2303 	umull	r2, r3, r2, r3
 80056fe:	0a9b      	lsrs	r3, r3, #10
 8005700:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005706:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005712:	2208      	movs	r2, #8
 8005714:	409a      	lsls	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4013      	ands	r3, r2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d01a      	beq.n	8005754 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0304 	and.w	r3, r3, #4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d013      	beq.n	8005754 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0204 	bic.w	r2, r2, #4
 800573a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005740:	2208      	movs	r2, #8
 8005742:	409a      	lsls	r2, r3
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800574c:	f043 0201 	orr.w	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005758:	2201      	movs	r2, #1
 800575a:	409a      	lsls	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d012      	beq.n	800578a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00b      	beq.n	800578a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005776:	2201      	movs	r2, #1
 8005778:	409a      	lsls	r2, r3
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005782:	f043 0202 	orr.w	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800578e:	2204      	movs	r2, #4
 8005790:	409a      	lsls	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4013      	ands	r3, r2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d012      	beq.n	80057c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00b      	beq.n	80057c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ac:	2204      	movs	r2, #4
 80057ae:	409a      	lsls	r2, r3
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b8:	f043 0204 	orr.w	r2, r3, #4
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c4:	2210      	movs	r2, #16
 80057c6:	409a      	lsls	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d043      	beq.n	8005858 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d03c      	beq.n	8005858 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e2:	2210      	movs	r2, #16
 80057e4:	409a      	lsls	r2, r3
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d018      	beq.n	800582a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d024      	beq.n	8005858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
 8005816:	e01f      	b.n	8005858 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800581c:	2b00      	cmp	r3, #0
 800581e:	d01b      	beq.n	8005858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	4798      	blx	r3
 8005828:	e016      	b.n	8005858 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d107      	bne.n	8005848 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0208 	bic.w	r2, r2, #8
 8005846:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800585c:	2220      	movs	r2, #32
 800585e:	409a      	lsls	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4013      	ands	r3, r2
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 808f 	beq.w	8005988 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8087 	beq.w	8005988 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800587e:	2220      	movs	r2, #32
 8005880:	409a      	lsls	r2, r3
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b05      	cmp	r3, #5
 8005890:	d136      	bne.n	8005900 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0216 	bic.w	r2, r2, #22
 80058a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d103      	bne.n	80058c2 <HAL_DMA_IRQHandler+0x1da>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0208 	bic.w	r2, r2, #8
 80058d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d6:	223f      	movs	r2, #63	@ 0x3f
 80058d8:	409a      	lsls	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d07e      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	4798      	blx	r3
        }
        return;
 80058fe:	e079      	b.n	80059f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01d      	beq.n	800594a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10d      	bne.n	8005938 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005920:	2b00      	cmp	r3, #0
 8005922:	d031      	beq.n	8005988 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	4798      	blx	r3
 800592c:	e02c      	b.n	8005988 <HAL_DMA_IRQHandler+0x2a0>
 800592e:	bf00      	nop
 8005930:	20000058 	.word	0x20000058
 8005934:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d023      	beq.n	8005988 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	4798      	blx	r3
 8005948:	e01e      	b.n	8005988 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10f      	bne.n	8005978 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f022 0210 	bic.w	r2, r2, #16
 8005966:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598c:	2b00      	cmp	r3, #0
 800598e:	d032      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b00      	cmp	r3, #0
 800599a:	d022      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2205      	movs	r2, #5
 80059a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f022 0201 	bic.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d307      	bcc.n	80059d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f2      	bne.n	80059b4 <HAL_DMA_IRQHandler+0x2cc>
 80059ce:	e000      	b.n	80059d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80059d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	4798      	blx	r3
 80059f2:	e000      	b.n	80059f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80059f4:	bf00      	nop
    }
  }
}
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b40      	cmp	r3, #64	@ 0x40
 8005a28:	d108      	bne.n	8005a3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005a3a:	e007      	b.n	8005a4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	60da      	str	r2, [r3, #12]
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	3b10      	subs	r3, #16
 8005a68:	4a14      	ldr	r2, [pc, #80]	@ (8005abc <DMA_CalcBaseAndBitshift+0x64>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	091b      	lsrs	r3, r3, #4
 8005a70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a72:	4a13      	ldr	r2, [pc, #76]	@ (8005ac0 <DMA_CalcBaseAndBitshift+0x68>)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d909      	bls.n	8005a9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	1d1a      	adds	r2, r3, #4
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a98:	e007      	b.n	8005aaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	aaaaaaab 	.word	0xaaaaaaab
 8005ac0:	0800c57c 	.word	0x0800c57c

08005ac4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d11f      	bne.n	8005b1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	d856      	bhi.n	8005b92 <DMA_CheckFifoParam+0xce>
 8005ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aec <DMA_CheckFifoParam+0x28>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005afd 	.word	0x08005afd
 8005af0:	08005b0f 	.word	0x08005b0f
 8005af4:	08005afd 	.word	0x08005afd
 8005af8:	08005b93 	.word	0x08005b93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d046      	beq.n	8005b96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b0c:	e043      	b.n	8005b96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b16:	d140      	bne.n	8005b9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b1c:	e03d      	b.n	8005b9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b26:	d121      	bne.n	8005b6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b03      	cmp	r3, #3
 8005b2c:	d837      	bhi.n	8005b9e <DMA_CheckFifoParam+0xda>
 8005b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <DMA_CheckFifoParam+0x70>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005b45 	.word	0x08005b45
 8005b38:	08005b4b 	.word	0x08005b4b
 8005b3c:	08005b45 	.word	0x08005b45
 8005b40:	08005b5d 	.word	0x08005b5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
      break;
 8005b48:	e030      	b.n	8005bac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d025      	beq.n	8005ba2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b5a:	e022      	b.n	8005ba2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005b64:	d11f      	bne.n	8005ba6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b6a:	e01c      	b.n	8005ba6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d903      	bls.n	8005b7a <DMA_CheckFifoParam+0xb6>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b03      	cmp	r3, #3
 8005b76:	d003      	beq.n	8005b80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b78:	e018      	b.n	8005bac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7e:	e015      	b.n	8005bac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00e      	beq.n	8005baa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b90:	e00b      	b.n	8005baa <DMA_CheckFifoParam+0xe6>
      break;
 8005b92:	bf00      	nop
 8005b94:	e00a      	b.n	8005bac <DMA_CheckFifoParam+0xe8>
      break;
 8005b96:	bf00      	nop
 8005b98:	e008      	b.n	8005bac <DMA_CheckFifoParam+0xe8>
      break;
 8005b9a:	bf00      	nop
 8005b9c:	e006      	b.n	8005bac <DMA_CheckFifoParam+0xe8>
      break;
 8005b9e:	bf00      	nop
 8005ba0:	e004      	b.n	8005bac <DMA_CheckFifoParam+0xe8>
      break;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <DMA_CheckFifoParam+0xe8>
      break;   
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <DMA_CheckFifoParam+0xe8>
      break;
 8005baa:	bf00      	nop
    }
  } 
  
  return status; 
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop

08005bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b089      	sub	sp, #36	@ 0x24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	e16b      	b.n	8005eb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005bd8:	2201      	movs	r2, #1
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	4013      	ands	r3, r2
 8005bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	f040 815a 	bne.w	8005eaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 0303 	and.w	r3, r3, #3
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d005      	beq.n	8005c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d130      	bne.n	8005c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	2203      	movs	r2, #3
 8005c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c44:	2201      	movs	r2, #1
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	4013      	ands	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	091b      	lsrs	r3, r3, #4
 8005c5a:	f003 0201 	and.w	r2, r3, #1
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	fa02 f303 	lsl.w	r3, r2, r3
 8005c64:	69ba      	ldr	r2, [r7, #24]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	2b03      	cmp	r3, #3
 8005c7a:	d017      	beq.n	8005cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	2203      	movs	r2, #3
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4013      	ands	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	005b      	lsls	r3, r3, #1
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d123      	bne.n	8005d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	08da      	lsrs	r2, r3, #3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3208      	adds	r2, #8
 8005cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f003 0307 	and.w	r3, r3, #7
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	220f      	movs	r2, #15
 8005cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	08da      	lsrs	r2, r3, #3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3208      	adds	r2, #8
 8005cfa:	69b9      	ldr	r1, [r7, #24]
 8005cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	2203      	movs	r2, #3
 8005d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d10:	43db      	mvns	r3, r3
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	4013      	ands	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f003 0203 	and.w	r2, r3, #3
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	69ba      	ldr	r2, [r7, #24]
 8005d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f000 80b4 	beq.w	8005eaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	4b60      	ldr	r3, [pc, #384]	@ (8005ec8 <HAL_GPIO_Init+0x30c>)
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec8 <HAL_GPIO_Init+0x30c>)
 8005d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d52:	4b5d      	ldr	r3, [pc, #372]	@ (8005ec8 <HAL_GPIO_Init+0x30c>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d5e:	4a5b      	ldr	r2, [pc, #364]	@ (8005ecc <HAL_GPIO_Init+0x310>)
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	3302      	adds	r3, #2
 8005d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	220f      	movs	r2, #15
 8005d76:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a52      	ldr	r2, [pc, #328]	@ (8005ed0 <HAL_GPIO_Init+0x314>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02b      	beq.n	8005de2 <HAL_GPIO_Init+0x226>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a51      	ldr	r2, [pc, #324]	@ (8005ed4 <HAL_GPIO_Init+0x318>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d025      	beq.n	8005dde <HAL_GPIO_Init+0x222>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a50      	ldr	r2, [pc, #320]	@ (8005ed8 <HAL_GPIO_Init+0x31c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01f      	beq.n	8005dda <HAL_GPIO_Init+0x21e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8005edc <HAL_GPIO_Init+0x320>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d019      	beq.n	8005dd6 <HAL_GPIO_Init+0x21a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a4e      	ldr	r2, [pc, #312]	@ (8005ee0 <HAL_GPIO_Init+0x324>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <HAL_GPIO_Init+0x216>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a4d      	ldr	r2, [pc, #308]	@ (8005ee4 <HAL_GPIO_Init+0x328>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00d      	beq.n	8005dce <HAL_GPIO_Init+0x212>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a4c      	ldr	r2, [pc, #304]	@ (8005ee8 <HAL_GPIO_Init+0x32c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <HAL_GPIO_Init+0x20e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8005eec <HAL_GPIO_Init+0x330>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d101      	bne.n	8005dc6 <HAL_GPIO_Init+0x20a>
 8005dc2:	2307      	movs	r3, #7
 8005dc4:	e00e      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	e00c      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dca:	2306      	movs	r3, #6
 8005dcc:	e00a      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dce:	2305      	movs	r3, #5
 8005dd0:	e008      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	e006      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e004      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dda:	2302      	movs	r3, #2
 8005ddc:	e002      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <HAL_GPIO_Init+0x228>
 8005de2:	2300      	movs	r3, #0
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	f002 0203 	and.w	r2, r2, #3
 8005dea:	0092      	lsls	r2, r2, #2
 8005dec:	4093      	lsls	r3, r2
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005df4:	4935      	ldr	r1, [pc, #212]	@ (8005ecc <HAL_GPIO_Init+0x310>)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	089b      	lsrs	r3, r3, #2
 8005dfa:	3302      	adds	r3, #2
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005e02:	4b3b      	ldr	r3, [pc, #236]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d003      	beq.n	8005e26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005e26:	4a32      	ldr	r2, [pc, #200]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005e2c:	4b30      	ldr	r3, [pc, #192]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d003      	beq.n	8005e50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005e50:	4a27      	ldr	r2, [pc, #156]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005e56:	4b26      	ldr	r3, [pc, #152]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	43db      	mvns	r3, r3
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	4013      	ands	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e80:	4b1b      	ldr	r3, [pc, #108]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	43db      	mvns	r3, r3
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ea4:	4a12      	ldr	r2, [pc, #72]	@ (8005ef0 <HAL_GPIO_Init+0x334>)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3301      	adds	r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	2b0f      	cmp	r3, #15
 8005eb4:	f67f ae90 	bls.w	8005bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	3724      	adds	r7, #36	@ 0x24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	40013800 	.word	0x40013800
 8005ed0:	40020000 	.word	0x40020000
 8005ed4:	40020400 	.word	0x40020400
 8005ed8:	40020800 	.word	0x40020800
 8005edc:	40020c00 	.word	0x40020c00
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40021400 	.word	0x40021400
 8005ee8:	40021800 	.word	0x40021800
 8005eec:	40021c00 	.word	0x40021c00
 8005ef0:	40013c00 	.word	0x40013c00

08005ef4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	e0cd      	b.n	80060ac <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f10:	2201      	movs	r2, #1
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	f040 80bd 	bne.w	80060a6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005f2c:	4a65      	ldr	r2, [pc, #404]	@ (80060c4 <HAL_GPIO_DeInit+0x1d0>)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	089b      	lsrs	r3, r3, #2
 8005f32:	3302      	adds	r3, #2
 8005f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f38:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	220f      	movs	r2, #15
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a5d      	ldr	r2, [pc, #372]	@ (80060c8 <HAL_GPIO_DeInit+0x1d4>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d02b      	beq.n	8005fae <HAL_GPIO_DeInit+0xba>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a5c      	ldr	r2, [pc, #368]	@ (80060cc <HAL_GPIO_DeInit+0x1d8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d025      	beq.n	8005faa <HAL_GPIO_DeInit+0xb6>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a5b      	ldr	r2, [pc, #364]	@ (80060d0 <HAL_GPIO_DeInit+0x1dc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01f      	beq.n	8005fa6 <HAL_GPIO_DeInit+0xb2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a5a      	ldr	r2, [pc, #360]	@ (80060d4 <HAL_GPIO_DeInit+0x1e0>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d019      	beq.n	8005fa2 <HAL_GPIO_DeInit+0xae>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a59      	ldr	r2, [pc, #356]	@ (80060d8 <HAL_GPIO_DeInit+0x1e4>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_GPIO_DeInit+0xaa>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a58      	ldr	r2, [pc, #352]	@ (80060dc <HAL_GPIO_DeInit+0x1e8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00d      	beq.n	8005f9a <HAL_GPIO_DeInit+0xa6>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a57      	ldr	r2, [pc, #348]	@ (80060e0 <HAL_GPIO_DeInit+0x1ec>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d007      	beq.n	8005f96 <HAL_GPIO_DeInit+0xa2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a56      	ldr	r2, [pc, #344]	@ (80060e4 <HAL_GPIO_DeInit+0x1f0>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d101      	bne.n	8005f92 <HAL_GPIO_DeInit+0x9e>
 8005f8e:	2307      	movs	r3, #7
 8005f90:	e00e      	b.n	8005fb0 <HAL_GPIO_DeInit+0xbc>
 8005f92:	2308      	movs	r3, #8
 8005f94:	e00c      	b.n	8005fb0 <HAL_GPIO_DeInit+0xbc>
 8005f96:	2306      	movs	r3, #6
 8005f98:	e00a      	b.n	8005fb0 <HAL_GPIO_DeInit+0xbc>
 8005f9a:	2305      	movs	r3, #5
 8005f9c:	e008      	b.n	8005fb0 <HAL_GPIO_DeInit+0xbc>
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	e006      	b.n	8005fb0 <HAL_GPIO_DeInit+0xbc>
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e004      	b.n	8005fb0 <HAL_GPIO_DeInit+0xbc>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e002      	b.n	8005fb0 <HAL_GPIO_DeInit+0xbc>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_GPIO_DeInit+0xbc>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	f002 0203 	and.w	r2, r2, #3
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	4093      	lsls	r3, r2
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d132      	bne.n	8006026 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005fc0:	4b49      	ldr	r3, [pc, #292]	@ (80060e8 <HAL_GPIO_DeInit+0x1f4>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	4947      	ldr	r1, [pc, #284]	@ (80060e8 <HAL_GPIO_DeInit+0x1f4>)
 8005fca:	4013      	ands	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005fce:	4b46      	ldr	r3, [pc, #280]	@ (80060e8 <HAL_GPIO_DeInit+0x1f4>)
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	4944      	ldr	r1, [pc, #272]	@ (80060e8 <HAL_GPIO_DeInit+0x1f4>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005fdc:	4b42      	ldr	r3, [pc, #264]	@ (80060e8 <HAL_GPIO_DeInit+0x1f4>)
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	4940      	ldr	r1, [pc, #256]	@ (80060e8 <HAL_GPIO_DeInit+0x1f4>)
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005fea:	4b3f      	ldr	r3, [pc, #252]	@ (80060e8 <HAL_GPIO_DeInit+0x1f4>)
 8005fec:	689a      	ldr	r2, [r3, #8]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	493d      	ldr	r1, [pc, #244]	@ (80060e8 <HAL_GPIO_DeInit+0x1f4>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	220f      	movs	r2, #15
 8006002:	fa02 f303 	lsl.w	r3, r2, r3
 8006006:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006008:	4a2e      	ldr	r2, [pc, #184]	@ (80060c4 <HAL_GPIO_DeInit+0x1d0>)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	089b      	lsrs	r3, r3, #2
 800600e:	3302      	adds	r3, #2
 8006010:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	43da      	mvns	r2, r3
 8006018:	482a      	ldr	r0, [pc, #168]	@ (80060c4 <HAL_GPIO_DeInit+0x1d0>)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	400a      	ands	r2, r1
 8006020:	3302      	adds	r3, #2
 8006022:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	2103      	movs	r1, #3
 8006030:	fa01 f303 	lsl.w	r3, r1, r3
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	08da      	lsrs	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3208      	adds	r2, #8
 8006044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	220f      	movs	r2, #15
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	08d2      	lsrs	r2, r2, #3
 800605c:	4019      	ands	r1, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	3208      	adds	r2, #8
 8006062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	2103      	movs	r1, #3
 8006070:	fa01 f303 	lsl.w	r3, r1, r3
 8006074:	43db      	mvns	r3, r3
 8006076:	401a      	ands	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	2101      	movs	r1, #1
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689a      	ldr	r2, [r3, #8]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	2103      	movs	r1, #3
 800609a:	fa01 f303 	lsl.w	r3, r1, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	401a      	ands	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	3301      	adds	r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b0f      	cmp	r3, #15
 80060b0:	f67f af2e 	bls.w	8005f10 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40013800 	.word	0x40013800
 80060c8:	40020000 	.word	0x40020000
 80060cc:	40020400 	.word	0x40020400
 80060d0:	40020800 	.word	0x40020800
 80060d4:	40020c00 	.word	0x40020c00
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40021400 	.word	0x40021400
 80060e0:	40021800 	.word	0x40021800
 80060e4:	40021c00 	.word	0x40021c00
 80060e8:	40013c00 	.word	0x40013c00

080060ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	807b      	strh	r3, [r7, #2]
 80060f8:	4613      	mov	r3, r2
 80060fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060fc:	787b      	ldrb	r3, [r7, #1]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006102:	887a      	ldrh	r2, [r7, #2]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006108:	e003      	b.n	8006112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800610a:	887b      	ldrh	r3, [r7, #2]
 800610c:	041a      	lsls	r2, r3, #16
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	619a      	str	r2, [r3, #24]
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	4603      	mov	r3, r0
 8006128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800612a:	4b08      	ldr	r3, [pc, #32]	@ (800614c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800612c:	695a      	ldr	r2, [r3, #20]
 800612e:	88fb      	ldrh	r3, [r7, #6]
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d006      	beq.n	8006144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006136:	4a05      	ldr	r2, [pc, #20]	@ (800614c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fb ff1a 	bl	8001f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	40013c00 	.word	0x40013c00

08006150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e12b      	b.n	80063ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d106      	bne.n	800617c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7fe f860 	bl	800423c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2224      	movs	r2, #36	@ 0x24
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0201 	bic.w	r2, r2, #1
 8006192:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061b4:	f001 fbec 	bl	8007990 <HAL_RCC_GetPCLK1Freq>
 80061b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	4a81      	ldr	r2, [pc, #516]	@ (80063c4 <HAL_I2C_Init+0x274>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d807      	bhi.n	80061d4 <HAL_I2C_Init+0x84>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4a80      	ldr	r2, [pc, #512]	@ (80063c8 <HAL_I2C_Init+0x278>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	bf94      	ite	ls
 80061cc:	2301      	movls	r3, #1
 80061ce:	2300      	movhi	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e006      	b.n	80061e2 <HAL_I2C_Init+0x92>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4a7d      	ldr	r2, [pc, #500]	@ (80063cc <HAL_I2C_Init+0x27c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	bf94      	ite	ls
 80061dc:	2301      	movls	r3, #1
 80061de:	2300      	movhi	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e0e7      	b.n	80063ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a78      	ldr	r2, [pc, #480]	@ (80063d0 <HAL_I2C_Init+0x280>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	0c9b      	lsrs	r3, r3, #18
 80061f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	4a6a      	ldr	r2, [pc, #424]	@ (80063c4 <HAL_I2C_Init+0x274>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d802      	bhi.n	8006224 <HAL_I2C_Init+0xd4>
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	3301      	adds	r3, #1
 8006222:	e009      	b.n	8006238 <HAL_I2C_Init+0xe8>
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	4a69      	ldr	r2, [pc, #420]	@ (80063d4 <HAL_I2C_Init+0x284>)
 8006230:	fba2 2303 	umull	r2, r3, r2, r3
 8006234:	099b      	lsrs	r3, r3, #6
 8006236:	3301      	adds	r3, #1
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	430b      	orrs	r3, r1
 800623e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800624a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	495c      	ldr	r1, [pc, #368]	@ (80063c4 <HAL_I2C_Init+0x274>)
 8006254:	428b      	cmp	r3, r1
 8006256:	d819      	bhi.n	800628c <HAL_I2C_Init+0x13c>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	1e59      	subs	r1, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	005b      	lsls	r3, r3, #1
 8006262:	fbb1 f3f3 	udiv	r3, r1, r3
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800626c:	400b      	ands	r3, r1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <HAL_I2C_Init+0x138>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	1e59      	subs	r1, r3, #1
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006280:	3301      	adds	r3, #1
 8006282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006286:	e051      	b.n	800632c <HAL_I2C_Init+0x1dc>
 8006288:	2304      	movs	r3, #4
 800628a:	e04f      	b.n	800632c <HAL_I2C_Init+0x1dc>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d111      	bne.n	80062b8 <HAL_I2C_Init+0x168>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	1e58      	subs	r0, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6859      	ldr	r1, [r3, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	440b      	add	r3, r1
 80062a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062a6:	3301      	adds	r3, #1
 80062a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	bf0c      	ite	eq
 80062b0:	2301      	moveq	r3, #1
 80062b2:	2300      	movne	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	e012      	b.n	80062de <HAL_I2C_Init+0x18e>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	1e58      	subs	r0, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	0099      	lsls	r1, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ce:	3301      	adds	r3, #1
 80062d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_I2C_Init+0x196>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e022      	b.n	800632c <HAL_I2C_Init+0x1dc>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10e      	bne.n	800630c <HAL_I2C_Init+0x1bc>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1e58      	subs	r0, r3, #1
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6859      	ldr	r1, [r3, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	440b      	add	r3, r1
 80062fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006300:	3301      	adds	r3, #1
 8006302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800630a:	e00f      	b.n	800632c <HAL_I2C_Init+0x1dc>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	1e58      	subs	r0, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6859      	ldr	r1, [r3, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	0099      	lsls	r1, r3, #2
 800631c:	440b      	add	r3, r1
 800631e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006322:	3301      	adds	r3, #1
 8006324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006328:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800632c:	6879      	ldr	r1, [r7, #4]
 800632e:	6809      	ldr	r1, [r1, #0]
 8006330:	4313      	orrs	r3, r2
 8006332:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69da      	ldr	r2, [r3, #28]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800635a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6911      	ldr	r1, [r2, #16]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	68d2      	ldr	r2, [r2, #12]
 8006366:	4311      	orrs	r1, r2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6812      	ldr	r2, [r2, #0]
 800636c:	430b      	orrs	r3, r1
 800636e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	695a      	ldr	r2, [r3, #20]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0201 	orr.w	r2, r2, #1
 800639a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	000186a0 	.word	0x000186a0
 80063c8:	001e847f 	.word	0x001e847f
 80063cc:	003d08ff 	.word	0x003d08ff
 80063d0:	431bde83 	.word	0x431bde83
 80063d4:	10624dd3 	.word	0x10624dd3

080063d8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e021      	b.n	800642e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2224      	movs	r2, #36	@ 0x24
 80063ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0201 	bic.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7fe f856 	bl	80044b4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
	...

08006438 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af02      	add	r7, sp, #8
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	4608      	mov	r0, r1
 8006442:	4611      	mov	r1, r2
 8006444:	461a      	mov	r2, r3
 8006446:	4603      	mov	r3, r0
 8006448:	817b      	strh	r3, [r7, #10]
 800644a:	460b      	mov	r3, r1
 800644c:	813b      	strh	r3, [r7, #8]
 800644e:	4613      	mov	r3, r2
 8006450:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006452:	f7fe fe11 	bl	8005078 <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b20      	cmp	r3, #32
 8006462:	f040 80d9 	bne.w	8006618 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	2319      	movs	r3, #25
 800646c:	2201      	movs	r2, #1
 800646e:	496d      	ldr	r1, [pc, #436]	@ (8006624 <HAL_I2C_Mem_Write+0x1ec>)
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f000 fc7f 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
 800647e:	e0cc      	b.n	800661a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_I2C_Mem_Write+0x56>
 800648a:	2302      	movs	r3, #2
 800648c:	e0c5      	b.n	800661a <HAL_I2C_Mem_Write+0x1e2>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d007      	beq.n	80064b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2221      	movs	r2, #33	@ 0x21
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2240      	movs	r2, #64	@ 0x40
 80064d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a3a      	ldr	r2, [r7, #32]
 80064de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80064e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4a4d      	ldr	r2, [pc, #308]	@ (8006628 <HAL_I2C_Mem_Write+0x1f0>)
 80064f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064f6:	88f8      	ldrh	r0, [r7, #6]
 80064f8:	893a      	ldrh	r2, [r7, #8]
 80064fa:	8979      	ldrh	r1, [r7, #10]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	9301      	str	r3, [sp, #4]
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	4603      	mov	r3, r0
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 fab6 	bl	8006a78 <I2C_RequestMemoryWrite>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d052      	beq.n	80065b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e081      	b.n	800661a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006516:	697a      	ldr	r2, [r7, #20]
 8006518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fd00 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00d      	beq.n	8006542 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800652a:	2b04      	cmp	r3, #4
 800652c:	d107      	bne.n	800653e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800653c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e06b      	b.n	800661a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006546:	781a      	ldrb	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f003 0304 	and.w	r3, r3, #4
 800657c:	2b04      	cmp	r3, #4
 800657e:	d11b      	bne.n	80065b8 <HAL_I2C_Mem_Write+0x180>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006584:	2b00      	cmp	r3, #0
 8006586:	d017      	beq.n	80065b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658c:	781a      	ldrb	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a2:	3b01      	subs	r3, #1
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1aa      	bne.n	8006516 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fcec 	bl	8006fa2 <I2C_WaitOnBTFFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00d      	beq.n	80065ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d4:	2b04      	cmp	r3, #4
 80065d6:	d107      	bne.n	80065e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e016      	b.n	800661a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006614:	2300      	movs	r3, #0
 8006616:	e000      	b.n	800661a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006618:	2302      	movs	r3, #2
  }
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	00100002 	.word	0x00100002
 8006628:	ffff0000 	.word	0xffff0000

0800662c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08c      	sub	sp, #48	@ 0x30
 8006630:	af02      	add	r7, sp, #8
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	4608      	mov	r0, r1
 8006636:	4611      	mov	r1, r2
 8006638:	461a      	mov	r2, r3
 800663a:	4603      	mov	r3, r0
 800663c:	817b      	strh	r3, [r7, #10]
 800663e:	460b      	mov	r3, r1
 8006640:	813b      	strh	r3, [r7, #8]
 8006642:	4613      	mov	r3, r2
 8006644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006646:	f7fe fd17 	bl	8005078 <HAL_GetTick>
 800664a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006652:	b2db      	uxtb	r3, r3
 8006654:	2b20      	cmp	r3, #32
 8006656:	f040 8208 	bne.w	8006a6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	2319      	movs	r3, #25
 8006660:	2201      	movs	r2, #1
 8006662:	497b      	ldr	r1, [pc, #492]	@ (8006850 <HAL_I2C_Mem_Read+0x224>)
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 fb85 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006670:	2302      	movs	r3, #2
 8006672:	e1fb      	b.n	8006a6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_I2C_Mem_Read+0x56>
 800667e:	2302      	movs	r3, #2
 8006680:	e1f4      	b.n	8006a6c <HAL_I2C_Mem_Read+0x440>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b01      	cmp	r3, #1
 8006696:	d007      	beq.n	80066a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2222      	movs	r2, #34	@ 0x22
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2240      	movs	r2, #64	@ 0x40
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80066d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a5b      	ldr	r2, [pc, #364]	@ (8006854 <HAL_I2C_Mem_Read+0x228>)
 80066e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066ea:	88f8      	ldrh	r0, [r7, #6]
 80066ec:	893a      	ldrh	r2, [r7, #8]
 80066ee:	8979      	ldrh	r1, [r7, #10]
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	4603      	mov	r3, r0
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f000 fa52 	bl	8006ba4 <I2C_RequestMemoryRead>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e1b0      	b.n	8006a6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800670e:	2b00      	cmp	r3, #0
 8006710:	d113      	bne.n	800673a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006712:	2300      	movs	r3, #0
 8006714:	623b      	str	r3, [r7, #32]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	623b      	str	r3, [r7, #32]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	623b      	str	r3, [r7, #32]
 8006726:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	e184      	b.n	8006a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800673e:	2b01      	cmp	r3, #1
 8006740:	d11b      	bne.n	800677a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006752:	2300      	movs	r3, #0
 8006754:	61fb      	str	r3, [r7, #28]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	61fb      	str	r3, [r7, #28]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	61fb      	str	r3, [r7, #28]
 8006766:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e164      	b.n	8006a44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800677e:	2b02      	cmp	r3, #2
 8006780:	d11b      	bne.n	80067ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006790:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067a2:	2300      	movs	r3, #0
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	e144      	b.n	8006a44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80067d0:	e138      	b.n	8006a44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d6:	2b03      	cmp	r3, #3
 80067d8:	f200 80f1 	bhi.w	80069be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d123      	bne.n	800682c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 fc1b 	bl	8007024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e139      	b.n	8006a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691a      	ldr	r2, [r3, #16]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006814:	3b01      	subs	r3, #1
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800682a:	e10b      	b.n	8006a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006830:	2b02      	cmp	r3, #2
 8006832:	d14e      	bne.n	80068d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	2200      	movs	r2, #0
 800683c:	4906      	ldr	r1, [pc, #24]	@ (8006858 <HAL_I2C_Mem_Read+0x22c>)
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fa98 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d008      	beq.n	800685c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e10e      	b.n	8006a6c <HAL_I2C_Mem_Read+0x440>
 800684e:	bf00      	nop
 8006850:	00100002 	.word	0x00100002
 8006854:	ffff0000 	.word	0xffff0000
 8006858:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800686a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691a      	ldr	r2, [r3, #16]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006888:	3b01      	subs	r3, #1
 800688a:	b29a      	uxth	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006894:	b29b      	uxth	r3, r3
 8006896:	3b01      	subs	r3, #1
 8006898:	b29a      	uxth	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80068d0:	e0b8      	b.n	8006a44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80068d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d8:	2200      	movs	r2, #0
 80068da:	4966      	ldr	r1, [pc, #408]	@ (8006a74 <HAL_I2C_Mem_Read+0x448>)
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fa49 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e0bf      	b.n	8006a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691a      	ldr	r2, [r3, #16]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006924:	b29b      	uxth	r3, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006934:	2200      	movs	r2, #0
 8006936:	494f      	ldr	r1, [pc, #316]	@ (8006a74 <HAL_I2C_Mem_Read+0x448>)
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fa1b 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e091      	b.n	8006a6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	691a      	ldr	r2, [r3, #16]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006974:	3b01      	subs	r3, #1
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006980:	b29b      	uxth	r3, r3
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80069bc:	e042      	b.n	8006a44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fb2e 	bl	8007024 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e04c      	b.n	8006a6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ee:	3b01      	subs	r3, #1
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	3b01      	subs	r3, #1
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f003 0304 	and.w	r3, r3, #4
 8006a0e:	2b04      	cmp	r3, #4
 8006a10:	d118      	bne.n	8006a44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a24:	1c5a      	adds	r2, r3, #1
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f47f aec2 	bne.w	80067d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	e000      	b.n	8006a6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006a6a:	2302      	movs	r3, #2
  }
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3728      	adds	r7, #40	@ 0x28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	00010004 	.word	0x00010004

08006a78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	4608      	mov	r0, r1
 8006a82:	4611      	mov	r1, r2
 8006a84:	461a      	mov	r2, r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	817b      	strh	r3, [r7, #10]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	813b      	strh	r3, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006aa0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f960 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00d      	beq.n	8006ad6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac8:	d103      	bne.n	8006ad2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ad0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	e05f      	b.n	8006b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ad6:	897b      	ldrh	r3, [r7, #10]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ae4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	6a3a      	ldr	r2, [r7, #32]
 8006aea:	492d      	ldr	r1, [pc, #180]	@ (8006ba0 <I2C_RequestMemoryWrite+0x128>)
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f998 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e04c      	b.n	8006b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006afc:	2300      	movs	r3, #0
 8006afe:	617b      	str	r3, [r7, #20]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	617b      	str	r3, [r7, #20]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b14:	6a39      	ldr	r1, [r7, #32]
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fa02 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00d      	beq.n	8006b3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	d107      	bne.n	8006b3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e02b      	b.n	8006b96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d105      	bne.n	8006b50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b44:	893b      	ldrh	r3, [r7, #8]
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	611a      	str	r2, [r3, #16]
 8006b4e:	e021      	b.n	8006b94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b50:	893b      	ldrh	r3, [r7, #8]
 8006b52:	0a1b      	lsrs	r3, r3, #8
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	b2da      	uxtb	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b60:	6a39      	ldr	r1, [r7, #32]
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 f9dc 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00d      	beq.n	8006b8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d107      	bne.n	8006b86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e005      	b.n	8006b96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b8a:	893b      	ldrh	r3, [r7, #8]
 8006b8c:	b2da      	uxtb	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	00010002 	.word	0x00010002

08006ba4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	4608      	mov	r0, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	817b      	strh	r3, [r7, #10]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	813b      	strh	r3, [r7, #8]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bcc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006bdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be0:	9300      	str	r3, [sp, #0]
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f000 f8c2 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00d      	beq.n	8006c12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c04:	d103      	bne.n	8006c0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e0aa      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c12:	897b      	ldrh	r3, [r7, #10]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	461a      	mov	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	4952      	ldr	r1, [pc, #328]	@ (8006d70 <I2C_RequestMemoryRead+0x1cc>)
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f8fa 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e097      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c38:	2300      	movs	r3, #0
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c50:	6a39      	ldr	r1, [r7, #32]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f964 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d107      	bne.n	8006c76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e076      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d105      	bne.n	8006c8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c80:	893b      	ldrh	r3, [r7, #8]
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	611a      	str	r2, [r3, #16]
 8006c8a:	e021      	b.n	8006cd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c8c:	893b      	ldrh	r3, [r7, #8]
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c9c:	6a39      	ldr	r1, [r7, #32]
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 f93e 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00d      	beq.n	8006cc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d107      	bne.n	8006cc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e050      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cc6:	893b      	ldrh	r3, [r7, #8]
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd2:	6a39      	ldr	r1, [r7, #32]
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f923 	bl	8006f20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00d      	beq.n	8006cfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce4:	2b04      	cmp	r3, #4
 8006ce6:	d107      	bne.n	8006cf8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006cf6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e035      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 f82b 	bl	8006d74 <I2C_WaitOnFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00d      	beq.n	8006d40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d32:	d103      	bne.n	8006d3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e013      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d40:	897b      	ldrh	r3, [r7, #10]
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	b2da      	uxtb	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	4906      	ldr	r1, [pc, #24]	@ (8006d70 <I2C_RequestMemoryRead+0x1cc>)
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 f863 	bl	8006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	00010002 	.word	0x00010002

08006d74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d84:	e025      	b.n	8006dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d8c:	d021      	beq.n	8006dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d8e:	f7fe f973 	bl	8005078 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d302      	bcc.n	8006da4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d116      	bne.n	8006dd2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2220      	movs	r2, #32
 8006dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dbe:	f043 0220 	orr.w	r2, r3, #32
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e023      	b.n	8006e1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d10d      	bne.n	8006df8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	43da      	mvns	r2, r3
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4013      	ands	r3, r2
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bf0c      	ite	eq
 8006dee:	2301      	moveq	r3, #1
 8006df0:	2300      	movne	r3, #0
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	461a      	mov	r2, r3
 8006df6:	e00c      	b.n	8006e12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	43da      	mvns	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4013      	ands	r3, r2
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bf0c      	ite	eq
 8006e0a:	2301      	moveq	r3, #1
 8006e0c:	2300      	movne	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	461a      	mov	r2, r3
 8006e12:	79fb      	ldrb	r3, [r7, #7]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d0b6      	beq.n	8006d86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	607a      	str	r2, [r7, #4]
 8006e2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e30:	e051      	b.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e40:	d123      	bne.n	8006e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e76:	f043 0204 	orr.w	r2, r3, #4
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e046      	b.n	8006f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d021      	beq.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e92:	f7fe f8f1 	bl	8005078 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d116      	bne.n	8006ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec2:	f043 0220 	orr.w	r2, r3, #32
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e020      	b.n	8006f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d10c      	bne.n	8006efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	43da      	mvns	r2, r3
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4013      	ands	r3, r2
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	bf14      	ite	ne
 8006ef2:	2301      	movne	r3, #1
 8006ef4:	2300      	moveq	r3, #0
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	e00b      	b.n	8006f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	43da      	mvns	r2, r3
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	4013      	ands	r3, r2
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bf14      	ite	ne
 8006f0c:	2301      	movne	r3, #1
 8006f0e:	2300      	moveq	r3, #0
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d18d      	bne.n	8006e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f2c:	e02d      	b.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f000 f8ce 	bl	80070d0 <I2C_IsAcknowledgeFailed>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e02d      	b.n	8006f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f44:	d021      	beq.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f46:	f7fe f897 	bl	8005078 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d302      	bcc.n	8006f5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d116      	bne.n	8006f8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f76:	f043 0220 	orr.w	r2, r3, #32
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006f86:	2301      	movs	r3, #1
 8006f88:	e007      	b.n	8006f9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f94:	2b80      	cmp	r3, #128	@ 0x80
 8006f96:	d1ca      	bne.n	8006f2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006fae:	e02d      	b.n	800700c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f88d 	bl	80070d0 <I2C_IsAcknowledgeFailed>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e02d      	b.n	800701c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc6:	d021      	beq.n	800700c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc8:	f7fe f856 	bl	8005078 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d302      	bcc.n	8006fde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	f043 0220 	orr.w	r2, r3, #32
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e007      	b.n	800701c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b04      	cmp	r3, #4
 8007018:	d1ca      	bne.n	8006fb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007030:	e042      	b.n	80070b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	f003 0310 	and.w	r3, r3, #16
 800703c:	2b10      	cmp	r3, #16
 800703e:	d119      	bne.n	8007074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0210 	mvn.w	r2, #16
 8007048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2220      	movs	r2, #32
 8007054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e029      	b.n	80070c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007074:	f7fe f800 	bl	8005078 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	429a      	cmp	r2, r3
 8007082:	d302      	bcc.n	800708a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d116      	bne.n	80070b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070a4:	f043 0220 	orr.w	r2, r3, #32
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e007      	b.n	80070c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070c2:	2b40      	cmp	r3, #64	@ 0x40
 80070c4:	d1b5      	bne.n	8007032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e6:	d11b      	bne.n	8007120 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80070f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710c:	f043 0204 	orr.w	r2, r3, #4
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e267      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d075      	beq.n	800723a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800714e:	4b88      	ldr	r3, [pc, #544]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 030c 	and.w	r3, r3, #12
 8007156:	2b04      	cmp	r3, #4
 8007158:	d00c      	beq.n	8007174 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800715a:	4b85      	ldr	r3, [pc, #532]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007162:	2b08      	cmp	r3, #8
 8007164:	d112      	bne.n	800718c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007166:	4b82      	ldr	r3, [pc, #520]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800716e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007172:	d10b      	bne.n	800718c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007174:	4b7e      	ldr	r3, [pc, #504]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d05b      	beq.n	8007238 <HAL_RCC_OscConfig+0x108>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d157      	bne.n	8007238 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e242      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007194:	d106      	bne.n	80071a4 <HAL_RCC_OscConfig+0x74>
 8007196:	4b76      	ldr	r3, [pc, #472]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a75      	ldr	r2, [pc, #468]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 800719c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e01d      	b.n	80071e0 <HAL_RCC_OscConfig+0xb0>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071ac:	d10c      	bne.n	80071c8 <HAL_RCC_OscConfig+0x98>
 80071ae:	4b70      	ldr	r3, [pc, #448]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a6f      	ldr	r2, [pc, #444]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80071b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	4b6d      	ldr	r3, [pc, #436]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a6c      	ldr	r2, [pc, #432]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80071c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	e00b      	b.n	80071e0 <HAL_RCC_OscConfig+0xb0>
 80071c8:	4b69      	ldr	r3, [pc, #420]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a68      	ldr	r2, [pc, #416]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80071ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	4b66      	ldr	r3, [pc, #408]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a65      	ldr	r2, [pc, #404]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80071da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d013      	beq.n	8007210 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e8:	f7fd ff46 	bl	8005078 <HAL_GetTick>
 80071ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071ee:	e008      	b.n	8007202 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071f0:	f7fd ff42 	bl	8005078 <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b64      	cmp	r3, #100	@ 0x64
 80071fc:	d901      	bls.n	8007202 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e207      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007202:	4b5b      	ldr	r3, [pc, #364]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800720a:	2b00      	cmp	r3, #0
 800720c:	d0f0      	beq.n	80071f0 <HAL_RCC_OscConfig+0xc0>
 800720e:	e014      	b.n	800723a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007210:	f7fd ff32 	bl	8005078 <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007216:	e008      	b.n	800722a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007218:	f7fd ff2e 	bl	8005078 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	2b64      	cmp	r3, #100	@ 0x64
 8007224:	d901      	bls.n	800722a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007226:	2303      	movs	r3, #3
 8007228:	e1f3      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800722a:	4b51      	ldr	r3, [pc, #324]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1f0      	bne.n	8007218 <HAL_RCC_OscConfig+0xe8>
 8007236:	e000      	b.n	800723a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d063      	beq.n	800730e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007246:	4b4a      	ldr	r3, [pc, #296]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f003 030c 	and.w	r3, r3, #12
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00b      	beq.n	800726a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007252:	4b47      	ldr	r3, [pc, #284]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800725a:	2b08      	cmp	r3, #8
 800725c:	d11c      	bne.n	8007298 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800725e:	4b44      	ldr	r3, [pc, #272]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d116      	bne.n	8007298 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800726a:	4b41      	ldr	r3, [pc, #260]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d005      	beq.n	8007282 <HAL_RCC_OscConfig+0x152>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d001      	beq.n	8007282 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e1c7      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007282:	4b3b      	ldr	r3, [pc, #236]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	4937      	ldr	r1, [pc, #220]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007292:	4313      	orrs	r3, r2
 8007294:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007296:	e03a      	b.n	800730e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d020      	beq.n	80072e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072a0:	4b34      	ldr	r3, [pc, #208]	@ (8007374 <HAL_RCC_OscConfig+0x244>)
 80072a2:	2201      	movs	r2, #1
 80072a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072a6:	f7fd fee7 	bl	8005078 <HAL_GetTick>
 80072aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072ac:	e008      	b.n	80072c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072ae:	f7fd fee3 	bl	8005078 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d901      	bls.n	80072c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e1a8      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0f0      	beq.n	80072ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072cc:	4b28      	ldr	r3, [pc, #160]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4925      	ldr	r1, [pc, #148]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	600b      	str	r3, [r1, #0]
 80072e0:	e015      	b.n	800730e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072e2:	4b24      	ldr	r3, [pc, #144]	@ (8007374 <HAL_RCC_OscConfig+0x244>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e8:	f7fd fec6 	bl	8005078 <HAL_GetTick>
 80072ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072ee:	e008      	b.n	8007302 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072f0:	f7fd fec2 	bl	8005078 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	2b02      	cmp	r3, #2
 80072fc:	d901      	bls.n	8007302 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072fe:	2303      	movs	r3, #3
 8007300:	e187      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007302:	4b1b      	ldr	r3, [pc, #108]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f0      	bne.n	80072f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d036      	beq.n	8007388 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d016      	beq.n	8007350 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007322:	4b15      	ldr	r3, [pc, #84]	@ (8007378 <HAL_RCC_OscConfig+0x248>)
 8007324:	2201      	movs	r2, #1
 8007326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007328:	f7fd fea6 	bl	8005078 <HAL_GetTick>
 800732c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800732e:	e008      	b.n	8007342 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007330:	f7fd fea2 	bl	8005078 <HAL_GetTick>
 8007334:	4602      	mov	r2, r0
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b02      	cmp	r3, #2
 800733c:	d901      	bls.n	8007342 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e167      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007342:	4b0b      	ldr	r3, [pc, #44]	@ (8007370 <HAL_RCC_OscConfig+0x240>)
 8007344:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0f0      	beq.n	8007330 <HAL_RCC_OscConfig+0x200>
 800734e:	e01b      	b.n	8007388 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007350:	4b09      	ldr	r3, [pc, #36]	@ (8007378 <HAL_RCC_OscConfig+0x248>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007356:	f7fd fe8f 	bl	8005078 <HAL_GetTick>
 800735a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800735c:	e00e      	b.n	800737c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800735e:	f7fd fe8b 	bl	8005078 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d907      	bls.n	800737c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e150      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
 8007370:	40023800 	.word	0x40023800
 8007374:	42470000 	.word	0x42470000
 8007378:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800737c:	4b88      	ldr	r3, [pc, #544]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 800737e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007380:	f003 0302 	and.w	r3, r3, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1ea      	bne.n	800735e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 8097 	beq.w	80074c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007396:	2300      	movs	r3, #0
 8007398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800739a:	4b81      	ldr	r3, [pc, #516]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 800739c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800739e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10f      	bne.n	80073c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80073a6:	2300      	movs	r3, #0
 80073a8:	60bb      	str	r3, [r7, #8]
 80073aa:	4b7d      	ldr	r3, [pc, #500]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ae:	4a7c      	ldr	r2, [pc, #496]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 80073b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80073b6:	4b7a      	ldr	r3, [pc, #488]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073c2:	2301      	movs	r3, #1
 80073c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073c6:	4b77      	ldr	r3, [pc, #476]	@ (80075a4 <HAL_RCC_OscConfig+0x474>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d118      	bne.n	8007404 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073d2:	4b74      	ldr	r3, [pc, #464]	@ (80075a4 <HAL_RCC_OscConfig+0x474>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a73      	ldr	r2, [pc, #460]	@ (80075a4 <HAL_RCC_OscConfig+0x474>)
 80073d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073de:	f7fd fe4b 	bl	8005078 <HAL_GetTick>
 80073e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073e4:	e008      	b.n	80073f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073e6:	f7fd fe47 	bl	8005078 <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	1ad3      	subs	r3, r2, r3
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d901      	bls.n	80073f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073f4:	2303      	movs	r3, #3
 80073f6:	e10c      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f8:	4b6a      	ldr	r3, [pc, #424]	@ (80075a4 <HAL_RCC_OscConfig+0x474>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d0f0      	beq.n	80073e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d106      	bne.n	800741a <HAL_RCC_OscConfig+0x2ea>
 800740c:	4b64      	ldr	r3, [pc, #400]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 800740e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007410:	4a63      	ldr	r2, [pc, #396]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	6713      	str	r3, [r2, #112]	@ 0x70
 8007418:	e01c      	b.n	8007454 <HAL_RCC_OscConfig+0x324>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b05      	cmp	r3, #5
 8007420:	d10c      	bne.n	800743c <HAL_RCC_OscConfig+0x30c>
 8007422:	4b5f      	ldr	r3, [pc, #380]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 8007424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007426:	4a5e      	ldr	r2, [pc, #376]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 8007428:	f043 0304 	orr.w	r3, r3, #4
 800742c:	6713      	str	r3, [r2, #112]	@ 0x70
 800742e:	4b5c      	ldr	r3, [pc, #368]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 8007430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007432:	4a5b      	ldr	r2, [pc, #364]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 8007434:	f043 0301 	orr.w	r3, r3, #1
 8007438:	6713      	str	r3, [r2, #112]	@ 0x70
 800743a:	e00b      	b.n	8007454 <HAL_RCC_OscConfig+0x324>
 800743c:	4b58      	ldr	r3, [pc, #352]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 800743e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007440:	4a57      	ldr	r2, [pc, #348]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 8007442:	f023 0301 	bic.w	r3, r3, #1
 8007446:	6713      	str	r3, [r2, #112]	@ 0x70
 8007448:	4b55      	ldr	r3, [pc, #340]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 800744a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800744c:	4a54      	ldr	r2, [pc, #336]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 800744e:	f023 0304 	bic.w	r3, r3, #4
 8007452:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d015      	beq.n	8007488 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800745c:	f7fd fe0c 	bl	8005078 <HAL_GetTick>
 8007460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007462:	e00a      	b.n	800747a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007464:	f7fd fe08 	bl	8005078 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007472:	4293      	cmp	r3, r2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e0cb      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800747a:	4b49      	ldr	r3, [pc, #292]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 800747c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800747e:	f003 0302 	and.w	r3, r3, #2
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0ee      	beq.n	8007464 <HAL_RCC_OscConfig+0x334>
 8007486:	e014      	b.n	80074b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007488:	f7fd fdf6 	bl	8005078 <HAL_GetTick>
 800748c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800748e:	e00a      	b.n	80074a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007490:	f7fd fdf2 	bl	8005078 <HAL_GetTick>
 8007494:	4602      	mov	r2, r0
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	1ad3      	subs	r3, r2, r3
 800749a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800749e:	4293      	cmp	r3, r2
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e0b5      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074a6:	4b3e      	ldr	r3, [pc, #248]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 80074a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1ee      	bne.n	8007490 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d105      	bne.n	80074c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074b8:	4b39      	ldr	r3, [pc, #228]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 80074ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074bc:	4a38      	ldr	r2, [pc, #224]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 80074be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 80a1 	beq.w	8007610 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074ce:	4b34      	ldr	r3, [pc, #208]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 030c 	and.w	r3, r3, #12
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d05c      	beq.n	8007594 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d141      	bne.n	8007566 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e2:	4b31      	ldr	r3, [pc, #196]	@ (80075a8 <HAL_RCC_OscConfig+0x478>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e8:	f7fd fdc6 	bl	8005078 <HAL_GetTick>
 80074ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074f0:	f7fd fdc2 	bl	8005078 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e087      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007502:	4b27      	ldr	r3, [pc, #156]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f0      	bne.n	80074f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69da      	ldr	r2, [r3, #28]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751c:	019b      	lsls	r3, r3, #6
 800751e:	431a      	orrs	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007524:	085b      	lsrs	r3, r3, #1
 8007526:	3b01      	subs	r3, #1
 8007528:	041b      	lsls	r3, r3, #16
 800752a:	431a      	orrs	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	061b      	lsls	r3, r3, #24
 8007532:	491b      	ldr	r1, [pc, #108]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 8007534:	4313      	orrs	r3, r2
 8007536:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007538:	4b1b      	ldr	r3, [pc, #108]	@ (80075a8 <HAL_RCC_OscConfig+0x478>)
 800753a:	2201      	movs	r2, #1
 800753c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800753e:	f7fd fd9b 	bl	8005078 <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007546:	f7fd fd97 	bl	8005078 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e05c      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007558:	4b11      	ldr	r3, [pc, #68]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0f0      	beq.n	8007546 <HAL_RCC_OscConfig+0x416>
 8007564:	e054      	b.n	8007610 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007566:	4b10      	ldr	r3, [pc, #64]	@ (80075a8 <HAL_RCC_OscConfig+0x478>)
 8007568:	2200      	movs	r2, #0
 800756a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800756c:	f7fd fd84 	bl	8005078 <HAL_GetTick>
 8007570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007572:	e008      	b.n	8007586 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007574:	f7fd fd80 	bl	8005078 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	2b02      	cmp	r3, #2
 8007580:	d901      	bls.n	8007586 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e045      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007586:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <HAL_RCC_OscConfig+0x470>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1f0      	bne.n	8007574 <HAL_RCC_OscConfig+0x444>
 8007592:	e03d      	b.n	8007610 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d107      	bne.n	80075ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e038      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
 80075a0:	40023800 	.word	0x40023800
 80075a4:	40007000 	.word	0x40007000
 80075a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075ac:	4b1b      	ldr	r3, [pc, #108]	@ (800761c <HAL_RCC_OscConfig+0x4ec>)
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d028      	beq.n	800760c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d121      	bne.n	800760c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d11a      	bne.n	800760c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80075dc:	4013      	ands	r3, r2
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d111      	bne.n	800760c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075f2:	085b      	lsrs	r3, r3, #1
 80075f4:	3b01      	subs	r3, #1
 80075f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d107      	bne.n	800760c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007606:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007608:	429a      	cmp	r2, r3
 800760a:	d001      	beq.n	8007610 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e000      	b.n	8007612 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	40023800 	.word	0x40023800

08007620 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e0cc      	b.n	80077ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007634:	4b68      	ldr	r3, [pc, #416]	@ (80077d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0307 	and.w	r3, r3, #7
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d90c      	bls.n	800765c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007642:	4b65      	ldr	r3, [pc, #404]	@ (80077d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007644:	683a      	ldr	r2, [r7, #0]
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800764a:	4b63      	ldr	r3, [pc, #396]	@ (80077d8 <HAL_RCC_ClockConfig+0x1b8>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	429a      	cmp	r2, r3
 8007656:	d001      	beq.n	800765c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e0b8      	b.n	80077ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d020      	beq.n	80076aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0304 	and.w	r3, r3, #4
 8007670:	2b00      	cmp	r3, #0
 8007672:	d005      	beq.n	8007680 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007674:	4b59      	ldr	r3, [pc, #356]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	4a58      	ldr	r2, [pc, #352]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 800767a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800767e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b00      	cmp	r3, #0
 800768a:	d005      	beq.n	8007698 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800768c:	4b53      	ldr	r3, [pc, #332]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	4a52      	ldr	r2, [pc, #328]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 8007692:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007696:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007698:	4b50      	ldr	r3, [pc, #320]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	494d      	ldr	r1, [pc, #308]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d044      	beq.n	8007740 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d107      	bne.n	80076ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076be:	4b47      	ldr	r3, [pc, #284]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d119      	bne.n	80076fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e07f      	b.n	80077ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d003      	beq.n	80076de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d107      	bne.n	80076ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076de:	4b3f      	ldr	r3, [pc, #252]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d109      	bne.n	80076fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e06f      	b.n	80077ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ee:	4b3b      	ldr	r3, [pc, #236]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e067      	b.n	80077ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076fe:	4b37      	ldr	r3, [pc, #220]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f023 0203 	bic.w	r2, r3, #3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	4934      	ldr	r1, [pc, #208]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 800770c:	4313      	orrs	r3, r2
 800770e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007710:	f7fd fcb2 	bl	8005078 <HAL_GetTick>
 8007714:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007716:	e00a      	b.n	800772e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007718:	f7fd fcae 	bl	8005078 <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007726:	4293      	cmp	r3, r2
 8007728:	d901      	bls.n	800772e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e04f      	b.n	80077ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800772e:	4b2b      	ldr	r3, [pc, #172]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	f003 020c 	and.w	r2, r3, #12
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	429a      	cmp	r2, r3
 800773e:	d1eb      	bne.n	8007718 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007740:	4b25      	ldr	r3, [pc, #148]	@ (80077d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d20c      	bcs.n	8007768 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800774e:	4b22      	ldr	r3, [pc, #136]	@ (80077d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007756:	4b20      	ldr	r3, [pc, #128]	@ (80077d8 <HAL_RCC_ClockConfig+0x1b8>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d001      	beq.n	8007768 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e032      	b.n	80077ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0304 	and.w	r3, r3, #4
 8007770:	2b00      	cmp	r3, #0
 8007772:	d008      	beq.n	8007786 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007774:	4b19      	ldr	r3, [pc, #100]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4916      	ldr	r1, [pc, #88]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 8007782:	4313      	orrs	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f003 0308 	and.w	r3, r3, #8
 800778e:	2b00      	cmp	r3, #0
 8007790:	d009      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007792:	4b12      	ldr	r3, [pc, #72]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	00db      	lsls	r3, r3, #3
 80077a0:	490e      	ldr	r1, [pc, #56]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80077a6:	f000 f821 	bl	80077ec <HAL_RCC_GetSysClockFreq>
 80077aa:	4602      	mov	r2, r0
 80077ac:	4b0b      	ldr	r3, [pc, #44]	@ (80077dc <HAL_RCC_ClockConfig+0x1bc>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	091b      	lsrs	r3, r3, #4
 80077b2:	f003 030f 	and.w	r3, r3, #15
 80077b6:	490a      	ldr	r1, [pc, #40]	@ (80077e0 <HAL_RCC_ClockConfig+0x1c0>)
 80077b8:	5ccb      	ldrb	r3, [r1, r3]
 80077ba:	fa22 f303 	lsr.w	r3, r2, r3
 80077be:	4a09      	ldr	r2, [pc, #36]	@ (80077e4 <HAL_RCC_ClockConfig+0x1c4>)
 80077c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077c2:	4b09      	ldr	r3, [pc, #36]	@ (80077e8 <HAL_RCC_ClockConfig+0x1c8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fd fc12 	bl	8004ff0 <HAL_InitTick>

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40023c00 	.word	0x40023c00
 80077dc:	40023800 	.word	0x40023800
 80077e0:	0800c564 	.word	0x0800c564
 80077e4:	20000058 	.word	0x20000058
 80077e8:	2000005c 	.word	0x2000005c

080077ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077f0:	b090      	sub	sp, #64	@ 0x40
 80077f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f8:	2300      	movs	r3, #0
 80077fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077fc:	2300      	movs	r3, #0
 80077fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007804:	4b59      	ldr	r3, [pc, #356]	@ (800796c <HAL_RCC_GetSysClockFreq+0x180>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 030c 	and.w	r3, r3, #12
 800780c:	2b08      	cmp	r3, #8
 800780e:	d00d      	beq.n	800782c <HAL_RCC_GetSysClockFreq+0x40>
 8007810:	2b08      	cmp	r3, #8
 8007812:	f200 80a1 	bhi.w	8007958 <HAL_RCC_GetSysClockFreq+0x16c>
 8007816:	2b00      	cmp	r3, #0
 8007818:	d002      	beq.n	8007820 <HAL_RCC_GetSysClockFreq+0x34>
 800781a:	2b04      	cmp	r3, #4
 800781c:	d003      	beq.n	8007826 <HAL_RCC_GetSysClockFreq+0x3a>
 800781e:	e09b      	b.n	8007958 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007820:	4b53      	ldr	r3, [pc, #332]	@ (8007970 <HAL_RCC_GetSysClockFreq+0x184>)
 8007822:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007824:	e09b      	b.n	800795e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007826:	4b53      	ldr	r3, [pc, #332]	@ (8007974 <HAL_RCC_GetSysClockFreq+0x188>)
 8007828:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800782a:	e098      	b.n	800795e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800782c:	4b4f      	ldr	r3, [pc, #316]	@ (800796c <HAL_RCC_GetSysClockFreq+0x180>)
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007834:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007836:	4b4d      	ldr	r3, [pc, #308]	@ (800796c <HAL_RCC_GetSysClockFreq+0x180>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d028      	beq.n	8007894 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007842:	4b4a      	ldr	r3, [pc, #296]	@ (800796c <HAL_RCC_GetSysClockFreq+0x180>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	2200      	movs	r2, #0
 800784a:	623b      	str	r3, [r7, #32]
 800784c:	627a      	str	r2, [r7, #36]	@ 0x24
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007854:	2100      	movs	r1, #0
 8007856:	4b47      	ldr	r3, [pc, #284]	@ (8007974 <HAL_RCC_GetSysClockFreq+0x188>)
 8007858:	fb03 f201 	mul.w	r2, r3, r1
 800785c:	2300      	movs	r3, #0
 800785e:	fb00 f303 	mul.w	r3, r0, r3
 8007862:	4413      	add	r3, r2
 8007864:	4a43      	ldr	r2, [pc, #268]	@ (8007974 <HAL_RCC_GetSysClockFreq+0x188>)
 8007866:	fba0 1202 	umull	r1, r2, r0, r2
 800786a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800786c:	460a      	mov	r2, r1
 800786e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007872:	4413      	add	r3, r2
 8007874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007878:	2200      	movs	r2, #0
 800787a:	61bb      	str	r3, [r7, #24]
 800787c:	61fa      	str	r2, [r7, #28]
 800787e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007882:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007886:	f7f9 f983 	bl	8000b90 <__aeabi_uldivmod>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4613      	mov	r3, r2
 8007890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007892:	e053      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007894:	4b35      	ldr	r3, [pc, #212]	@ (800796c <HAL_RCC_GetSysClockFreq+0x180>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	099b      	lsrs	r3, r3, #6
 800789a:	2200      	movs	r2, #0
 800789c:	613b      	str	r3, [r7, #16]
 800789e:	617a      	str	r2, [r7, #20]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80078a6:	f04f 0b00 	mov.w	fp, #0
 80078aa:	4652      	mov	r2, sl
 80078ac:	465b      	mov	r3, fp
 80078ae:	f04f 0000 	mov.w	r0, #0
 80078b2:	f04f 0100 	mov.w	r1, #0
 80078b6:	0159      	lsls	r1, r3, #5
 80078b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078bc:	0150      	lsls	r0, r2, #5
 80078be:	4602      	mov	r2, r0
 80078c0:	460b      	mov	r3, r1
 80078c2:	ebb2 080a 	subs.w	r8, r2, sl
 80078c6:	eb63 090b 	sbc.w	r9, r3, fp
 80078ca:	f04f 0200 	mov.w	r2, #0
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80078d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80078da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80078de:	ebb2 0408 	subs.w	r4, r2, r8
 80078e2:	eb63 0509 	sbc.w	r5, r3, r9
 80078e6:	f04f 0200 	mov.w	r2, #0
 80078ea:	f04f 0300 	mov.w	r3, #0
 80078ee:	00eb      	lsls	r3, r5, #3
 80078f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078f4:	00e2      	lsls	r2, r4, #3
 80078f6:	4614      	mov	r4, r2
 80078f8:	461d      	mov	r5, r3
 80078fa:	eb14 030a 	adds.w	r3, r4, sl
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	eb45 030b 	adc.w	r3, r5, fp
 8007904:	607b      	str	r3, [r7, #4]
 8007906:	f04f 0200 	mov.w	r2, #0
 800790a:	f04f 0300 	mov.w	r3, #0
 800790e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007912:	4629      	mov	r1, r5
 8007914:	028b      	lsls	r3, r1, #10
 8007916:	4621      	mov	r1, r4
 8007918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800791c:	4621      	mov	r1, r4
 800791e:	028a      	lsls	r2, r1, #10
 8007920:	4610      	mov	r0, r2
 8007922:	4619      	mov	r1, r3
 8007924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007926:	2200      	movs	r2, #0
 8007928:	60bb      	str	r3, [r7, #8]
 800792a:	60fa      	str	r2, [r7, #12]
 800792c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007930:	f7f9 f92e 	bl	8000b90 <__aeabi_uldivmod>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4613      	mov	r3, r2
 800793a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800793c:	4b0b      	ldr	r3, [pc, #44]	@ (800796c <HAL_RCC_GetSysClockFreq+0x180>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	0c1b      	lsrs	r3, r3, #16
 8007942:	f003 0303 	and.w	r3, r3, #3
 8007946:	3301      	adds	r3, #1
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800794c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800794e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007950:	fbb2 f3f3 	udiv	r3, r2, r3
 8007954:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007956:	e002      	b.n	800795e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007958:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <HAL_RCC_GetSysClockFreq+0x184>)
 800795a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800795c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800795e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007960:	4618      	mov	r0, r3
 8007962:	3740      	adds	r7, #64	@ 0x40
 8007964:	46bd      	mov	sp, r7
 8007966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800796a:	bf00      	nop
 800796c:	40023800 	.word	0x40023800
 8007970:	00f42400 	.word	0x00f42400
 8007974:	017d7840 	.word	0x017d7840

08007978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800797c:	4b03      	ldr	r3, [pc, #12]	@ (800798c <HAL_RCC_GetHCLKFreq+0x14>)
 800797e:	681b      	ldr	r3, [r3, #0]
}
 8007980:	4618      	mov	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000058 	.word	0x20000058

08007990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007994:	f7ff fff0 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	4b05      	ldr	r3, [pc, #20]	@ (80079b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	0a9b      	lsrs	r3, r3, #10
 80079a0:	f003 0307 	and.w	r3, r3, #7
 80079a4:	4903      	ldr	r1, [pc, #12]	@ (80079b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079a6:	5ccb      	ldrb	r3, [r1, r3]
 80079a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	40023800 	.word	0x40023800
 80079b4:	0800c574 	.word	0x0800c574

080079b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80079bc:	f7ff ffdc 	bl	8007978 <HAL_RCC_GetHCLKFreq>
 80079c0:	4602      	mov	r2, r0
 80079c2:	4b05      	ldr	r3, [pc, #20]	@ (80079d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	0b5b      	lsrs	r3, r3, #13
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	4903      	ldr	r1, [pc, #12]	@ (80079dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80079ce:	5ccb      	ldrb	r3, [r1, r3]
 80079d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	40023800 	.word	0x40023800
 80079dc:	0800c574 	.word	0x0800c574

080079e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e07b      	b.n	8007aea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d108      	bne.n	8007a0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a02:	d009      	beq.n	8007a18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	61da      	str	r2, [r3, #28]
 8007a0a:	e005      	b.n	8007a18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f7fc fd9e 	bl	8004574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007a60:	431a      	orrs	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	431a      	orrs	r2, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	69db      	ldr	r3, [r3, #28]
 8007a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a1b      	ldr	r3, [r3, #32]
 8007a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a9c:	ea42 0103 	orr.w	r1, r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	0c1b      	lsrs	r3, r3, #16
 8007ab6:	f003 0104 	and.w	r1, r3, #4
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abe:	f003 0210 	and.w	r2, r3, #16
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	69da      	ldr	r2, [r3, #28]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ad8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e041      	b.n	8007b88 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d106      	bne.n	8007b1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7fc fd73 	bl	8004604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4610      	mov	r0, r2
 8007b32:	f000 fcd7 	bl	80084e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2201      	movs	r2, #1
 8007b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2201      	movs	r2, #1
 8007b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d001      	beq.n	8007ba8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e046      	b.n	8007c36 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a23      	ldr	r2, [pc, #140]	@ (8007c44 <HAL_TIM_Base_Start+0xb4>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d022      	beq.n	8007c00 <HAL_TIM_Base_Start+0x70>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc2:	d01d      	beq.n	8007c00 <HAL_TIM_Base_Start+0x70>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8007c48 <HAL_TIM_Base_Start+0xb8>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d018      	beq.n	8007c00 <HAL_TIM_Base_Start+0x70>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8007c4c <HAL_TIM_Base_Start+0xbc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d013      	beq.n	8007c00 <HAL_TIM_Base_Start+0x70>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8007c50 <HAL_TIM_Base_Start+0xc0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00e      	beq.n	8007c00 <HAL_TIM_Base_Start+0x70>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a1b      	ldr	r2, [pc, #108]	@ (8007c54 <HAL_TIM_Base_Start+0xc4>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d009      	beq.n	8007c00 <HAL_TIM_Base_Start+0x70>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a19      	ldr	r2, [pc, #100]	@ (8007c58 <HAL_TIM_Base_Start+0xc8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d004      	beq.n	8007c00 <HAL_TIM_Base_Start+0x70>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a18      	ldr	r2, [pc, #96]	@ (8007c5c <HAL_TIM_Base_Start+0xcc>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d111      	bne.n	8007c24 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f003 0307 	and.w	r3, r3, #7
 8007c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b06      	cmp	r3, #6
 8007c10:	d010      	beq.n	8007c34 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0201 	orr.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c22:	e007      	b.n	8007c34 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f042 0201 	orr.w	r2, r2, #1
 8007c32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40010000 	.word	0x40010000
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40000800 	.word	0x40000800
 8007c50:	40000c00 	.word	0x40000c00
 8007c54:	40010400 	.word	0x40010400
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40001800 	.word	0x40001800

08007c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d001      	beq.n	8007c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e04e      	b.n	8007d16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68da      	ldr	r2, [r3, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a23      	ldr	r2, [pc, #140]	@ (8007d24 <HAL_TIM_Base_Start_IT+0xc4>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d022      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0x80>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca2:	d01d      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0x80>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8007d28 <HAL_TIM_Base_Start_IT+0xc8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d018      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0x80>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d2c <HAL_TIM_Base_Start_IT+0xcc>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d013      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0x80>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8007d30 <HAL_TIM_Base_Start_IT+0xd0>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d00e      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0x80>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8007d34 <HAL_TIM_Base_Start_IT+0xd4>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d009      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0x80>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a19      	ldr	r2, [pc, #100]	@ (8007d38 <HAL_TIM_Base_Start_IT+0xd8>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d004      	beq.n	8007ce0 <HAL_TIM_Base_Start_IT+0x80>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a18      	ldr	r2, [pc, #96]	@ (8007d3c <HAL_TIM_Base_Start_IT+0xdc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d111      	bne.n	8007d04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2b06      	cmp	r3, #6
 8007cf0:	d010      	beq.n	8007d14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0201 	orr.w	r2, r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d02:	e007      	b.n	8007d14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0201 	orr.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3714      	adds	r7, #20
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr
 8007d22:	bf00      	nop
 8007d24:	40010000 	.word	0x40010000
 8007d28:	40000400 	.word	0x40000400
 8007d2c:	40000800 	.word	0x40000800
 8007d30:	40000c00 	.word	0x40000c00
 8007d34:	40010400 	.word	0x40010400
 8007d38:	40014000 	.word	0x40014000
 8007d3c:	40001800 	.word	0x40001800

08007d40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e041      	b.n	8007dd6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d106      	bne.n	8007d6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fc fc9e 	bl	80046a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3304      	adds	r3, #4
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	4610      	mov	r0, r2
 8007d80:	f000 fbb0 	bl	80084e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d109      	bne.n	8007e04 <HAL_TIM_PWM_Start+0x24>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	bf14      	ite	ne
 8007dfc:	2301      	movne	r3, #1
 8007dfe:	2300      	moveq	r3, #0
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	e022      	b.n	8007e4a <HAL_TIM_PWM_Start+0x6a>
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	d109      	bne.n	8007e1e <HAL_TIM_PWM_Start+0x3e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	bf14      	ite	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	2300      	moveq	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	e015      	b.n	8007e4a <HAL_TIM_PWM_Start+0x6a>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d109      	bne.n	8007e38 <HAL_TIM_PWM_Start+0x58>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	bf14      	ite	ne
 8007e30:	2301      	movne	r3, #1
 8007e32:	2300      	moveq	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	e008      	b.n	8007e4a <HAL_TIM_PWM_Start+0x6a>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	bf14      	ite	ne
 8007e44:	2301      	movne	r3, #1
 8007e46:	2300      	moveq	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e07c      	b.n	8007f4c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d104      	bne.n	8007e62 <HAL_TIM_PWM_Start+0x82>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e60:	e013      	b.n	8007e8a <HAL_TIM_PWM_Start+0xaa>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d104      	bne.n	8007e72 <HAL_TIM_PWM_Start+0x92>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2202      	movs	r2, #2
 8007e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e70:	e00b      	b.n	8007e8a <HAL_TIM_PWM_Start+0xaa>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b08      	cmp	r3, #8
 8007e76:	d104      	bne.n	8007e82 <HAL_TIM_PWM_Start+0xa2>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e80:	e003      	b.n	8007e8a <HAL_TIM_PWM_Start+0xaa>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2202      	movs	r2, #2
 8007e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 fe10 	bl	8008ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a2d      	ldr	r2, [pc, #180]	@ (8007f54 <HAL_TIM_PWM_Start+0x174>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d004      	beq.n	8007eac <HAL_TIM_PWM_Start+0xcc>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f58 <HAL_TIM_PWM_Start+0x178>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d101      	bne.n	8007eb0 <HAL_TIM_PWM_Start+0xd0>
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <HAL_TIM_PWM_Start+0xd2>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a22      	ldr	r2, [pc, #136]	@ (8007f54 <HAL_TIM_PWM_Start+0x174>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d022      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed8:	d01d      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1f      	ldr	r2, [pc, #124]	@ (8007f5c <HAL_TIM_PWM_Start+0x17c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d018      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f60 <HAL_TIM_PWM_Start+0x180>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d013      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f64 <HAL_TIM_PWM_Start+0x184>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00e      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a16      	ldr	r2, [pc, #88]	@ (8007f58 <HAL_TIM_PWM_Start+0x178>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d009      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a18      	ldr	r2, [pc, #96]	@ (8007f68 <HAL_TIM_PWM_Start+0x188>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d004      	beq.n	8007f16 <HAL_TIM_PWM_Start+0x136>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a16      	ldr	r2, [pc, #88]	@ (8007f6c <HAL_TIM_PWM_Start+0x18c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d111      	bne.n	8007f3a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f003 0307 	and.w	r3, r3, #7
 8007f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b06      	cmp	r3, #6
 8007f26:	d010      	beq.n	8007f4a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0201 	orr.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f38:	e007      	b.n	8007f4a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f042 0201 	orr.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	40010000 	.word	0x40010000
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40000400 	.word	0x40000400
 8007f60:	40000800 	.word	0x40000800
 8007f64:	40000c00 	.word	0x40000c00
 8007f68:	40014000 	.word	0x40014000
 8007f6c:	40001800 	.word	0x40001800

08007f70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d122      	bne.n	8007fcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d11b      	bne.n	8007fcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f06f 0202 	mvn.w	r2, #2
 8007f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	f003 0303 	and.w	r3, r3, #3
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa77 	bl	80084a6 <HAL_TIM_IC_CaptureCallback>
 8007fb8:	e005      	b.n	8007fc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa69 	bl	8008492 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fa7a 	bl	80084ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d122      	bne.n	8008020 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f003 0304 	and.w	r3, r3, #4
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	d11b      	bne.n	8008020 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f06f 0204 	mvn.w	r2, #4
 8007ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699b      	ldr	r3, [r3, #24]
 8007ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fa4d 	bl	80084a6 <HAL_TIM_IC_CaptureCallback>
 800800c:	e005      	b.n	800801a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 fa3f 	bl	8008492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fa50 	bl	80084ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f003 0308 	and.w	r3, r3, #8
 800802a:	2b08      	cmp	r3, #8
 800802c:	d122      	bne.n	8008074 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f003 0308 	and.w	r3, r3, #8
 8008038:	2b08      	cmp	r3, #8
 800803a:	d11b      	bne.n	8008074 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f06f 0208 	mvn.w	r2, #8
 8008044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2204      	movs	r2, #4
 800804a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 fa23 	bl	80084a6 <HAL_TIM_IC_CaptureCallback>
 8008060:	e005      	b.n	800806e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa15 	bl	8008492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fa26 	bl	80084ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	2b10      	cmp	r3, #16
 8008080:	d122      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b10      	cmp	r3, #16
 800808e:	d11b      	bne.n	80080c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f06f 0210 	mvn.w	r2, #16
 8008098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2208      	movs	r2, #8
 800809e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f9f9 	bl	80084a6 <HAL_TIM_IC_CaptureCallback>
 80080b4:	e005      	b.n	80080c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f9eb 	bl	8008492 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f9fc 	bl	80084ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d10e      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d107      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0201 	mvn.w	r2, #1
 80080ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f7fa fdb4 	bl	8002c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fe:	2b80      	cmp	r3, #128	@ 0x80
 8008100:	d10e      	bne.n	8008120 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800810c:	2b80      	cmp	r3, #128	@ 0x80
 800810e:	d107      	bne.n	8008120 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fd78 	bl	8008c10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800812a:	2b40      	cmp	r3, #64	@ 0x40
 800812c:	d10e      	bne.n	800814c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008138:	2b40      	cmp	r3, #64	@ 0x40
 800813a:	d107      	bne.n	800814c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9c1 	bl	80084ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0320 	and.w	r3, r3, #32
 8008156:	2b20      	cmp	r3, #32
 8008158:	d10e      	bne.n	8008178 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b20      	cmp	r3, #32
 8008166:	d107      	bne.n	8008178 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0220 	mvn.w	r2, #32
 8008170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fd42 	bl	8008bfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008178:	bf00      	nop
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008196:	2b01      	cmp	r3, #1
 8008198:	d101      	bne.n	800819e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800819a:	2302      	movs	r3, #2
 800819c:	e0ae      	b.n	80082fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2b0c      	cmp	r3, #12
 80081aa:	f200 809f 	bhi.w	80082ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80081ae:	a201      	add	r2, pc, #4	@ (adr r2, 80081b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80081b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b4:	080081e9 	.word	0x080081e9
 80081b8:	080082ed 	.word	0x080082ed
 80081bc:	080082ed 	.word	0x080082ed
 80081c0:	080082ed 	.word	0x080082ed
 80081c4:	08008229 	.word	0x08008229
 80081c8:	080082ed 	.word	0x080082ed
 80081cc:	080082ed 	.word	0x080082ed
 80081d0:	080082ed 	.word	0x080082ed
 80081d4:	0800826b 	.word	0x0800826b
 80081d8:	080082ed 	.word	0x080082ed
 80081dc:	080082ed 	.word	0x080082ed
 80081e0:	080082ed 	.word	0x080082ed
 80081e4:	080082ab 	.word	0x080082ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fa18 	bl	8008624 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f042 0208 	orr.w	r2, r2, #8
 8008202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0204 	bic.w	r2, r2, #4
 8008212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6999      	ldr	r1, [r3, #24]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	691a      	ldr	r2, [r3, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	430a      	orrs	r2, r1
 8008224:	619a      	str	r2, [r3, #24]
      break;
 8008226:	e064      	b.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68b9      	ldr	r1, [r7, #8]
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fa68 	bl	8008704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699a      	ldr	r2, [r3, #24]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008242:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	699a      	ldr	r2, [r3, #24]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008252:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6999      	ldr	r1, [r3, #24]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	021a      	lsls	r2, r3, #8
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	619a      	str	r2, [r3, #24]
      break;
 8008268:	e043      	b.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	4618      	mov	r0, r3
 8008272:	f000 fabd 	bl	80087f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	69da      	ldr	r2, [r3, #28]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0208 	orr.w	r2, r2, #8
 8008284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0204 	bic.w	r2, r2, #4
 8008294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69d9      	ldr	r1, [r3, #28]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	691a      	ldr	r2, [r3, #16]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	430a      	orrs	r2, r1
 80082a6:	61da      	str	r2, [r3, #28]
      break;
 80082a8:	e023      	b.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68b9      	ldr	r1, [r7, #8]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fb11 	bl	80088d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69da      	ldr	r2, [r3, #28]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	69da      	ldr	r2, [r3, #28]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69d9      	ldr	r1, [r3, #28]
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	021a      	lsls	r2, r3, #8
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	61da      	str	r2, [r3, #28]
      break;
 80082ea:	e002      	b.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	75fb      	strb	r3, [r7, #23]
      break;
 80082f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_TIM_ConfigClockSource+0x1c>
 800831c:	2302      	movs	r3, #2
 800831e:	e0b4      	b.n	800848a <HAL_TIM_ConfigClockSource+0x186>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800833e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008346:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008358:	d03e      	beq.n	80083d8 <HAL_TIM_ConfigClockSource+0xd4>
 800835a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800835e:	f200 8087 	bhi.w	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008366:	f000 8086 	beq.w	8008476 <HAL_TIM_ConfigClockSource+0x172>
 800836a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800836e:	d87f      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008370:	2b70      	cmp	r3, #112	@ 0x70
 8008372:	d01a      	beq.n	80083aa <HAL_TIM_ConfigClockSource+0xa6>
 8008374:	2b70      	cmp	r3, #112	@ 0x70
 8008376:	d87b      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008378:	2b60      	cmp	r3, #96	@ 0x60
 800837a:	d050      	beq.n	800841e <HAL_TIM_ConfigClockSource+0x11a>
 800837c:	2b60      	cmp	r3, #96	@ 0x60
 800837e:	d877      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008380:	2b50      	cmp	r3, #80	@ 0x50
 8008382:	d03c      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0xfa>
 8008384:	2b50      	cmp	r3, #80	@ 0x50
 8008386:	d873      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008388:	2b40      	cmp	r3, #64	@ 0x40
 800838a:	d058      	beq.n	800843e <HAL_TIM_ConfigClockSource+0x13a>
 800838c:	2b40      	cmp	r3, #64	@ 0x40
 800838e:	d86f      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008390:	2b30      	cmp	r3, #48	@ 0x30
 8008392:	d064      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x15a>
 8008394:	2b30      	cmp	r3, #48	@ 0x30
 8008396:	d86b      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 8008398:	2b20      	cmp	r3, #32
 800839a:	d060      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x15a>
 800839c:	2b20      	cmp	r3, #32
 800839e:	d867      	bhi.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d05c      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x15a>
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d05a      	beq.n	800845e <HAL_TIM_ConfigClockSource+0x15a>
 80083a8:	e062      	b.n	8008470 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	6899      	ldr	r1, [r3, #8]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f000 fb5d 	bl	8008a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80083cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	609a      	str	r2, [r3, #8]
      break;
 80083d6:	e04f      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	6899      	ldr	r1, [r3, #8]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f000 fb46 	bl	8008a78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80083fa:	609a      	str	r2, [r3, #8]
      break;
 80083fc:	e03c      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6859      	ldr	r1, [r3, #4]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	461a      	mov	r2, r3
 800840c:	f000 faba 	bl	8008984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2150      	movs	r1, #80	@ 0x50
 8008416:	4618      	mov	r0, r3
 8008418:	f000 fb13 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 800841c:	e02c      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6859      	ldr	r1, [r3, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	461a      	mov	r2, r3
 800842c:	f000 fad9 	bl	80089e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2160      	movs	r1, #96	@ 0x60
 8008436:	4618      	mov	r0, r3
 8008438:	f000 fb03 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 800843c:	e01c      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6818      	ldr	r0, [r3, #0]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	6859      	ldr	r1, [r3, #4]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	461a      	mov	r2, r3
 800844c:	f000 fa9a 	bl	8008984 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2140      	movs	r1, #64	@ 0x40
 8008456:	4618      	mov	r0, r3
 8008458:	f000 faf3 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 800845c:	e00c      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f000 faea 	bl	8008a42 <TIM_ITRx_SetConfig>
      break;
 800846e:	e003      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	73fb      	strb	r3, [r7, #15]
      break;
 8008474:	e000      	b.n	8008478 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008476:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008488:	7bfb      	ldrb	r3, [r7, #15]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr

080084ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a40      	ldr	r2, [pc, #256]	@ (80085f8 <TIM_Base_SetConfig+0x114>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d013      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008502:	d00f      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a3d      	ldr	r2, [pc, #244]	@ (80085fc <TIM_Base_SetConfig+0x118>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00b      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	4a3c      	ldr	r2, [pc, #240]	@ (8008600 <TIM_Base_SetConfig+0x11c>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d007      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4a3b      	ldr	r2, [pc, #236]	@ (8008604 <TIM_Base_SetConfig+0x120>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d003      	beq.n	8008524 <TIM_Base_SetConfig+0x40>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4a3a      	ldr	r2, [pc, #232]	@ (8008608 <TIM_Base_SetConfig+0x124>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d108      	bne.n	8008536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800852a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4313      	orrs	r3, r2
 8008534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a2f      	ldr	r2, [pc, #188]	@ (80085f8 <TIM_Base_SetConfig+0x114>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d02b      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008544:	d027      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a2c      	ldr	r2, [pc, #176]	@ (80085fc <TIM_Base_SetConfig+0x118>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d023      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a2b      	ldr	r2, [pc, #172]	@ (8008600 <TIM_Base_SetConfig+0x11c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d01f      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	4a2a      	ldr	r2, [pc, #168]	@ (8008604 <TIM_Base_SetConfig+0x120>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d01b      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4a29      	ldr	r2, [pc, #164]	@ (8008608 <TIM_Base_SetConfig+0x124>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d017      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a28      	ldr	r2, [pc, #160]	@ (800860c <TIM_Base_SetConfig+0x128>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d013      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	4a27      	ldr	r2, [pc, #156]	@ (8008610 <TIM_Base_SetConfig+0x12c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d00f      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a26      	ldr	r2, [pc, #152]	@ (8008614 <TIM_Base_SetConfig+0x130>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d00b      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	4a25      	ldr	r2, [pc, #148]	@ (8008618 <TIM_Base_SetConfig+0x134>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d007      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a24      	ldr	r2, [pc, #144]	@ (800861c <TIM_Base_SetConfig+0x138>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_Base_SetConfig+0xb2>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a23      	ldr	r2, [pc, #140]	@ (8008620 <TIM_Base_SetConfig+0x13c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d108      	bne.n	80085a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800859c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a0a      	ldr	r2, [pc, #40]	@ (80085f8 <TIM_Base_SetConfig+0x114>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d003      	beq.n	80085dc <TIM_Base_SetConfig+0xf8>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008608 <TIM_Base_SetConfig+0x124>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d103      	bne.n	80085e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	691a      	ldr	r2, [r3, #16]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	615a      	str	r2, [r3, #20]
}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	40010000 	.word	0x40010000
 80085fc:	40000400 	.word	0x40000400
 8008600:	40000800 	.word	0x40000800
 8008604:	40000c00 	.word	0x40000c00
 8008608:	40010400 	.word	0x40010400
 800860c:	40014000 	.word	0x40014000
 8008610:	40014400 	.word	0x40014400
 8008614:	40014800 	.word	0x40014800
 8008618:	40001800 	.word	0x40001800
 800861c:	40001c00 	.word	0x40001c00
 8008620:	40002000 	.word	0x40002000

08008624 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	f023 0201 	bic.w	r2, r3, #1
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	685b      	ldr	r3, [r3, #4]
 8008644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f023 0303 	bic.w	r3, r3, #3
 800865a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4313      	orrs	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f023 0302 	bic.w	r3, r3, #2
 800866c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a20      	ldr	r2, [pc, #128]	@ (80086fc <TIM_OC1_SetConfig+0xd8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d003      	beq.n	8008688 <TIM_OC1_SetConfig+0x64>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a1f      	ldr	r2, [pc, #124]	@ (8008700 <TIM_OC1_SetConfig+0xdc>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d10c      	bne.n	80086a2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f023 0308 	bic.w	r3, r3, #8
 800868e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	68db      	ldr	r3, [r3, #12]
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f023 0304 	bic.w	r3, r3, #4
 80086a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a15      	ldr	r2, [pc, #84]	@ (80086fc <TIM_OC1_SetConfig+0xd8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d003      	beq.n	80086b2 <TIM_OC1_SetConfig+0x8e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a14      	ldr	r2, [pc, #80]	@ (8008700 <TIM_OC1_SetConfig+0xdc>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d111      	bne.n	80086d6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	621a      	str	r2, [r3, #32]
}
 80086f0:	bf00      	nop
 80086f2:	371c      	adds	r7, #28
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	40010000 	.word	0x40010000
 8008700:	40010400 	.word	0x40010400

08008704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a1b      	ldr	r3, [r3, #32]
 8008712:	f023 0210 	bic.w	r2, r3, #16
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800873a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	021b      	lsls	r3, r3, #8
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4313      	orrs	r3, r2
 8008746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	f023 0320 	bic.w	r3, r3, #32
 800874e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	011b      	lsls	r3, r3, #4
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	4313      	orrs	r3, r2
 800875a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a22      	ldr	r2, [pc, #136]	@ (80087e8 <TIM_OC2_SetConfig+0xe4>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d003      	beq.n	800876c <TIM_OC2_SetConfig+0x68>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a21      	ldr	r2, [pc, #132]	@ (80087ec <TIM_OC2_SetConfig+0xe8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d10d      	bne.n	8008788 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	4313      	orrs	r3, r2
 800877e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a17      	ldr	r2, [pc, #92]	@ (80087e8 <TIM_OC2_SetConfig+0xe4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d003      	beq.n	8008798 <TIM_OC2_SetConfig+0x94>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a16      	ldr	r2, [pc, #88]	@ (80087ec <TIM_OC2_SetConfig+0xe8>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d113      	bne.n	80087c0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800879e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80087a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	693a      	ldr	r2, [r7, #16]
 80087b0:	4313      	orrs	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	621a      	str	r2, [r3, #32]
}
 80087da:	bf00      	nop
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	40010000 	.word	0x40010000
 80087ec:	40010400 	.word	0x40010400

080087f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a1b      	ldr	r3, [r3, #32]
 800880a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800881e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0303 	bic.w	r3, r3, #3
 8008826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	021b      	lsls	r3, r3, #8
 8008840:	697a      	ldr	r2, [r7, #20]
 8008842:	4313      	orrs	r3, r2
 8008844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a21      	ldr	r2, [pc, #132]	@ (80088d0 <TIM_OC3_SetConfig+0xe0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d003      	beq.n	8008856 <TIM_OC3_SetConfig+0x66>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a20      	ldr	r2, [pc, #128]	@ (80088d4 <TIM_OC3_SetConfig+0xe4>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d10d      	bne.n	8008872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800885c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	021b      	lsls	r3, r3, #8
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a16      	ldr	r2, [pc, #88]	@ (80088d0 <TIM_OC3_SetConfig+0xe0>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d003      	beq.n	8008882 <TIM_OC3_SetConfig+0x92>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a15      	ldr	r2, [pc, #84]	@ (80088d4 <TIM_OC3_SetConfig+0xe4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d113      	bne.n	80088aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	011b      	lsls	r3, r3, #4
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	621a      	str	r2, [r3, #32]
}
 80088c4:	bf00      	nop
 80088c6:	371c      	adds	r7, #28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40010400 	.word	0x40010400

080088d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800890e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	021b      	lsls	r3, r3, #8
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	4313      	orrs	r3, r2
 800891a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	031b      	lsls	r3, r3, #12
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	4313      	orrs	r3, r2
 800892e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a12      	ldr	r2, [pc, #72]	@ (800897c <TIM_OC4_SetConfig+0xa4>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d003      	beq.n	8008940 <TIM_OC4_SetConfig+0x68>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a11      	ldr	r2, [pc, #68]	@ (8008980 <TIM_OC4_SetConfig+0xa8>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d109      	bne.n	8008954 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008946:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	695b      	ldr	r3, [r3, #20]
 800894c:	019b      	lsls	r3, r3, #6
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68fa      	ldr	r2, [r7, #12]
 800895e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685a      	ldr	r2, [r3, #4]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	621a      	str	r2, [r3, #32]
}
 800896e:	bf00      	nop
 8008970:	371c      	adds	r7, #28
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr
 800897a:	bf00      	nop
 800897c:	40010000 	.word	0x40010000
 8008980:	40010400 	.word	0x40010400

08008984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	f023 0201 	bic.w	r2, r3, #1
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	011b      	lsls	r3, r3, #4
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f023 030a 	bic.w	r3, r3, #10
 80089c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	621a      	str	r2, [r3, #32]
}
 80089d6:	bf00      	nop
 80089d8:	371c      	adds	r7, #28
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b087      	sub	sp, #28
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	f023 0210 	bic.w	r2, r3, #16
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a1b      	ldr	r3, [r3, #32]
 8008a04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	031b      	lsls	r3, r3, #12
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	011b      	lsls	r3, r3, #4
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	621a      	str	r2, [r3, #32]
}
 8008a36:	bf00      	nop
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b085      	sub	sp, #20
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f043 0307 	orr.w	r3, r3, #7
 8008a64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	609a      	str	r2, [r3, #8]
}
 8008a6c:	bf00      	nop
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	607a      	str	r2, [r7, #4]
 8008a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	021a      	lsls	r2, r3, #8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	431a      	orrs	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	609a      	str	r2, [r3, #8]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	2201      	movs	r2, #1
 8008acc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a1a      	ldr	r2, [r3, #32]
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	401a      	ands	r2, r3
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6a1a      	ldr	r2, [r3, #32]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f003 031f 	and.w	r3, r3, #31
 8008aea:	6879      	ldr	r1, [r7, #4]
 8008aec:	fa01 f303 	lsl.w	r3, r1, r3
 8008af0:	431a      	orrs	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	621a      	str	r2, [r3, #32]
}
 8008af6:	bf00      	nop
 8008af8:	371c      	adds	r7, #28
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr
	...

08008b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e05a      	b.n	8008bd2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a21      	ldr	r2, [pc, #132]	@ (8008be0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d022      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b68:	d01d      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8008be4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d018      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1b      	ldr	r2, [pc, #108]	@ (8008be8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1a      	ldr	r2, [pc, #104]	@ (8008bec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00e      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a18      	ldr	r2, [pc, #96]	@ (8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d009      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a17      	ldr	r2, [pc, #92]	@ (8008bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d004      	beq.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a15      	ldr	r2, [pc, #84]	@ (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d10c      	bne.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40010000 	.word	0x40010000
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800
 8008bec:	40000c00 	.word	0x40000c00
 8008bf0:	40010400 	.word	0x40010400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40001800 	.word	0x40001800

08008bfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e03f      	b.n	8008cb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fb fda8 	bl	80047a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2224      	movs	r2, #36	@ 0x24
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68da      	ldr	r2, [r3, #12]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 ffa7 	bl	8009bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	691a      	ldr	r2, [r3, #16]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	695a      	ldr	r2, [r3, #20]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68da      	ldr	r2, [r3, #12]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008c9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
	...

08008cc0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08c      	sub	sp, #48	@ 0x30
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b20      	cmp	r3, #32
 8008cd8:	d165      	bne.n	8008da6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <HAL_UART_Transmit_DMA+0x26>
 8008ce0:	88fb      	ldrh	r3, [r7, #6]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d101      	bne.n	8008cea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e05e      	b.n	8008da8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_UART_Transmit_DMA+0x38>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e057      	b.n	8008da8 <HAL_UART_Transmit_DMA+0xe8>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	88fa      	ldrh	r2, [r7, #6]
 8008d0a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	88fa      	ldrh	r2, [r7, #6]
 8008d10:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2221      	movs	r2, #33	@ 0x21
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d24:	4a22      	ldr	r2, [pc, #136]	@ (8008db0 <HAL_UART_Transmit_DMA+0xf0>)
 8008d26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d2c:	4a21      	ldr	r2, [pc, #132]	@ (8008db4 <HAL_UART_Transmit_DMA+0xf4>)
 8008d2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d34:	4a20      	ldr	r2, [pc, #128]	@ (8008db8 <HAL_UART_Transmit_DMA+0xf8>)
 8008d36:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008d40:	f107 0308 	add.w	r3, r7, #8
 8008d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8008d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d4c:	6819      	ldr	r1, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3304      	adds	r3, #4
 8008d54:	461a      	mov	r2, r3
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	f7fc fbdc 	bl	8005514 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008d64:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3314      	adds	r3, #20
 8008d74:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3314      	adds	r3, #20
 8008d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008d90:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6a39      	ldr	r1, [r7, #32]
 8008d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e5      	bne.n	8008d6e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	e000      	b.n	8008da8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008da6:	2302      	movs	r3, #2
  }
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3730      	adds	r7, #48	@ 0x30
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	08009455 	.word	0x08009455
 8008db4:	080094ef 	.word	0x080094ef
 8008db8:	08009667 	.word	0x08009667

08008dbc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	d11d      	bne.n	8008e12 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <HAL_UART_Receive_DMA+0x26>
 8008ddc:	88fb      	ldrh	r3, [r7, #6]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e016      	b.n	8008e14 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d101      	bne.n	8008df4 <HAL_UART_Receive_DMA+0x38>
 8008df0:	2302      	movs	r3, #2
 8008df2:	e00f      	b.n	8008e14 <HAL_UART_Receive_DMA+0x58>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008e02:	88fb      	ldrh	r3, [r7, #6]
 8008e04:	461a      	mov	r2, r3
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 fc77 	bl	80096fc <UART_Start_Receive_DMA>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	e000      	b.n	8008e14 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008e12:	2302      	movs	r3, #2
  }
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08c      	sub	sp, #48	@ 0x30
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	4613      	mov	r3, r2
 8008e28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b20      	cmp	r3, #32
 8008e34:	d152      	bne.n	8008edc <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008e3c:	88fb      	ldrh	r3, [r7, #6]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e04b      	b.n	8008ede <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d101      	bne.n	8008e54 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008e50:	2302      	movs	r3, #2
 8008e52:	e044      	b.n	8008ede <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	461a      	mov	r2, r3
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 fc47 	bl	80096fc <UART_Start_Receive_DMA>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008e74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d12c      	bne.n	8008ed6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d125      	bne.n	8008ed0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e84:	2300      	movs	r3, #0
 8008e86:	613b      	str	r3, [r7, #16]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	613b      	str	r3, [r7, #16]
 8008e98:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	330c      	adds	r3, #12
 8008ea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f043 0310 	orr.w	r3, r3, #16
 8008eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	330c      	adds	r3, #12
 8008eb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eba:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ebc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	6a39      	ldr	r1, [r7, #32]
 8008ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e5      	bne.n	8008e9a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008ece:	e002      	b.n	8008ed6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008eda:	e000      	b.n	8008ede <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008edc:	2302      	movs	r3, #2
  }
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3730      	adds	r7, #48	@ 0x30
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
	...

08008ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b0ba      	sub	sp, #232	@ 0xe8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f1e:	f003 030f 	and.w	r3, r3, #15
 8008f22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10f      	bne.n	8008f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d009      	beq.n	8008f4e <HAL_UART_IRQHandler+0x66>
 8008f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f3e:	f003 0320 	and.w	r3, r3, #32
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fd7d 	bl	8009a46 <UART_Receive_IT>
      return;
 8008f4c:	e256      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	f000 80de 	beq.w	8009114 <HAL_UART_IRQHandler+0x22c>
 8008f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f68:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 80d1 	beq.w	8009114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00b      	beq.n	8008f96 <HAL_UART_IRQHandler+0xae>
 8008f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d005      	beq.n	8008f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8e:	f043 0201 	orr.w	r2, r3, #1
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f9a:	f003 0304 	and.w	r3, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <HAL_UART_IRQHandler+0xd2>
 8008fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fb2:	f043 0202 	orr.w	r2, r3, #2
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_UART_IRQHandler+0xf6>
 8008fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd6:	f043 0204 	orr.w	r2, r3, #4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d011      	beq.n	800900e <HAL_UART_IRQHandler+0x126>
 8008fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d105      	bne.n	8009002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d005      	beq.n	800900e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009006:	f043 0208 	orr.w	r2, r3, #8
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 81ed 	beq.w	80093f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <HAL_UART_IRQHandler+0x14e>
 8009024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009028:	f003 0320 	and.w	r3, r3, #32
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fd08 	bl	8009a46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009040:	2b40      	cmp	r3, #64	@ 0x40
 8009042:	bf0c      	ite	eq
 8009044:	2301      	moveq	r3, #1
 8009046:	2300      	movne	r3, #0
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d103      	bne.n	8009062 <HAL_UART_IRQHandler+0x17a>
 800905a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d04f      	beq.n	8009102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fc10 	bl	8009888 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009072:	2b40      	cmp	r3, #64	@ 0x40
 8009074:	d141      	bne.n	80090fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	3314      	adds	r3, #20
 800907c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009080:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800908c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3314      	adds	r3, #20
 800909e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80090a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80090a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80090ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80090b2:	e841 2300 	strex	r3, r2, [r1]
 80090b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80090ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1d9      	bne.n	8009076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d013      	beq.n	80090f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ce:	4a7d      	ldr	r2, [pc, #500]	@ (80092c4 <HAL_UART_IRQHandler+0x3dc>)
 80090d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7fc fae4 	bl	80056a4 <HAL_DMA_Abort_IT>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d016      	beq.n	8009110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f0:	e00e      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f9a4 	bl	8009440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090f8:	e00a      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f9a0 	bl	8009440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009100:	e006      	b.n	8009110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f99c 	bl	8009440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 800910e:	e170      	b.n	80093f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009110:	bf00      	nop
    return;
 8009112:	e16e      	b.n	80093f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009118:	2b01      	cmp	r3, #1
 800911a:	f040 814a 	bne.w	80093b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800911e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009122:	f003 0310 	and.w	r3, r3, #16
 8009126:	2b00      	cmp	r3, #0
 8009128:	f000 8143 	beq.w	80093b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800912c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009130:	f003 0310 	and.w	r3, r3, #16
 8009134:	2b00      	cmp	r3, #0
 8009136:	f000 813c 	beq.w	80093b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800913a:	2300      	movs	r3, #0
 800913c:	60bb      	str	r3, [r7, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60bb      	str	r3, [r7, #8]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	60bb      	str	r3, [r7, #8]
 800914e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800915a:	2b40      	cmp	r3, #64	@ 0x40
 800915c:	f040 80b4 	bne.w	80092c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800916c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 8140 	beq.w	80093f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800917a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800917e:	429a      	cmp	r2, r3
 8009180:	f080 8139 	bcs.w	80093f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800918a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009190:	69db      	ldr	r3, [r3, #28]
 8009192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009196:	f000 8088 	beq.w	80092aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	330c      	adds	r3, #12
 80091a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80091a8:	e853 3f00 	ldrex	r3, [r3]
 80091ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80091b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80091b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	330c      	adds	r3, #12
 80091c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80091c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80091d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091d6:	e841 2300 	strex	r3, r2, [r1]
 80091da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80091de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1d9      	bne.n	800919a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	3314      	adds	r3, #20
 80091ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80091f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80091f8:	f023 0301 	bic.w	r3, r3, #1
 80091fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3314      	adds	r3, #20
 8009206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800920a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800920e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009210:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009212:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800921c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e1      	bne.n	80091e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3314      	adds	r3, #20
 8009228:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009234:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009238:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3314      	adds	r3, #20
 8009242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009246:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009248:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800924c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009254:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	330c      	adds	r3, #12
 800926e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009272:	e853 3f00 	ldrex	r3, [r3]
 8009276:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009278:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800927a:	f023 0310 	bic.w	r3, r3, #16
 800927e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	330c      	adds	r3, #12
 8009288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800928c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800928e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009292:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800929a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e3      	bne.n	8009268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fc f98d 	bl	80055c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7f9 fce0 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80092c0:	e099      	b.n	80093f6 <HAL_UART_IRQHandler+0x50e>
 80092c2:	bf00      	nop
 80092c4:	0800994f 	.word	0x0800994f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 808b 	beq.w	80093fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80092e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 8086 	beq.w	80093fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	330c      	adds	r3, #12
 80092f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009304:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	330c      	adds	r3, #12
 800930e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009312:	647a      	str	r2, [r7, #68]	@ 0x44
 8009314:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009318:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e3      	bne.n	80092ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3314      	adds	r3, #20
 800932c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	623b      	str	r3, [r7, #32]
   return(result);
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3314      	adds	r3, #20
 8009346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800934a:	633a      	str	r2, [r7, #48]	@ 0x30
 800934c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009352:	e841 2300 	strex	r3, r2, [r1]
 8009356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1e3      	bne.n	8009326 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2220      	movs	r2, #32
 8009362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	330c      	adds	r3, #12
 8009372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	e853 3f00 	ldrex	r3, [r3]
 800937a:	60fb      	str	r3, [r7, #12]
   return(result);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0310 	bic.w	r3, r3, #16
 8009382:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	330c      	adds	r3, #12
 800938c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009390:	61fa      	str	r2, [r7, #28]
 8009392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	69b9      	ldr	r1, [r7, #24]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	617b      	str	r3, [r7, #20]
   return(result);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e3      	bne.n	800936c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7f9 fc68 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093b0:	e023      	b.n	80093fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d009      	beq.n	80093d2 <HAL_UART_IRQHandler+0x4ea>
 80093be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fad3 	bl	8009976 <UART_Transmit_IT>
    return;
 80093d0:	e014      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80093d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00e      	beq.n	80093fc <HAL_UART_IRQHandler+0x514>
 80093de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d008      	beq.n	80093fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fb13 	bl	8009a16 <UART_EndTransmit_IT>
    return;
 80093f0:	e004      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
    return;
 80093f2:	bf00      	nop
 80093f4:	e002      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
      return;
 80093f6:	bf00      	nop
 80093f8:	e000      	b.n	80093fc <HAL_UART_IRQHandler+0x514>
      return;
 80093fa:	bf00      	nop
  }
}
 80093fc:	37e8      	adds	r7, #232	@ 0xe8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop

08009404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b090      	sub	sp, #64	@ 0x40
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009460:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800946c:	2b00      	cmp	r3, #0
 800946e:	d137      	bne.n	80094e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009472:	2200      	movs	r2, #0
 8009474:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3314      	adds	r3, #20
 800947c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	623b      	str	r3, [r7, #32]
   return(result);
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800948c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800948e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3314      	adds	r3, #20
 8009494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009496:	633a      	str	r2, [r7, #48]	@ 0x30
 8009498:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800949c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e5      	bne.n	8009476 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	330c      	adds	r3, #12
 80094b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	330c      	adds	r3, #12
 80094c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094ca:	61fa      	str	r2, [r7, #28]
 80094cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	69b9      	ldr	r1, [r7, #24]
 80094d0:	69fa      	ldr	r2, [r7, #28]
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	617b      	str	r3, [r7, #20]
   return(result);
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e5      	bne.n	80094aa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094de:	e002      	b.n	80094e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80094e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80094e2:	f7ff ff8f 	bl	8009404 <HAL_UART_TxCpltCallback>
}
 80094e6:	bf00      	nop
 80094e8:	3740      	adds	r7, #64	@ 0x40
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b084      	sub	sp, #16
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f7ff ff8b 	bl	8009418 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009502:	bf00      	nop
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b09c      	sub	sp, #112	@ 0x70
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009516:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009522:	2b00      	cmp	r3, #0
 8009524:	d172      	bne.n	800960c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009528:	2200      	movs	r2, #0
 800952a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800952c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	330c      	adds	r3, #12
 8009532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009536:	e853 3f00 	ldrex	r3, [r3]
 800953a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800953c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800953e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009542:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800954c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800954e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009552:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009554:	e841 2300 	strex	r3, r2, [r1]
 8009558:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800955a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e5      	bne.n	800952c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3314      	adds	r3, #20
 8009566:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009572:	f023 0301 	bic.w	r3, r3, #1
 8009576:	667b      	str	r3, [r7, #100]	@ 0x64
 8009578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3314      	adds	r3, #20
 800957e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009580:	647a      	str	r2, [r7, #68]	@ 0x44
 8009582:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009586:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800958e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e5      	bne.n	8009560 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3314      	adds	r3, #20
 800959a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959e:	e853 3f00 	ldrex	r3, [r3]
 80095a2:	623b      	str	r3, [r7, #32]
   return(result);
 80095a4:	6a3b      	ldr	r3, [r7, #32]
 80095a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80095ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	3314      	adds	r3, #20
 80095b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80095b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095bc:	e841 2300 	strex	r3, r2, [r1]
 80095c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80095c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1e5      	bne.n	8009594 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095ca:	2220      	movs	r2, #32
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d119      	bne.n	800960c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	330c      	adds	r3, #12
 80095de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	e853 3f00 	ldrex	r3, [r3]
 80095e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0310 	bic.w	r3, r3, #16
 80095ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	330c      	adds	r3, #12
 80095f6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80095f8:	61fa      	str	r2, [r7, #28]
 80095fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fc:	69b9      	ldr	r1, [r7, #24]
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	e841 2300 	strex	r3, r2, [r1]
 8009604:	617b      	str	r3, [r7, #20]
   return(result);
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1e5      	bne.n	80095d8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800960c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800960e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009610:	2b01      	cmp	r3, #1
 8009612:	d106      	bne.n	8009622 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009616:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009618:	4619      	mov	r1, r3
 800961a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800961c:	f7f9 fb30 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009620:	e002      	b.n	8009628 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009622:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009624:	f7f9 fc50 	bl	8002ec8 <HAL_UART_RxCpltCallback>
}
 8009628:	bf00      	nop
 800962a:	3770      	adds	r7, #112	@ 0x70
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009642:	2b01      	cmp	r3, #1
 8009644:	d108      	bne.n	8009658 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800964a:	085b      	lsrs	r3, r3, #1
 800964c:	b29b      	uxth	r3, r3
 800964e:	4619      	mov	r1, r3
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7f9 fb15 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009656:	e002      	b.n	800965e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	f7ff fee7 	bl	800942c <HAL_UART_RxHalfCpltCallback>
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800966e:	2300      	movs	r3, #0
 8009670:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009676:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009682:	2b80      	cmp	r3, #128	@ 0x80
 8009684:	bf0c      	ite	eq
 8009686:	2301      	moveq	r3, #1
 8009688:	2300      	movne	r3, #0
 800968a:	b2db      	uxtb	r3, r3
 800968c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b21      	cmp	r3, #33	@ 0x21
 8009698:	d108      	bne.n	80096ac <UART_DMAError+0x46>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2200      	movs	r2, #0
 80096a4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80096a6:	68b8      	ldr	r0, [r7, #8]
 80096a8:	f000 f8c6 	bl	8009838 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096b6:	2b40      	cmp	r3, #64	@ 0x40
 80096b8:	bf0c      	ite	eq
 80096ba:	2301      	moveq	r3, #1
 80096bc:	2300      	movne	r3, #0
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b22      	cmp	r3, #34	@ 0x22
 80096cc:	d108      	bne.n	80096e0 <UART_DMAError+0x7a>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d005      	beq.n	80096e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80096da:	68b8      	ldr	r0, [r7, #8]
 80096dc:	f000 f8d4 	bl	8009888 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e4:	f043 0210 	orr.w	r2, r3, #16
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096ec:	68b8      	ldr	r0, [r7, #8]
 80096ee:	f7ff fea7 	bl	8009440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f2:	bf00      	nop
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b098      	sub	sp, #96	@ 0x60
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4613      	mov	r3, r2
 8009708:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	88fa      	ldrh	r2, [r7, #6]
 8009714:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2222      	movs	r2, #34	@ 0x22
 8009720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009728:	4a40      	ldr	r2, [pc, #256]	@ (800982c <UART_Start_Receive_DMA+0x130>)
 800972a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009730:	4a3f      	ldr	r2, [pc, #252]	@ (8009830 <UART_Start_Receive_DMA+0x134>)
 8009732:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009738:	4a3e      	ldr	r2, [pc, #248]	@ (8009834 <UART_Start_Receive_DMA+0x138>)
 800973a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009740:	2200      	movs	r2, #0
 8009742:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009744:	f107 0308 	add.w	r3, r7, #8
 8009748:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3304      	adds	r3, #4
 8009754:	4619      	mov	r1, r3
 8009756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	88fb      	ldrh	r3, [r7, #6]
 800975c:	f7fb feda 	bl	8005514 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009760:	2300      	movs	r3, #0
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	613b      	str	r3, [r7, #16]
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	613b      	str	r3, [r7, #16]
 8009774:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d019      	beq.n	80097ba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	330c      	adds	r3, #12
 800978c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800979c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	330c      	adds	r3, #12
 80097a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097a6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80097a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80097ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097ae:	e841 2300 	strex	r3, r2, [r1]
 80097b2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80097b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e5      	bne.n	8009786 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	3314      	adds	r3, #20
 80097c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80097ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097cc:	f043 0301 	orr.w	r3, r3, #1
 80097d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3314      	adds	r3, #20
 80097d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80097da:	63ba      	str	r2, [r7, #56]	@ 0x38
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80097e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e5      	bne.n	80097ba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3314      	adds	r3, #20
 80097f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	617b      	str	r3, [r7, #20]
   return(result);
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009804:	653b      	str	r3, [r7, #80]	@ 0x50
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3314      	adds	r3, #20
 800980c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800980e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6a39      	ldr	r1, [r7, #32]
 8009814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	61fb      	str	r3, [r7, #28]
   return(result);
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e5      	bne.n	80097ee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3760      	adds	r7, #96	@ 0x60
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	0800950b 	.word	0x0800950b
 8009830:	08009631 	.word	0x08009631
 8009834:	08009667 	.word	0x08009667

08009838 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009838:	b480      	push	{r7}
 800983a:	b089      	sub	sp, #36	@ 0x24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	330c      	adds	r3, #12
 8009846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	e853 3f00 	ldrex	r3, [r3]
 800984e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009856:	61fb      	str	r3, [r7, #28]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	330c      	adds	r3, #12
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	61ba      	str	r2, [r7, #24]
 8009862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009864:	6979      	ldr	r1, [r7, #20]
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	e841 2300 	strex	r3, r2, [r1]
 800986c:	613b      	str	r3, [r7, #16]
   return(result);
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d1e5      	bne.n	8009840 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 800987c:	bf00      	nop
 800987e:	3724      	adds	r7, #36	@ 0x24
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009888:	b480      	push	{r7}
 800988a:	b095      	sub	sp, #84	@ 0x54
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	330c      	adds	r3, #12
 8009896:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800989a:	e853 3f00 	ldrex	r3, [r3]
 800989e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	330c      	adds	r3, #12
 80098ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80098b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80098b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098b8:	e841 2300 	strex	r3, r2, [r1]
 80098bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e5      	bne.n	8009890 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	3314      	adds	r3, #20
 80098ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098cc:	6a3b      	ldr	r3, [r7, #32]
 80098ce:	e853 3f00 	ldrex	r3, [r3]
 80098d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	f023 0301 	bic.w	r3, r3, #1
 80098da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3314      	adds	r3, #20
 80098e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ec:	e841 2300 	strex	r3, r2, [r1]
 80098f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1e5      	bne.n	80098c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098fc:	2b01      	cmp	r3, #1
 80098fe:	d119      	bne.n	8009934 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f023 0310 	bic.w	r3, r3, #16
 8009916:	647b      	str	r3, [r7, #68]	@ 0x44
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	330c      	adds	r3, #12
 800991e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009920:	61ba      	str	r2, [r7, #24]
 8009922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6979      	ldr	r1, [r7, #20]
 8009926:	69ba      	ldr	r2, [r7, #24]
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	613b      	str	r3, [r7, #16]
   return(result);
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e5      	bne.n	8009900 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009942:	bf00      	nop
 8009944:	3754      	adds	r7, #84	@ 0x54
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr

0800994e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800995a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f7ff fd69 	bl	8009440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009976:	b480      	push	{r7}
 8009978:	b085      	sub	sp, #20
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b21      	cmp	r3, #33	@ 0x21
 8009988:	d13e      	bne.n	8009a08 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009992:	d114      	bne.n	80099be <UART_Transmit_IT+0x48>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d110      	bne.n	80099be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a1b      	ldr	r3, [r3, #32]
 80099a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	1c9a      	adds	r2, r3, #2
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	621a      	str	r2, [r3, #32]
 80099bc:	e008      	b.n	80099d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	1c59      	adds	r1, r3, #1
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6211      	str	r1, [r2, #32]
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	3b01      	subs	r3, #1
 80099d8:	b29b      	uxth	r3, r3
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	4619      	mov	r1, r3
 80099de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10f      	bne.n	8009a04 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68da      	ldr	r2, [r3, #12]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a02:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a04:	2300      	movs	r3, #0
 8009a06:	e000      	b.n	8009a0a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a08:	2302      	movs	r3, #2
  }
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3714      	adds	r7, #20
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7ff fce4 	bl	8009404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b08c      	sub	sp, #48	@ 0x30
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b22      	cmp	r3, #34	@ 0x22
 8009a58:	f040 80ab 	bne.w	8009bb2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a64:	d117      	bne.n	8009a96 <UART_Receive_IT+0x50>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	691b      	ldr	r3, [r3, #16]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d113      	bne.n	8009a96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a76:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a8e:	1c9a      	adds	r2, r3, #2
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	629a      	str	r2, [r3, #40]	@ 0x28
 8009a94:	e026      	b.n	8009ae4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009aa8:	d007      	beq.n	8009aba <UART_Receive_IT+0x74>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <UART_Receive_IT+0x82>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac4:	701a      	strb	r2, [r3, #0]
 8009ac6:	e008      	b.n	8009ada <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	3b01      	subs	r3, #1
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	4619      	mov	r1, r3
 8009af2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d15a      	bne.n	8009bae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 0220 	bic.w	r2, r2, #32
 8009b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68da      	ldr	r2, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009b16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695a      	ldr	r2, [r3, #20]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f022 0201 	bic.w	r2, r2, #1
 8009b26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d135      	bne.n	8009ba4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	330c      	adds	r3, #12
 8009b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	e853 3f00 	ldrex	r3, [r3]
 8009b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f023 0310 	bic.w	r3, r3, #16
 8009b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	330c      	adds	r3, #12
 8009b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b5e:	623a      	str	r2, [r7, #32]
 8009b60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b62:	69f9      	ldr	r1, [r7, #28]
 8009b64:	6a3a      	ldr	r2, [r7, #32]
 8009b66:	e841 2300 	strex	r3, r2, [r1]
 8009b6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1e5      	bne.n	8009b3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0310 	and.w	r3, r3, #16
 8009b7c:	2b10      	cmp	r3, #16
 8009b7e:	d10a      	bne.n	8009b96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b80:	2300      	movs	r3, #0
 8009b82:	60fb      	str	r3, [r7, #12]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	60fb      	str	r3, [r7, #12]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f7f9 f86f 	bl	8002c80 <HAL_UARTEx_RxEventCallback>
 8009ba2:	e002      	b.n	8009baa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7f9 f98f 	bl	8002ec8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	e002      	b.n	8009bb4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	e000      	b.n	8009bb4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009bb2:	2302      	movs	r3, #2
  }
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3730      	adds	r7, #48	@ 0x30
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bc0:	b0c0      	sub	sp, #256	@ 0x100
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd8:	68d9      	ldr	r1, [r3, #12]
 8009bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	ea40 0301 	orr.w	r3, r0, r1
 8009be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bea:	689a      	ldr	r2, [r3, #8]
 8009bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	431a      	orrs	r2, r3
 8009bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c00:	69db      	ldr	r3, [r3, #28]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009c14:	f021 010c 	bic.w	r1, r1, #12
 8009c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009c22:	430b      	orrs	r3, r1
 8009c24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c36:	6999      	ldr	r1, [r3, #24]
 8009c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	ea40 0301 	orr.w	r3, r0, r1
 8009c42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	4b8f      	ldr	r3, [pc, #572]	@ (8009e88 <UART_SetConfig+0x2cc>)
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d005      	beq.n	8009c5c <UART_SetConfig+0xa0>
 8009c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4b8d      	ldr	r3, [pc, #564]	@ (8009e8c <UART_SetConfig+0x2d0>)
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d104      	bne.n	8009c66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c5c:	f7fd feac 	bl	80079b8 <HAL_RCC_GetPCLK2Freq>
 8009c60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009c64:	e003      	b.n	8009c6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c66:	f7fd fe93 	bl	8007990 <HAL_RCC_GetPCLK1Freq>
 8009c6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c72:	69db      	ldr	r3, [r3, #28]
 8009c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c78:	f040 810c 	bne.w	8009e94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009c86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009c8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009c8e:	4622      	mov	r2, r4
 8009c90:	462b      	mov	r3, r5
 8009c92:	1891      	adds	r1, r2, r2
 8009c94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c96:	415b      	adcs	r3, r3
 8009c98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	eb12 0801 	adds.w	r8, r2, r1
 8009ca4:	4629      	mov	r1, r5
 8009ca6:	eb43 0901 	adc.w	r9, r3, r1
 8009caa:	f04f 0200 	mov.w	r2, #0
 8009cae:	f04f 0300 	mov.w	r3, #0
 8009cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cbe:	4690      	mov	r8, r2
 8009cc0:	4699      	mov	r9, r3
 8009cc2:	4623      	mov	r3, r4
 8009cc4:	eb18 0303 	adds.w	r3, r8, r3
 8009cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009ccc:	462b      	mov	r3, r5
 8009cce:	eb49 0303 	adc.w	r3, r9, r3
 8009cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009ce2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009ce6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009cea:	460b      	mov	r3, r1
 8009cec:	18db      	adds	r3, r3, r3
 8009cee:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	eb42 0303 	adc.w	r3, r2, r3
 8009cf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cf8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009cfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009d00:	f7f6 ff46 	bl	8000b90 <__aeabi_uldivmod>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	4b61      	ldr	r3, [pc, #388]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8009d0e:	095b      	lsrs	r3, r3, #5
 8009d10:	011c      	lsls	r4, r3, #4
 8009d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009d20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009d24:	4642      	mov	r2, r8
 8009d26:	464b      	mov	r3, r9
 8009d28:	1891      	adds	r1, r2, r2
 8009d2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009d2c:	415b      	adcs	r3, r3
 8009d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009d34:	4641      	mov	r1, r8
 8009d36:	eb12 0a01 	adds.w	sl, r2, r1
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	eb43 0b01 	adc.w	fp, r3, r1
 8009d40:	f04f 0200 	mov.w	r2, #0
 8009d44:	f04f 0300 	mov.w	r3, #0
 8009d48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d54:	4692      	mov	sl, r2
 8009d56:	469b      	mov	fp, r3
 8009d58:	4643      	mov	r3, r8
 8009d5a:	eb1a 0303 	adds.w	r3, sl, r3
 8009d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009d62:	464b      	mov	r3, r9
 8009d64:	eb4b 0303 	adc.w	r3, fp, r3
 8009d68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009d7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009d80:	460b      	mov	r3, r1
 8009d82:	18db      	adds	r3, r3, r3
 8009d84:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d86:	4613      	mov	r3, r2
 8009d88:	eb42 0303 	adc.w	r3, r2, r3
 8009d8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009d92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009d96:	f7f6 fefb 	bl	8000b90 <__aeabi_uldivmod>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4611      	mov	r1, r2
 8009da0:	4b3b      	ldr	r3, [pc, #236]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009da2:	fba3 2301 	umull	r2, r3, r3, r1
 8009da6:	095b      	lsrs	r3, r3, #5
 8009da8:	2264      	movs	r2, #100	@ 0x64
 8009daa:	fb02 f303 	mul.w	r3, r2, r3
 8009dae:	1acb      	subs	r3, r1, r3
 8009db0:	00db      	lsls	r3, r3, #3
 8009db2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009db6:	4b36      	ldr	r3, [pc, #216]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009db8:	fba3 2302 	umull	r2, r3, r3, r2
 8009dbc:	095b      	lsrs	r3, r3, #5
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009dc4:	441c      	add	r4, r3
 8009dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009dd0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009dd4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009dd8:	4642      	mov	r2, r8
 8009dda:	464b      	mov	r3, r9
 8009ddc:	1891      	adds	r1, r2, r2
 8009dde:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009de0:	415b      	adcs	r3, r3
 8009de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009de8:	4641      	mov	r1, r8
 8009dea:	1851      	adds	r1, r2, r1
 8009dec:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dee:	4649      	mov	r1, r9
 8009df0:	414b      	adcs	r3, r1
 8009df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df4:	f04f 0200 	mov.w	r2, #0
 8009df8:	f04f 0300 	mov.w	r3, #0
 8009dfc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009e00:	4659      	mov	r1, fp
 8009e02:	00cb      	lsls	r3, r1, #3
 8009e04:	4651      	mov	r1, sl
 8009e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e0a:	4651      	mov	r1, sl
 8009e0c:	00ca      	lsls	r2, r1, #3
 8009e0e:	4610      	mov	r0, r2
 8009e10:	4619      	mov	r1, r3
 8009e12:	4603      	mov	r3, r0
 8009e14:	4642      	mov	r2, r8
 8009e16:	189b      	adds	r3, r3, r2
 8009e18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e1c:	464b      	mov	r3, r9
 8009e1e:	460a      	mov	r2, r1
 8009e20:	eb42 0303 	adc.w	r3, r2, r3
 8009e24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009e34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009e38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	18db      	adds	r3, r3, r3
 8009e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e42:	4613      	mov	r3, r2
 8009e44:	eb42 0303 	adc.w	r3, r2, r3
 8009e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009e4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009e52:	f7f6 fe9d 	bl	8000b90 <__aeabi_uldivmod>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	2164      	movs	r1, #100	@ 0x64
 8009e64:	fb01 f303 	mul.w	r3, r1, r3
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	3332      	adds	r3, #50	@ 0x32
 8009e6e:	4a08      	ldr	r2, [pc, #32]	@ (8009e90 <UART_SetConfig+0x2d4>)
 8009e70:	fba2 2303 	umull	r2, r3, r2, r3
 8009e74:	095b      	lsrs	r3, r3, #5
 8009e76:	f003 0207 	and.w	r2, r3, #7
 8009e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4422      	add	r2, r4
 8009e82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009e84:	e106      	b.n	800a094 <UART_SetConfig+0x4d8>
 8009e86:	bf00      	nop
 8009e88:	40011000 	.word	0x40011000
 8009e8c:	40011400 	.word	0x40011400
 8009e90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009e9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009ea2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009ea6:	4642      	mov	r2, r8
 8009ea8:	464b      	mov	r3, r9
 8009eaa:	1891      	adds	r1, r2, r2
 8009eac:	6239      	str	r1, [r7, #32]
 8009eae:	415b      	adcs	r3, r3
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009eb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009eb6:	4641      	mov	r1, r8
 8009eb8:	1854      	adds	r4, r2, r1
 8009eba:	4649      	mov	r1, r9
 8009ebc:	eb43 0501 	adc.w	r5, r3, r1
 8009ec0:	f04f 0200 	mov.w	r2, #0
 8009ec4:	f04f 0300 	mov.w	r3, #0
 8009ec8:	00eb      	lsls	r3, r5, #3
 8009eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ece:	00e2      	lsls	r2, r4, #3
 8009ed0:	4614      	mov	r4, r2
 8009ed2:	461d      	mov	r5, r3
 8009ed4:	4643      	mov	r3, r8
 8009ed6:	18e3      	adds	r3, r4, r3
 8009ed8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009edc:	464b      	mov	r3, r9
 8009ede:	eb45 0303 	adc.w	r3, r5, r3
 8009ee2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009ef2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009ef6:	f04f 0200 	mov.w	r2, #0
 8009efa:	f04f 0300 	mov.w	r3, #0
 8009efe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009f02:	4629      	mov	r1, r5
 8009f04:	008b      	lsls	r3, r1, #2
 8009f06:	4621      	mov	r1, r4
 8009f08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	008a      	lsls	r2, r1, #2
 8009f10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009f14:	f7f6 fe3c 	bl	8000b90 <__aeabi_uldivmod>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4b60      	ldr	r3, [pc, #384]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 8009f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8009f22:	095b      	lsrs	r3, r3, #5
 8009f24:	011c      	lsls	r4, r3, #4
 8009f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009f30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009f34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009f38:	4642      	mov	r2, r8
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	1891      	adds	r1, r2, r2
 8009f3e:	61b9      	str	r1, [r7, #24]
 8009f40:	415b      	adcs	r3, r3
 8009f42:	61fb      	str	r3, [r7, #28]
 8009f44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f48:	4641      	mov	r1, r8
 8009f4a:	1851      	adds	r1, r2, r1
 8009f4c:	6139      	str	r1, [r7, #16]
 8009f4e:	4649      	mov	r1, r9
 8009f50:	414b      	adcs	r3, r1
 8009f52:	617b      	str	r3, [r7, #20]
 8009f54:	f04f 0200 	mov.w	r2, #0
 8009f58:	f04f 0300 	mov.w	r3, #0
 8009f5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f60:	4659      	mov	r1, fp
 8009f62:	00cb      	lsls	r3, r1, #3
 8009f64:	4651      	mov	r1, sl
 8009f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f6a:	4651      	mov	r1, sl
 8009f6c:	00ca      	lsls	r2, r1, #3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	4619      	mov	r1, r3
 8009f72:	4603      	mov	r3, r0
 8009f74:	4642      	mov	r2, r8
 8009f76:	189b      	adds	r3, r3, r2
 8009f78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f7c:	464b      	mov	r3, r9
 8009f7e:	460a      	mov	r2, r1
 8009f80:	eb42 0303 	adc.w	r3, r2, r3
 8009f84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009f94:	f04f 0200 	mov.w	r2, #0
 8009f98:	f04f 0300 	mov.w	r3, #0
 8009f9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	008b      	lsls	r3, r1, #2
 8009fa4:	4641      	mov	r1, r8
 8009fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009faa:	4641      	mov	r1, r8
 8009fac:	008a      	lsls	r2, r1, #2
 8009fae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009fb2:	f7f6 fded 	bl	8000b90 <__aeabi_uldivmod>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4611      	mov	r1, r2
 8009fbc:	4b38      	ldr	r3, [pc, #224]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 8009fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8009fc2:	095b      	lsrs	r3, r3, #5
 8009fc4:	2264      	movs	r2, #100	@ 0x64
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	1acb      	subs	r3, r1, r3
 8009fcc:	011b      	lsls	r3, r3, #4
 8009fce:	3332      	adds	r3, #50	@ 0x32
 8009fd0:	4a33      	ldr	r2, [pc, #204]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 8009fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd6:	095b      	lsrs	r3, r3, #5
 8009fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009fdc:	441c      	add	r4, r3
 8009fde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009fe6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009fe8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009fec:	4642      	mov	r2, r8
 8009fee:	464b      	mov	r3, r9
 8009ff0:	1891      	adds	r1, r2, r2
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	415b      	adcs	r3, r3
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009ffc:	4641      	mov	r1, r8
 8009ffe:	1851      	adds	r1, r2, r1
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	4649      	mov	r1, r9
 800a004:	414b      	adcs	r3, r1
 800a006:	607b      	str	r3, [r7, #4]
 800a008:	f04f 0200 	mov.w	r2, #0
 800a00c:	f04f 0300 	mov.w	r3, #0
 800a010:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a014:	4659      	mov	r1, fp
 800a016:	00cb      	lsls	r3, r1, #3
 800a018:	4651      	mov	r1, sl
 800a01a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a01e:	4651      	mov	r1, sl
 800a020:	00ca      	lsls	r2, r1, #3
 800a022:	4610      	mov	r0, r2
 800a024:	4619      	mov	r1, r3
 800a026:	4603      	mov	r3, r0
 800a028:	4642      	mov	r2, r8
 800a02a:	189b      	adds	r3, r3, r2
 800a02c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a02e:	464b      	mov	r3, r9
 800a030:	460a      	mov	r2, r1
 800a032:	eb42 0303 	adc.w	r3, r2, r3
 800a036:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	663b      	str	r3, [r7, #96]	@ 0x60
 800a042:	667a      	str	r2, [r7, #100]	@ 0x64
 800a044:	f04f 0200 	mov.w	r2, #0
 800a048:	f04f 0300 	mov.w	r3, #0
 800a04c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a050:	4649      	mov	r1, r9
 800a052:	008b      	lsls	r3, r1, #2
 800a054:	4641      	mov	r1, r8
 800a056:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a05a:	4641      	mov	r1, r8
 800a05c:	008a      	lsls	r2, r1, #2
 800a05e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a062:	f7f6 fd95 	bl	8000b90 <__aeabi_uldivmod>
 800a066:	4602      	mov	r2, r0
 800a068:	460b      	mov	r3, r1
 800a06a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 800a06c:	fba3 1302 	umull	r1, r3, r3, r2
 800a070:	095b      	lsrs	r3, r3, #5
 800a072:	2164      	movs	r1, #100	@ 0x64
 800a074:	fb01 f303 	mul.w	r3, r1, r3
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	011b      	lsls	r3, r3, #4
 800a07c:	3332      	adds	r3, #50	@ 0x32
 800a07e:	4a08      	ldr	r2, [pc, #32]	@ (800a0a0 <UART_SetConfig+0x4e4>)
 800a080:	fba2 2303 	umull	r2, r3, r2, r3
 800a084:	095b      	lsrs	r3, r3, #5
 800a086:	f003 020f 	and.w	r2, r3, #15
 800a08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4422      	add	r2, r4
 800a092:	609a      	str	r2, [r3, #8]
}
 800a094:	bf00      	nop
 800a096:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a09a:	46bd      	mov	sp, r7
 800a09c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0a0:	51eb851f 	.word	0x51eb851f

0800a0a4 <memset>:
 800a0a4:	4402      	add	r2, r0
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d100      	bne.n	800a0ae <memset+0xa>
 800a0ac:	4770      	bx	lr
 800a0ae:	f803 1b01 	strb.w	r1, [r3], #1
 800a0b2:	e7f9      	b.n	800a0a8 <memset+0x4>

0800a0b4 <__errno>:
 800a0b4:	4b01      	ldr	r3, [pc, #4]	@ (800a0bc <__errno+0x8>)
 800a0b6:	6818      	ldr	r0, [r3, #0]
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	20000064 	.word	0x20000064

0800a0c0 <__libc_init_array>:
 800a0c0:	b570      	push	{r4, r5, r6, lr}
 800a0c2:	4d0d      	ldr	r5, [pc, #52]	@ (800a0f8 <__libc_init_array+0x38>)
 800a0c4:	4c0d      	ldr	r4, [pc, #52]	@ (800a0fc <__libc_init_array+0x3c>)
 800a0c6:	1b64      	subs	r4, r4, r5
 800a0c8:	10a4      	asrs	r4, r4, #2
 800a0ca:	2600      	movs	r6, #0
 800a0cc:	42a6      	cmp	r6, r4
 800a0ce:	d109      	bne.n	800a0e4 <__libc_init_array+0x24>
 800a0d0:	4d0b      	ldr	r5, [pc, #44]	@ (800a100 <__libc_init_array+0x40>)
 800a0d2:	4c0c      	ldr	r4, [pc, #48]	@ (800a104 <__libc_init_array+0x44>)
 800a0d4:	f002 fa10 	bl	800c4f8 <_init>
 800a0d8:	1b64      	subs	r4, r4, r5
 800a0da:	10a4      	asrs	r4, r4, #2
 800a0dc:	2600      	movs	r6, #0
 800a0de:	42a6      	cmp	r6, r4
 800a0e0:	d105      	bne.n	800a0ee <__libc_init_array+0x2e>
 800a0e2:	bd70      	pop	{r4, r5, r6, pc}
 800a0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e8:	4798      	blx	r3
 800a0ea:	3601      	adds	r6, #1
 800a0ec:	e7ee      	b.n	800a0cc <__libc_init_array+0xc>
 800a0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f2:	4798      	blx	r3
 800a0f4:	3601      	adds	r6, #1
 800a0f6:	e7f2      	b.n	800a0de <__libc_init_array+0x1e>
 800a0f8:	0800c808 	.word	0x0800c808
 800a0fc:	0800c808 	.word	0x0800c808
 800a100:	0800c808 	.word	0x0800c808
 800a104:	0800c80c 	.word	0x0800c80c

0800a108 <memcpy>:
 800a108:	440a      	add	r2, r1
 800a10a:	4291      	cmp	r1, r2
 800a10c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a110:	d100      	bne.n	800a114 <memcpy+0xc>
 800a112:	4770      	bx	lr
 800a114:	b510      	push	{r4, lr}
 800a116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a11a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a11e:	4291      	cmp	r1, r2
 800a120:	d1f9      	bne.n	800a116 <memcpy+0xe>
 800a122:	bd10      	pop	{r4, pc}

0800a124 <atan2>:
 800a124:	f000 bd50 	b.w	800abc8 <__ieee754_atan2>

0800a128 <pow>:
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	ed2d 8b02 	vpush	{d8}
 800a12e:	eeb0 8a40 	vmov.f32	s16, s0
 800a132:	eef0 8a60 	vmov.f32	s17, s1
 800a136:	ec55 4b11 	vmov	r4, r5, d1
 800a13a:	f000 fe0d 	bl	800ad58 <__ieee754_pow>
 800a13e:	4622      	mov	r2, r4
 800a140:	462b      	mov	r3, r5
 800a142:	4620      	mov	r0, r4
 800a144:	4629      	mov	r1, r5
 800a146:	ec57 6b10 	vmov	r6, r7, d0
 800a14a:	f7f6 fc93 	bl	8000a74 <__aeabi_dcmpun>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d13b      	bne.n	800a1ca <pow+0xa2>
 800a152:	ec51 0b18 	vmov	r0, r1, d8
 800a156:	2200      	movs	r2, #0
 800a158:	2300      	movs	r3, #0
 800a15a:	f7f6 fc59 	bl	8000a10 <__aeabi_dcmpeq>
 800a15e:	b1b8      	cbz	r0, 800a190 <pow+0x68>
 800a160:	2200      	movs	r2, #0
 800a162:	2300      	movs	r3, #0
 800a164:	4620      	mov	r0, r4
 800a166:	4629      	mov	r1, r5
 800a168:	f7f6 fc52 	bl	8000a10 <__aeabi_dcmpeq>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d146      	bne.n	800a1fe <pow+0xd6>
 800a170:	ec45 4b10 	vmov	d0, r4, r5
 800a174:	f000 fabc 	bl	800a6f0 <finite>
 800a178:	b338      	cbz	r0, 800a1ca <pow+0xa2>
 800a17a:	2200      	movs	r2, #0
 800a17c:	2300      	movs	r3, #0
 800a17e:	4620      	mov	r0, r4
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 fc4f 	bl	8000a24 <__aeabi_dcmplt>
 800a186:	b300      	cbz	r0, 800a1ca <pow+0xa2>
 800a188:	f7ff ff94 	bl	800a0b4 <__errno>
 800a18c:	2322      	movs	r3, #34	@ 0x22
 800a18e:	e01b      	b.n	800a1c8 <pow+0xa0>
 800a190:	ec47 6b10 	vmov	d0, r6, r7
 800a194:	f000 faac 	bl	800a6f0 <finite>
 800a198:	b9e0      	cbnz	r0, 800a1d4 <pow+0xac>
 800a19a:	eeb0 0a48 	vmov.f32	s0, s16
 800a19e:	eef0 0a68 	vmov.f32	s1, s17
 800a1a2:	f000 faa5 	bl	800a6f0 <finite>
 800a1a6:	b1a8      	cbz	r0, 800a1d4 <pow+0xac>
 800a1a8:	ec45 4b10 	vmov	d0, r4, r5
 800a1ac:	f000 faa0 	bl	800a6f0 <finite>
 800a1b0:	b180      	cbz	r0, 800a1d4 <pow+0xac>
 800a1b2:	4632      	mov	r2, r6
 800a1b4:	463b      	mov	r3, r7
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	f7f6 fc5b 	bl	8000a74 <__aeabi_dcmpun>
 800a1be:	2800      	cmp	r0, #0
 800a1c0:	d0e2      	beq.n	800a188 <pow+0x60>
 800a1c2:	f7ff ff77 	bl	800a0b4 <__errno>
 800a1c6:	2321      	movs	r3, #33	@ 0x21
 800a1c8:	6003      	str	r3, [r0, #0]
 800a1ca:	ecbd 8b02 	vpop	{d8}
 800a1ce:	ec47 6b10 	vmov	d0, r6, r7
 800a1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	4630      	mov	r0, r6
 800a1da:	4639      	mov	r1, r7
 800a1dc:	f7f6 fc18 	bl	8000a10 <__aeabi_dcmpeq>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d0f2      	beq.n	800a1ca <pow+0xa2>
 800a1e4:	eeb0 0a48 	vmov.f32	s0, s16
 800a1e8:	eef0 0a68 	vmov.f32	s1, s17
 800a1ec:	f000 fa80 	bl	800a6f0 <finite>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d0ea      	beq.n	800a1ca <pow+0xa2>
 800a1f4:	ec45 4b10 	vmov	d0, r4, r5
 800a1f8:	f000 fa7a 	bl	800a6f0 <finite>
 800a1fc:	e7c3      	b.n	800a186 <pow+0x5e>
 800a1fe:	4f01      	ldr	r7, [pc, #4]	@ (800a204 <pow+0xdc>)
 800a200:	2600      	movs	r6, #0
 800a202:	e7e2      	b.n	800a1ca <pow+0xa2>
 800a204:	3ff00000 	.word	0x3ff00000

0800a208 <sqrt>:
 800a208:	b538      	push	{r3, r4, r5, lr}
 800a20a:	ed2d 8b02 	vpush	{d8}
 800a20e:	ec55 4b10 	vmov	r4, r5, d0
 800a212:	f000 fa79 	bl	800a708 <__ieee754_sqrt>
 800a216:	4622      	mov	r2, r4
 800a218:	462b      	mov	r3, r5
 800a21a:	4620      	mov	r0, r4
 800a21c:	4629      	mov	r1, r5
 800a21e:	eeb0 8a40 	vmov.f32	s16, s0
 800a222:	eef0 8a60 	vmov.f32	s17, s1
 800a226:	f7f6 fc25 	bl	8000a74 <__aeabi_dcmpun>
 800a22a:	b990      	cbnz	r0, 800a252 <sqrt+0x4a>
 800a22c:	2200      	movs	r2, #0
 800a22e:	2300      	movs	r3, #0
 800a230:	4620      	mov	r0, r4
 800a232:	4629      	mov	r1, r5
 800a234:	f7f6 fbf6 	bl	8000a24 <__aeabi_dcmplt>
 800a238:	b158      	cbz	r0, 800a252 <sqrt+0x4a>
 800a23a:	f7ff ff3b 	bl	800a0b4 <__errno>
 800a23e:	2321      	movs	r3, #33	@ 0x21
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	2200      	movs	r2, #0
 800a244:	2300      	movs	r3, #0
 800a246:	4610      	mov	r0, r2
 800a248:	4619      	mov	r1, r3
 800a24a:	f7f6 faa3 	bl	8000794 <__aeabi_ddiv>
 800a24e:	ec41 0b18 	vmov	d8, r0, r1
 800a252:	eeb0 0a48 	vmov.f32	s0, s16
 800a256:	eef0 0a68 	vmov.f32	s1, s17
 800a25a:	ecbd 8b02 	vpop	{d8}
 800a25e:	bd38      	pop	{r3, r4, r5, pc}

0800a260 <atan>:
 800a260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a264:	ec55 4b10 	vmov	r4, r5, d0
 800a268:	4bbf      	ldr	r3, [pc, #764]	@ (800a568 <atan+0x308>)
 800a26a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a26e:	429e      	cmp	r6, r3
 800a270:	46ab      	mov	fp, r5
 800a272:	d918      	bls.n	800a2a6 <atan+0x46>
 800a274:	4bbd      	ldr	r3, [pc, #756]	@ (800a56c <atan+0x30c>)
 800a276:	429e      	cmp	r6, r3
 800a278:	d801      	bhi.n	800a27e <atan+0x1e>
 800a27a:	d109      	bne.n	800a290 <atan+0x30>
 800a27c:	b144      	cbz	r4, 800a290 <atan+0x30>
 800a27e:	4622      	mov	r2, r4
 800a280:	462b      	mov	r3, r5
 800a282:	4620      	mov	r0, r4
 800a284:	4629      	mov	r1, r5
 800a286:	f7f5 ffa5 	bl	80001d4 <__adddf3>
 800a28a:	4604      	mov	r4, r0
 800a28c:	460d      	mov	r5, r1
 800a28e:	e006      	b.n	800a29e <atan+0x3e>
 800a290:	f1bb 0f00 	cmp.w	fp, #0
 800a294:	f340 812b 	ble.w	800a4ee <atan+0x28e>
 800a298:	a597      	add	r5, pc, #604	@ (adr r5, 800a4f8 <atan+0x298>)
 800a29a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a29e:	ec45 4b10 	vmov	d0, r4, r5
 800a2a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a6:	4bb2      	ldr	r3, [pc, #712]	@ (800a570 <atan+0x310>)
 800a2a8:	429e      	cmp	r6, r3
 800a2aa:	d813      	bhi.n	800a2d4 <atan+0x74>
 800a2ac:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800a2b0:	429e      	cmp	r6, r3
 800a2b2:	d80c      	bhi.n	800a2ce <atan+0x6e>
 800a2b4:	a392      	add	r3, pc, #584	@ (adr r3, 800a500 <atan+0x2a0>)
 800a2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ba:	4620      	mov	r0, r4
 800a2bc:	4629      	mov	r1, r5
 800a2be:	f7f5 ff89 	bl	80001d4 <__adddf3>
 800a2c2:	4bac      	ldr	r3, [pc, #688]	@ (800a574 <atan+0x314>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f7f6 fbcb 	bl	8000a60 <__aeabi_dcmpgt>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d1e7      	bne.n	800a29e <atan+0x3e>
 800a2ce:	f04f 3aff 	mov.w	sl, #4294967295
 800a2d2:	e029      	b.n	800a328 <atan+0xc8>
 800a2d4:	f000 f9b0 	bl	800a638 <fabs>
 800a2d8:	4ba7      	ldr	r3, [pc, #668]	@ (800a578 <atan+0x318>)
 800a2da:	429e      	cmp	r6, r3
 800a2dc:	ec55 4b10 	vmov	r4, r5, d0
 800a2e0:	f200 80bc 	bhi.w	800a45c <atan+0x1fc>
 800a2e4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800a2e8:	429e      	cmp	r6, r3
 800a2ea:	f200 809e 	bhi.w	800a42a <atan+0x1ca>
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7f5 ff6d 	bl	80001d4 <__adddf3>
 800a2fa:	4b9e      	ldr	r3, [pc, #632]	@ (800a574 <atan+0x314>)
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f7f5 ff67 	bl	80001d0 <__aeabi_dsub>
 800a302:	2200      	movs	r2, #0
 800a304:	4606      	mov	r6, r0
 800a306:	460f      	mov	r7, r1
 800a308:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a30c:	4620      	mov	r0, r4
 800a30e:	4629      	mov	r1, r5
 800a310:	f7f5 ff60 	bl	80001d4 <__adddf3>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4630      	mov	r0, r6
 800a31a:	4639      	mov	r1, r7
 800a31c:	f7f6 fa3a 	bl	8000794 <__aeabi_ddiv>
 800a320:	f04f 0a00 	mov.w	sl, #0
 800a324:	4604      	mov	r4, r0
 800a326:	460d      	mov	r5, r1
 800a328:	4622      	mov	r2, r4
 800a32a:	462b      	mov	r3, r5
 800a32c:	4620      	mov	r0, r4
 800a32e:	4629      	mov	r1, r5
 800a330:	f7f6 f906 	bl	8000540 <__aeabi_dmul>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4680      	mov	r8, r0
 800a33a:	4689      	mov	r9, r1
 800a33c:	f7f6 f900 	bl	8000540 <__aeabi_dmul>
 800a340:	a371      	add	r3, pc, #452	@ (adr r3, 800a508 <atan+0x2a8>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	4606      	mov	r6, r0
 800a348:	460f      	mov	r7, r1
 800a34a:	f7f6 f8f9 	bl	8000540 <__aeabi_dmul>
 800a34e:	a370      	add	r3, pc, #448	@ (adr r3, 800a510 <atan+0x2b0>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f5 ff3e 	bl	80001d4 <__adddf3>
 800a358:	4632      	mov	r2, r6
 800a35a:	463b      	mov	r3, r7
 800a35c:	f7f6 f8f0 	bl	8000540 <__aeabi_dmul>
 800a360:	a36d      	add	r3, pc, #436	@ (adr r3, 800a518 <atan+0x2b8>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f5 ff35 	bl	80001d4 <__adddf3>
 800a36a:	4632      	mov	r2, r6
 800a36c:	463b      	mov	r3, r7
 800a36e:	f7f6 f8e7 	bl	8000540 <__aeabi_dmul>
 800a372:	a36b      	add	r3, pc, #428	@ (adr r3, 800a520 <atan+0x2c0>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f5 ff2c 	bl	80001d4 <__adddf3>
 800a37c:	4632      	mov	r2, r6
 800a37e:	463b      	mov	r3, r7
 800a380:	f7f6 f8de 	bl	8000540 <__aeabi_dmul>
 800a384:	a368      	add	r3, pc, #416	@ (adr r3, 800a528 <atan+0x2c8>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 ff23 	bl	80001d4 <__adddf3>
 800a38e:	4632      	mov	r2, r6
 800a390:	463b      	mov	r3, r7
 800a392:	f7f6 f8d5 	bl	8000540 <__aeabi_dmul>
 800a396:	a366      	add	r3, pc, #408	@ (adr r3, 800a530 <atan+0x2d0>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f5 ff1a 	bl	80001d4 <__adddf3>
 800a3a0:	4642      	mov	r2, r8
 800a3a2:	464b      	mov	r3, r9
 800a3a4:	f7f6 f8cc 	bl	8000540 <__aeabi_dmul>
 800a3a8:	a363      	add	r3, pc, #396	@ (adr r3, 800a538 <atan+0x2d8>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	4680      	mov	r8, r0
 800a3b0:	4689      	mov	r9, r1
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f7f6 f8c3 	bl	8000540 <__aeabi_dmul>
 800a3ba:	a361      	add	r3, pc, #388	@ (adr r3, 800a540 <atan+0x2e0>)
 800a3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c0:	f7f5 ff06 	bl	80001d0 <__aeabi_dsub>
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	463b      	mov	r3, r7
 800a3c8:	f7f6 f8ba 	bl	8000540 <__aeabi_dmul>
 800a3cc:	a35e      	add	r3, pc, #376	@ (adr r3, 800a548 <atan+0x2e8>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f7f5 fefd 	bl	80001d0 <__aeabi_dsub>
 800a3d6:	4632      	mov	r2, r6
 800a3d8:	463b      	mov	r3, r7
 800a3da:	f7f6 f8b1 	bl	8000540 <__aeabi_dmul>
 800a3de:	a35c      	add	r3, pc, #368	@ (adr r3, 800a550 <atan+0x2f0>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f5 fef4 	bl	80001d0 <__aeabi_dsub>
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	463b      	mov	r3, r7
 800a3ec:	f7f6 f8a8 	bl	8000540 <__aeabi_dmul>
 800a3f0:	a359      	add	r3, pc, #356	@ (adr r3, 800a558 <atan+0x2f8>)
 800a3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f6:	f7f5 feeb 	bl	80001d0 <__aeabi_dsub>
 800a3fa:	4632      	mov	r2, r6
 800a3fc:	463b      	mov	r3, r7
 800a3fe:	f7f6 f89f 	bl	8000540 <__aeabi_dmul>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	4640      	mov	r0, r8
 800a408:	4649      	mov	r1, r9
 800a40a:	f7f5 fee3 	bl	80001d4 <__adddf3>
 800a40e:	4622      	mov	r2, r4
 800a410:	462b      	mov	r3, r5
 800a412:	f7f6 f895 	bl	8000540 <__aeabi_dmul>
 800a416:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	d148      	bne.n	800a4b2 <atan+0x252>
 800a420:	4620      	mov	r0, r4
 800a422:	4629      	mov	r1, r5
 800a424:	f7f5 fed4 	bl	80001d0 <__aeabi_dsub>
 800a428:	e72f      	b.n	800a28a <atan+0x2a>
 800a42a:	4b52      	ldr	r3, [pc, #328]	@ (800a574 <atan+0x314>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	4620      	mov	r0, r4
 800a430:	4629      	mov	r1, r5
 800a432:	f7f5 fecd 	bl	80001d0 <__aeabi_dsub>
 800a436:	4b4f      	ldr	r3, [pc, #316]	@ (800a574 <atan+0x314>)
 800a438:	4606      	mov	r6, r0
 800a43a:	460f      	mov	r7, r1
 800a43c:	2200      	movs	r2, #0
 800a43e:	4620      	mov	r0, r4
 800a440:	4629      	mov	r1, r5
 800a442:	f7f5 fec7 	bl	80001d4 <__adddf3>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	4630      	mov	r0, r6
 800a44c:	4639      	mov	r1, r7
 800a44e:	f7f6 f9a1 	bl	8000794 <__aeabi_ddiv>
 800a452:	f04f 0a01 	mov.w	sl, #1
 800a456:	4604      	mov	r4, r0
 800a458:	460d      	mov	r5, r1
 800a45a:	e765      	b.n	800a328 <atan+0xc8>
 800a45c:	4b47      	ldr	r3, [pc, #284]	@ (800a57c <atan+0x31c>)
 800a45e:	429e      	cmp	r6, r3
 800a460:	d21c      	bcs.n	800a49c <atan+0x23c>
 800a462:	4b47      	ldr	r3, [pc, #284]	@ (800a580 <atan+0x320>)
 800a464:	2200      	movs	r2, #0
 800a466:	4620      	mov	r0, r4
 800a468:	4629      	mov	r1, r5
 800a46a:	f7f5 feb1 	bl	80001d0 <__aeabi_dsub>
 800a46e:	4b44      	ldr	r3, [pc, #272]	@ (800a580 <atan+0x320>)
 800a470:	4606      	mov	r6, r0
 800a472:	460f      	mov	r7, r1
 800a474:	2200      	movs	r2, #0
 800a476:	4620      	mov	r0, r4
 800a478:	4629      	mov	r1, r5
 800a47a:	f7f6 f861 	bl	8000540 <__aeabi_dmul>
 800a47e:	4b3d      	ldr	r3, [pc, #244]	@ (800a574 <atan+0x314>)
 800a480:	2200      	movs	r2, #0
 800a482:	f7f5 fea7 	bl	80001d4 <__adddf3>
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	4630      	mov	r0, r6
 800a48c:	4639      	mov	r1, r7
 800a48e:	f7f6 f981 	bl	8000794 <__aeabi_ddiv>
 800a492:	f04f 0a02 	mov.w	sl, #2
 800a496:	4604      	mov	r4, r0
 800a498:	460d      	mov	r5, r1
 800a49a:	e745      	b.n	800a328 <atan+0xc8>
 800a49c:	4622      	mov	r2, r4
 800a49e:	462b      	mov	r3, r5
 800a4a0:	4938      	ldr	r1, [pc, #224]	@ (800a584 <atan+0x324>)
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	f7f6 f976 	bl	8000794 <__aeabi_ddiv>
 800a4a8:	f04f 0a03 	mov.w	sl, #3
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	460d      	mov	r5, r1
 800a4b0:	e73a      	b.n	800a328 <atan+0xc8>
 800a4b2:	4b35      	ldr	r3, [pc, #212]	@ (800a588 <atan+0x328>)
 800a4b4:	4e35      	ldr	r6, [pc, #212]	@ (800a58c <atan+0x32c>)
 800a4b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	f7f5 fe87 	bl	80001d0 <__aeabi_dsub>
 800a4c2:	4622      	mov	r2, r4
 800a4c4:	462b      	mov	r3, r5
 800a4c6:	f7f5 fe83 	bl	80001d0 <__aeabi_dsub>
 800a4ca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a4d6:	f7f5 fe7b 	bl	80001d0 <__aeabi_dsub>
 800a4da:	f1bb 0f00 	cmp.w	fp, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	460d      	mov	r5, r1
 800a4e2:	f6bf aedc 	bge.w	800a29e <atan+0x3e>
 800a4e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4ea:	461d      	mov	r5, r3
 800a4ec:	e6d7      	b.n	800a29e <atan+0x3e>
 800a4ee:	a51c      	add	r5, pc, #112	@ (adr r5, 800a560 <atan+0x300>)
 800a4f0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4f4:	e6d3      	b.n	800a29e <atan+0x3e>
 800a4f6:	bf00      	nop
 800a4f8:	54442d18 	.word	0x54442d18
 800a4fc:	3ff921fb 	.word	0x3ff921fb
 800a500:	8800759c 	.word	0x8800759c
 800a504:	7e37e43c 	.word	0x7e37e43c
 800a508:	e322da11 	.word	0xe322da11
 800a50c:	3f90ad3a 	.word	0x3f90ad3a
 800a510:	24760deb 	.word	0x24760deb
 800a514:	3fa97b4b 	.word	0x3fa97b4b
 800a518:	a0d03d51 	.word	0xa0d03d51
 800a51c:	3fb10d66 	.word	0x3fb10d66
 800a520:	c54c206e 	.word	0xc54c206e
 800a524:	3fb745cd 	.word	0x3fb745cd
 800a528:	920083ff 	.word	0x920083ff
 800a52c:	3fc24924 	.word	0x3fc24924
 800a530:	5555550d 	.word	0x5555550d
 800a534:	3fd55555 	.word	0x3fd55555
 800a538:	2c6a6c2f 	.word	0x2c6a6c2f
 800a53c:	bfa2b444 	.word	0xbfa2b444
 800a540:	52defd9a 	.word	0x52defd9a
 800a544:	3fadde2d 	.word	0x3fadde2d
 800a548:	af749a6d 	.word	0xaf749a6d
 800a54c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a550:	fe231671 	.word	0xfe231671
 800a554:	3fbc71c6 	.word	0x3fbc71c6
 800a558:	9998ebc4 	.word	0x9998ebc4
 800a55c:	3fc99999 	.word	0x3fc99999
 800a560:	54442d18 	.word	0x54442d18
 800a564:	bff921fb 	.word	0xbff921fb
 800a568:	440fffff 	.word	0x440fffff
 800a56c:	7ff00000 	.word	0x7ff00000
 800a570:	3fdbffff 	.word	0x3fdbffff
 800a574:	3ff00000 	.word	0x3ff00000
 800a578:	3ff2ffff 	.word	0x3ff2ffff
 800a57c:	40038000 	.word	0x40038000
 800a580:	3ff80000 	.word	0x3ff80000
 800a584:	bff00000 	.word	0xbff00000
 800a588:	0800c588 	.word	0x0800c588
 800a58c:	0800c5a8 	.word	0x0800c5a8

0800a590 <cos>:
 800a590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a592:	ec53 2b10 	vmov	r2, r3, d0
 800a596:	4826      	ldr	r0, [pc, #152]	@ (800a630 <cos+0xa0>)
 800a598:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a59c:	4281      	cmp	r1, r0
 800a59e:	d806      	bhi.n	800a5ae <cos+0x1e>
 800a5a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a628 <cos+0x98>
 800a5a4:	b005      	add	sp, #20
 800a5a6:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5aa:	f000 b989 	b.w	800a8c0 <__kernel_cos>
 800a5ae:	4821      	ldr	r0, [pc, #132]	@ (800a634 <cos+0xa4>)
 800a5b0:	4281      	cmp	r1, r0
 800a5b2:	d908      	bls.n	800a5c6 <cos+0x36>
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	f7f5 fe0a 	bl	80001d0 <__aeabi_dsub>
 800a5bc:	ec41 0b10 	vmov	d0, r0, r1
 800a5c0:	b005      	add	sp, #20
 800a5c2:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5c6:	4668      	mov	r0, sp
 800a5c8:	f001 f90a 	bl	800b7e0 <__ieee754_rem_pio2>
 800a5cc:	f000 0003 	and.w	r0, r0, #3
 800a5d0:	2801      	cmp	r0, #1
 800a5d2:	d00b      	beq.n	800a5ec <cos+0x5c>
 800a5d4:	2802      	cmp	r0, #2
 800a5d6:	d015      	beq.n	800a604 <cos+0x74>
 800a5d8:	b9d8      	cbnz	r0, 800a612 <cos+0x82>
 800a5da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5de:	ed9d 0b00 	vldr	d0, [sp]
 800a5e2:	f000 f96d 	bl	800a8c0 <__kernel_cos>
 800a5e6:	ec51 0b10 	vmov	r0, r1, d0
 800a5ea:	e7e7      	b.n	800a5bc <cos+0x2c>
 800a5ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5f0:	ed9d 0b00 	vldr	d0, [sp]
 800a5f4:	f000 fa2c 	bl	800aa50 <__kernel_sin>
 800a5f8:	ec53 2b10 	vmov	r2, r3, d0
 800a5fc:	4610      	mov	r0, r2
 800a5fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a602:	e7db      	b.n	800a5bc <cos+0x2c>
 800a604:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a608:	ed9d 0b00 	vldr	d0, [sp]
 800a60c:	f000 f958 	bl	800a8c0 <__kernel_cos>
 800a610:	e7f2      	b.n	800a5f8 <cos+0x68>
 800a612:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a616:	ed9d 0b00 	vldr	d0, [sp]
 800a61a:	2001      	movs	r0, #1
 800a61c:	f000 fa18 	bl	800aa50 <__kernel_sin>
 800a620:	e7e1      	b.n	800a5e6 <cos+0x56>
 800a622:	bf00      	nop
 800a624:	f3af 8000 	nop.w
	...
 800a630:	3fe921fb 	.word	0x3fe921fb
 800a634:	7fefffff 	.word	0x7fefffff

0800a638 <fabs>:
 800a638:	ec51 0b10 	vmov	r0, r1, d0
 800a63c:	4602      	mov	r2, r0
 800a63e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a642:	ec43 2b10 	vmov	d0, r2, r3
 800a646:	4770      	bx	lr

0800a648 <sin>:
 800a648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a64a:	ec53 2b10 	vmov	r2, r3, d0
 800a64e:	4826      	ldr	r0, [pc, #152]	@ (800a6e8 <sin+0xa0>)
 800a650:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a654:	4281      	cmp	r1, r0
 800a656:	d807      	bhi.n	800a668 <sin+0x20>
 800a658:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a6e0 <sin+0x98>
 800a65c:	2000      	movs	r0, #0
 800a65e:	b005      	add	sp, #20
 800a660:	f85d eb04 	ldr.w	lr, [sp], #4
 800a664:	f000 b9f4 	b.w	800aa50 <__kernel_sin>
 800a668:	4820      	ldr	r0, [pc, #128]	@ (800a6ec <sin+0xa4>)
 800a66a:	4281      	cmp	r1, r0
 800a66c:	d908      	bls.n	800a680 <sin+0x38>
 800a66e:	4610      	mov	r0, r2
 800a670:	4619      	mov	r1, r3
 800a672:	f7f5 fdad 	bl	80001d0 <__aeabi_dsub>
 800a676:	ec41 0b10 	vmov	d0, r0, r1
 800a67a:	b005      	add	sp, #20
 800a67c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a680:	4668      	mov	r0, sp
 800a682:	f001 f8ad 	bl	800b7e0 <__ieee754_rem_pio2>
 800a686:	f000 0003 	and.w	r0, r0, #3
 800a68a:	2801      	cmp	r0, #1
 800a68c:	d00c      	beq.n	800a6a8 <sin+0x60>
 800a68e:	2802      	cmp	r0, #2
 800a690:	d011      	beq.n	800a6b6 <sin+0x6e>
 800a692:	b9e8      	cbnz	r0, 800a6d0 <sin+0x88>
 800a694:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a698:	ed9d 0b00 	vldr	d0, [sp]
 800a69c:	2001      	movs	r0, #1
 800a69e:	f000 f9d7 	bl	800aa50 <__kernel_sin>
 800a6a2:	ec51 0b10 	vmov	r0, r1, d0
 800a6a6:	e7e6      	b.n	800a676 <sin+0x2e>
 800a6a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ac:	ed9d 0b00 	vldr	d0, [sp]
 800a6b0:	f000 f906 	bl	800a8c0 <__kernel_cos>
 800a6b4:	e7f5      	b.n	800a6a2 <sin+0x5a>
 800a6b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ba:	ed9d 0b00 	vldr	d0, [sp]
 800a6be:	2001      	movs	r0, #1
 800a6c0:	f000 f9c6 	bl	800aa50 <__kernel_sin>
 800a6c4:	ec53 2b10 	vmov	r2, r3, d0
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a6ce:	e7d2      	b.n	800a676 <sin+0x2e>
 800a6d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6d4:	ed9d 0b00 	vldr	d0, [sp]
 800a6d8:	f000 f8f2 	bl	800a8c0 <__kernel_cos>
 800a6dc:	e7f2      	b.n	800a6c4 <sin+0x7c>
 800a6de:	bf00      	nop
	...
 800a6e8:	3fe921fb 	.word	0x3fe921fb
 800a6ec:	7fefffff 	.word	0x7fefffff

0800a6f0 <finite>:
 800a6f0:	b082      	sub	sp, #8
 800a6f2:	ed8d 0b00 	vstr	d0, [sp]
 800a6f6:	9801      	ldr	r0, [sp, #4]
 800a6f8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a6fc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a700:	0fc0      	lsrs	r0, r0, #31
 800a702:	b002      	add	sp, #8
 800a704:	4770      	bx	lr
	...

0800a708 <__ieee754_sqrt>:
 800a708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	4a68      	ldr	r2, [pc, #416]	@ (800a8b0 <__ieee754_sqrt+0x1a8>)
 800a70e:	ec55 4b10 	vmov	r4, r5, d0
 800a712:	43aa      	bics	r2, r5
 800a714:	462b      	mov	r3, r5
 800a716:	4621      	mov	r1, r4
 800a718:	d110      	bne.n	800a73c <__ieee754_sqrt+0x34>
 800a71a:	4622      	mov	r2, r4
 800a71c:	4620      	mov	r0, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	f7f5 ff0e 	bl	8000540 <__aeabi_dmul>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	4620      	mov	r0, r4
 800a72a:	4629      	mov	r1, r5
 800a72c:	f7f5 fd52 	bl	80001d4 <__adddf3>
 800a730:	4604      	mov	r4, r0
 800a732:	460d      	mov	r5, r1
 800a734:	ec45 4b10 	vmov	d0, r4, r5
 800a738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73c:	2d00      	cmp	r5, #0
 800a73e:	dc0e      	bgt.n	800a75e <__ieee754_sqrt+0x56>
 800a740:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a744:	4322      	orrs	r2, r4
 800a746:	d0f5      	beq.n	800a734 <__ieee754_sqrt+0x2c>
 800a748:	b19d      	cbz	r5, 800a772 <__ieee754_sqrt+0x6a>
 800a74a:	4622      	mov	r2, r4
 800a74c:	4620      	mov	r0, r4
 800a74e:	4629      	mov	r1, r5
 800a750:	f7f5 fd3e 	bl	80001d0 <__aeabi_dsub>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	f7f6 f81c 	bl	8000794 <__aeabi_ddiv>
 800a75c:	e7e8      	b.n	800a730 <__ieee754_sqrt+0x28>
 800a75e:	152a      	asrs	r2, r5, #20
 800a760:	d115      	bne.n	800a78e <__ieee754_sqrt+0x86>
 800a762:	2000      	movs	r0, #0
 800a764:	e009      	b.n	800a77a <__ieee754_sqrt+0x72>
 800a766:	0acb      	lsrs	r3, r1, #11
 800a768:	3a15      	subs	r2, #21
 800a76a:	0549      	lsls	r1, r1, #21
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0fa      	beq.n	800a766 <__ieee754_sqrt+0x5e>
 800a770:	e7f7      	b.n	800a762 <__ieee754_sqrt+0x5a>
 800a772:	462a      	mov	r2, r5
 800a774:	e7fa      	b.n	800a76c <__ieee754_sqrt+0x64>
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	3001      	adds	r0, #1
 800a77a:	02dc      	lsls	r4, r3, #11
 800a77c:	d5fb      	bpl.n	800a776 <__ieee754_sqrt+0x6e>
 800a77e:	1e44      	subs	r4, r0, #1
 800a780:	1b12      	subs	r2, r2, r4
 800a782:	f1c0 0420 	rsb	r4, r0, #32
 800a786:	fa21 f404 	lsr.w	r4, r1, r4
 800a78a:	4323      	orrs	r3, r4
 800a78c:	4081      	lsls	r1, r0
 800a78e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a792:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a796:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a79a:	07d2      	lsls	r2, r2, #31
 800a79c:	bf5c      	itt	pl
 800a79e:	005b      	lslpl	r3, r3, #1
 800a7a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a7a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a7a8:	bf58      	it	pl
 800a7aa:	0049      	lslpl	r1, r1, #1
 800a7ac:	2600      	movs	r6, #0
 800a7ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a7b2:	106d      	asrs	r5, r5, #1
 800a7b4:	0049      	lsls	r1, r1, #1
 800a7b6:	2016      	movs	r0, #22
 800a7b8:	4632      	mov	r2, r6
 800a7ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a7be:	1917      	adds	r7, r2, r4
 800a7c0:	429f      	cmp	r7, r3
 800a7c2:	bfde      	ittt	le
 800a7c4:	193a      	addle	r2, r7, r4
 800a7c6:	1bdb      	suble	r3, r3, r7
 800a7c8:	1936      	addle	r6, r6, r4
 800a7ca:	0fcf      	lsrs	r7, r1, #31
 800a7cc:	3801      	subs	r0, #1
 800a7ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a7d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a7d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a7da:	d1f0      	bne.n	800a7be <__ieee754_sqrt+0xb6>
 800a7dc:	4604      	mov	r4, r0
 800a7de:	2720      	movs	r7, #32
 800a7e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	eb00 0e0c 	add.w	lr, r0, ip
 800a7ea:	db02      	blt.n	800a7f2 <__ieee754_sqrt+0xea>
 800a7ec:	d113      	bne.n	800a816 <__ieee754_sqrt+0x10e>
 800a7ee:	458e      	cmp	lr, r1
 800a7f0:	d811      	bhi.n	800a816 <__ieee754_sqrt+0x10e>
 800a7f2:	f1be 0f00 	cmp.w	lr, #0
 800a7f6:	eb0e 000c 	add.w	r0, lr, ip
 800a7fa:	da42      	bge.n	800a882 <__ieee754_sqrt+0x17a>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	db40      	blt.n	800a882 <__ieee754_sqrt+0x17a>
 800a800:	f102 0801 	add.w	r8, r2, #1
 800a804:	1a9b      	subs	r3, r3, r2
 800a806:	458e      	cmp	lr, r1
 800a808:	bf88      	it	hi
 800a80a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a80e:	eba1 010e 	sub.w	r1, r1, lr
 800a812:	4464      	add	r4, ip
 800a814:	4642      	mov	r2, r8
 800a816:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a81a:	3f01      	subs	r7, #1
 800a81c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a820:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a824:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a828:	d1dc      	bne.n	800a7e4 <__ieee754_sqrt+0xdc>
 800a82a:	4319      	orrs	r1, r3
 800a82c:	d01b      	beq.n	800a866 <__ieee754_sqrt+0x15e>
 800a82e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a8b4 <__ieee754_sqrt+0x1ac>
 800a832:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a8b8 <__ieee754_sqrt+0x1b0>
 800a836:	e9da 0100 	ldrd	r0, r1, [sl]
 800a83a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a83e:	f7f5 fcc7 	bl	80001d0 <__aeabi_dsub>
 800a842:	e9da 8900 	ldrd	r8, r9, [sl]
 800a846:	4602      	mov	r2, r0
 800a848:	460b      	mov	r3, r1
 800a84a:	4640      	mov	r0, r8
 800a84c:	4649      	mov	r1, r9
 800a84e:	f7f6 f8f3 	bl	8000a38 <__aeabi_dcmple>
 800a852:	b140      	cbz	r0, 800a866 <__ieee754_sqrt+0x15e>
 800a854:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a858:	e9da 0100 	ldrd	r0, r1, [sl]
 800a85c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a860:	d111      	bne.n	800a886 <__ieee754_sqrt+0x17e>
 800a862:	3601      	adds	r6, #1
 800a864:	463c      	mov	r4, r7
 800a866:	1072      	asrs	r2, r6, #1
 800a868:	0863      	lsrs	r3, r4, #1
 800a86a:	07f1      	lsls	r1, r6, #31
 800a86c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a870:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a874:	bf48      	it	mi
 800a876:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a87a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a87e:	4618      	mov	r0, r3
 800a880:	e756      	b.n	800a730 <__ieee754_sqrt+0x28>
 800a882:	4690      	mov	r8, r2
 800a884:	e7be      	b.n	800a804 <__ieee754_sqrt+0xfc>
 800a886:	f7f5 fca5 	bl	80001d4 <__adddf3>
 800a88a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4640      	mov	r0, r8
 800a894:	4649      	mov	r1, r9
 800a896:	f7f6 f8c5 	bl	8000a24 <__aeabi_dcmplt>
 800a89a:	b120      	cbz	r0, 800a8a6 <__ieee754_sqrt+0x19e>
 800a89c:	1ca0      	adds	r0, r4, #2
 800a89e:	bf08      	it	eq
 800a8a0:	3601      	addeq	r6, #1
 800a8a2:	3402      	adds	r4, #2
 800a8a4:	e7df      	b.n	800a866 <__ieee754_sqrt+0x15e>
 800a8a6:	1c63      	adds	r3, r4, #1
 800a8a8:	f023 0401 	bic.w	r4, r3, #1
 800a8ac:	e7db      	b.n	800a866 <__ieee754_sqrt+0x15e>
 800a8ae:	bf00      	nop
 800a8b0:	7ff00000 	.word	0x7ff00000
 800a8b4:	200000c0 	.word	0x200000c0
 800a8b8:	200000b8 	.word	0x200000b8
 800a8bc:	00000000 	.word	0x00000000

0800a8c0 <__kernel_cos>:
 800a8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	ec57 6b10 	vmov	r6, r7, d0
 800a8c8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a8cc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a8d0:	ed8d 1b00 	vstr	d1, [sp]
 800a8d4:	d206      	bcs.n	800a8e4 <__kernel_cos+0x24>
 800a8d6:	4630      	mov	r0, r6
 800a8d8:	4639      	mov	r1, r7
 800a8da:	f7f6 f8e1 	bl	8000aa0 <__aeabi_d2iz>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f000 8088 	beq.w	800a9f4 <__kernel_cos+0x134>
 800a8e4:	4632      	mov	r2, r6
 800a8e6:	463b      	mov	r3, r7
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f5 fe28 	bl	8000540 <__aeabi_dmul>
 800a8f0:	4b51      	ldr	r3, [pc, #324]	@ (800aa38 <__kernel_cos+0x178>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	460d      	mov	r5, r1
 800a8f8:	f7f5 fe22 	bl	8000540 <__aeabi_dmul>
 800a8fc:	a340      	add	r3, pc, #256	@ (adr r3, 800aa00 <__kernel_cos+0x140>)
 800a8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a902:	4682      	mov	sl, r0
 800a904:	468b      	mov	fp, r1
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f5 fe19 	bl	8000540 <__aeabi_dmul>
 800a90e:	a33e      	add	r3, pc, #248	@ (adr r3, 800aa08 <__kernel_cos+0x148>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f7f5 fc5e 	bl	80001d4 <__adddf3>
 800a918:	4622      	mov	r2, r4
 800a91a:	462b      	mov	r3, r5
 800a91c:	f7f5 fe10 	bl	8000540 <__aeabi_dmul>
 800a920:	a33b      	add	r3, pc, #236	@ (adr r3, 800aa10 <__kernel_cos+0x150>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f7f5 fc53 	bl	80001d0 <__aeabi_dsub>
 800a92a:	4622      	mov	r2, r4
 800a92c:	462b      	mov	r3, r5
 800a92e:	f7f5 fe07 	bl	8000540 <__aeabi_dmul>
 800a932:	a339      	add	r3, pc, #228	@ (adr r3, 800aa18 <__kernel_cos+0x158>)
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	f7f5 fc4c 	bl	80001d4 <__adddf3>
 800a93c:	4622      	mov	r2, r4
 800a93e:	462b      	mov	r3, r5
 800a940:	f7f5 fdfe 	bl	8000540 <__aeabi_dmul>
 800a944:	a336      	add	r3, pc, #216	@ (adr r3, 800aa20 <__kernel_cos+0x160>)
 800a946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94a:	f7f5 fc41 	bl	80001d0 <__aeabi_dsub>
 800a94e:	4622      	mov	r2, r4
 800a950:	462b      	mov	r3, r5
 800a952:	f7f5 fdf5 	bl	8000540 <__aeabi_dmul>
 800a956:	a334      	add	r3, pc, #208	@ (adr r3, 800aa28 <__kernel_cos+0x168>)
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	f7f5 fc3a 	bl	80001d4 <__adddf3>
 800a960:	4622      	mov	r2, r4
 800a962:	462b      	mov	r3, r5
 800a964:	f7f5 fdec 	bl	8000540 <__aeabi_dmul>
 800a968:	4622      	mov	r2, r4
 800a96a:	462b      	mov	r3, r5
 800a96c:	f7f5 fde8 	bl	8000540 <__aeabi_dmul>
 800a970:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a974:	4604      	mov	r4, r0
 800a976:	460d      	mov	r5, r1
 800a978:	4630      	mov	r0, r6
 800a97a:	4639      	mov	r1, r7
 800a97c:	f7f5 fde0 	bl	8000540 <__aeabi_dmul>
 800a980:	460b      	mov	r3, r1
 800a982:	4602      	mov	r2, r0
 800a984:	4629      	mov	r1, r5
 800a986:	4620      	mov	r0, r4
 800a988:	f7f5 fc22 	bl	80001d0 <__aeabi_dsub>
 800a98c:	4b2b      	ldr	r3, [pc, #172]	@ (800aa3c <__kernel_cos+0x17c>)
 800a98e:	4598      	cmp	r8, r3
 800a990:	4606      	mov	r6, r0
 800a992:	460f      	mov	r7, r1
 800a994:	d810      	bhi.n	800a9b8 <__kernel_cos+0xf8>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4650      	mov	r0, sl
 800a99c:	4659      	mov	r1, fp
 800a99e:	f7f5 fc17 	bl	80001d0 <__aeabi_dsub>
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4926      	ldr	r1, [pc, #152]	@ (800aa40 <__kernel_cos+0x180>)
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	f7f5 fc11 	bl	80001d0 <__aeabi_dsub>
 800a9ae:	ec41 0b10 	vmov	d0, r0, r1
 800a9b2:	b003      	add	sp, #12
 800a9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b8:	4b22      	ldr	r3, [pc, #136]	@ (800aa44 <__kernel_cos+0x184>)
 800a9ba:	4921      	ldr	r1, [pc, #132]	@ (800aa40 <__kernel_cos+0x180>)
 800a9bc:	4598      	cmp	r8, r3
 800a9be:	bf8c      	ite	hi
 800a9c0:	4d21      	ldrhi	r5, [pc, #132]	@ (800aa48 <__kernel_cos+0x188>)
 800a9c2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a9c6:	2400      	movs	r4, #0
 800a9c8:	4622      	mov	r2, r4
 800a9ca:	462b      	mov	r3, r5
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	f7f5 fbff 	bl	80001d0 <__aeabi_dsub>
 800a9d2:	4622      	mov	r2, r4
 800a9d4:	4680      	mov	r8, r0
 800a9d6:	4689      	mov	r9, r1
 800a9d8:	462b      	mov	r3, r5
 800a9da:	4650      	mov	r0, sl
 800a9dc:	4659      	mov	r1, fp
 800a9de:	f7f5 fbf7 	bl	80001d0 <__aeabi_dsub>
 800a9e2:	4632      	mov	r2, r6
 800a9e4:	463b      	mov	r3, r7
 800a9e6:	f7f5 fbf3 	bl	80001d0 <__aeabi_dsub>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	4640      	mov	r0, r8
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	e7da      	b.n	800a9aa <__kernel_cos+0xea>
 800a9f4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800aa30 <__kernel_cos+0x170>
 800a9f8:	e7db      	b.n	800a9b2 <__kernel_cos+0xf2>
 800a9fa:	bf00      	nop
 800a9fc:	f3af 8000 	nop.w
 800aa00:	be8838d4 	.word	0xbe8838d4
 800aa04:	bda8fae9 	.word	0xbda8fae9
 800aa08:	bdb4b1c4 	.word	0xbdb4b1c4
 800aa0c:	3e21ee9e 	.word	0x3e21ee9e
 800aa10:	809c52ad 	.word	0x809c52ad
 800aa14:	3e927e4f 	.word	0x3e927e4f
 800aa18:	19cb1590 	.word	0x19cb1590
 800aa1c:	3efa01a0 	.word	0x3efa01a0
 800aa20:	16c15177 	.word	0x16c15177
 800aa24:	3f56c16c 	.word	0x3f56c16c
 800aa28:	5555554c 	.word	0x5555554c
 800aa2c:	3fa55555 	.word	0x3fa55555
 800aa30:	00000000 	.word	0x00000000
 800aa34:	3ff00000 	.word	0x3ff00000
 800aa38:	3fe00000 	.word	0x3fe00000
 800aa3c:	3fd33332 	.word	0x3fd33332
 800aa40:	3ff00000 	.word	0x3ff00000
 800aa44:	3fe90000 	.word	0x3fe90000
 800aa48:	3fd20000 	.word	0x3fd20000
 800aa4c:	00000000 	.word	0x00000000

0800aa50 <__kernel_sin>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	ec55 4b10 	vmov	r4, r5, d0
 800aa58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800aa62:	ed8d 1b02 	vstr	d1, [sp, #8]
 800aa66:	4680      	mov	r8, r0
 800aa68:	d205      	bcs.n	800aa76 <__kernel_sin+0x26>
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	4629      	mov	r1, r5
 800aa6e:	f7f6 f817 	bl	8000aa0 <__aeabi_d2iz>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	d052      	beq.n	800ab1c <__kernel_sin+0xcc>
 800aa76:	4622      	mov	r2, r4
 800aa78:	462b      	mov	r3, r5
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	f7f5 fd5f 	bl	8000540 <__aeabi_dmul>
 800aa82:	4682      	mov	sl, r0
 800aa84:	468b      	mov	fp, r1
 800aa86:	4602      	mov	r2, r0
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	f7f5 fd57 	bl	8000540 <__aeabi_dmul>
 800aa92:	a342      	add	r3, pc, #264	@ (adr r3, 800ab9c <__kernel_sin+0x14c>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	e9cd 0100 	strd	r0, r1, [sp]
 800aa9c:	4650      	mov	r0, sl
 800aa9e:	4659      	mov	r1, fp
 800aaa0:	f7f5 fd4e 	bl	8000540 <__aeabi_dmul>
 800aaa4:	a33f      	add	r3, pc, #252	@ (adr r3, 800aba4 <__kernel_sin+0x154>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f7f5 fb91 	bl	80001d0 <__aeabi_dsub>
 800aaae:	4652      	mov	r2, sl
 800aab0:	465b      	mov	r3, fp
 800aab2:	f7f5 fd45 	bl	8000540 <__aeabi_dmul>
 800aab6:	a33d      	add	r3, pc, #244	@ (adr r3, 800abac <__kernel_sin+0x15c>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7f5 fb8a 	bl	80001d4 <__adddf3>
 800aac0:	4652      	mov	r2, sl
 800aac2:	465b      	mov	r3, fp
 800aac4:	f7f5 fd3c 	bl	8000540 <__aeabi_dmul>
 800aac8:	a33a      	add	r3, pc, #232	@ (adr r3, 800abb4 <__kernel_sin+0x164>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	f7f5 fb7f 	bl	80001d0 <__aeabi_dsub>
 800aad2:	4652      	mov	r2, sl
 800aad4:	465b      	mov	r3, fp
 800aad6:	f7f5 fd33 	bl	8000540 <__aeabi_dmul>
 800aada:	a338      	add	r3, pc, #224	@ (adr r3, 800abbc <__kernel_sin+0x16c>)
 800aadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae0:	f7f5 fb78 	bl	80001d4 <__adddf3>
 800aae4:	4606      	mov	r6, r0
 800aae6:	460f      	mov	r7, r1
 800aae8:	f1b8 0f00 	cmp.w	r8, #0
 800aaec:	d11b      	bne.n	800ab26 <__kernel_sin+0xd6>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	4650      	mov	r0, sl
 800aaf4:	4659      	mov	r1, fp
 800aaf6:	f7f5 fd23 	bl	8000540 <__aeabi_dmul>
 800aafa:	a325      	add	r3, pc, #148	@ (adr r3, 800ab90 <__kernel_sin+0x140>)
 800aafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab00:	f7f5 fb66 	bl	80001d0 <__aeabi_dsub>
 800ab04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab08:	f7f5 fd1a 	bl	8000540 <__aeabi_dmul>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4620      	mov	r0, r4
 800ab12:	4629      	mov	r1, r5
 800ab14:	f7f5 fb5e 	bl	80001d4 <__adddf3>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	460d      	mov	r5, r1
 800ab1c:	ec45 4b10 	vmov	d0, r4, r5
 800ab20:	b005      	add	sp, #20
 800ab22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab2a:	4b1b      	ldr	r3, [pc, #108]	@ (800ab98 <__kernel_sin+0x148>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f7f5 fd07 	bl	8000540 <__aeabi_dmul>
 800ab32:	4632      	mov	r2, r6
 800ab34:	4680      	mov	r8, r0
 800ab36:	4689      	mov	r9, r1
 800ab38:	463b      	mov	r3, r7
 800ab3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab3e:	f7f5 fcff 	bl	8000540 <__aeabi_dmul>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4640      	mov	r0, r8
 800ab48:	4649      	mov	r1, r9
 800ab4a:	f7f5 fb41 	bl	80001d0 <__aeabi_dsub>
 800ab4e:	4652      	mov	r2, sl
 800ab50:	465b      	mov	r3, fp
 800ab52:	f7f5 fcf5 	bl	8000540 <__aeabi_dmul>
 800ab56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab5a:	f7f5 fb39 	bl	80001d0 <__aeabi_dsub>
 800ab5e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ab90 <__kernel_sin+0x140>)
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	4606      	mov	r6, r0
 800ab66:	460f      	mov	r7, r1
 800ab68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab6c:	f7f5 fce8 	bl	8000540 <__aeabi_dmul>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4630      	mov	r0, r6
 800ab76:	4639      	mov	r1, r7
 800ab78:	f7f5 fb2c 	bl	80001d4 <__adddf3>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4620      	mov	r0, r4
 800ab82:	4629      	mov	r1, r5
 800ab84:	f7f5 fb24 	bl	80001d0 <__aeabi_dsub>
 800ab88:	e7c6      	b.n	800ab18 <__kernel_sin+0xc8>
 800ab8a:	bf00      	nop
 800ab8c:	f3af 8000 	nop.w
 800ab90:	55555549 	.word	0x55555549
 800ab94:	3fc55555 	.word	0x3fc55555
 800ab98:	3fe00000 	.word	0x3fe00000
 800ab9c:	5acfd57c 	.word	0x5acfd57c
 800aba0:	3de5d93a 	.word	0x3de5d93a
 800aba4:	8a2b9ceb 	.word	0x8a2b9ceb
 800aba8:	3e5ae5e6 	.word	0x3e5ae5e6
 800abac:	57b1fe7d 	.word	0x57b1fe7d
 800abb0:	3ec71de3 	.word	0x3ec71de3
 800abb4:	19c161d5 	.word	0x19c161d5
 800abb8:	3f2a01a0 	.word	0x3f2a01a0
 800abbc:	1110f8a6 	.word	0x1110f8a6
 800abc0:	3f811111 	.word	0x3f811111
 800abc4:	00000000 	.word	0x00000000

0800abc8 <__ieee754_atan2>:
 800abc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abcc:	ec57 6b11 	vmov	r6, r7, d1
 800abd0:	4273      	negs	r3, r6
 800abd2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ad50 <__ieee754_atan2+0x188>
 800abd6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800abda:	4333      	orrs	r3, r6
 800abdc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800abe0:	4543      	cmp	r3, r8
 800abe2:	ec51 0b10 	vmov	r0, r1, d0
 800abe6:	4635      	mov	r5, r6
 800abe8:	d809      	bhi.n	800abfe <__ieee754_atan2+0x36>
 800abea:	4244      	negs	r4, r0
 800abec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800abf0:	4304      	orrs	r4, r0
 800abf2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800abf6:	4544      	cmp	r4, r8
 800abf8:	468e      	mov	lr, r1
 800abfa:	4681      	mov	r9, r0
 800abfc:	d907      	bls.n	800ac0e <__ieee754_atan2+0x46>
 800abfe:	4632      	mov	r2, r6
 800ac00:	463b      	mov	r3, r7
 800ac02:	f7f5 fae7 	bl	80001d4 <__adddf3>
 800ac06:	ec41 0b10 	vmov	d0, r0, r1
 800ac0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac0e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ac12:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ac16:	4334      	orrs	r4, r6
 800ac18:	d103      	bne.n	800ac22 <__ieee754_atan2+0x5a>
 800ac1a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac1e:	f7ff bb1f 	b.w	800a260 <atan>
 800ac22:	17bc      	asrs	r4, r7, #30
 800ac24:	f004 0402 	and.w	r4, r4, #2
 800ac28:	ea53 0909 	orrs.w	r9, r3, r9
 800ac2c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ac30:	d107      	bne.n	800ac42 <__ieee754_atan2+0x7a>
 800ac32:	2c02      	cmp	r4, #2
 800ac34:	d05f      	beq.n	800acf6 <__ieee754_atan2+0x12e>
 800ac36:	2c03      	cmp	r4, #3
 800ac38:	d1e5      	bne.n	800ac06 <__ieee754_atan2+0x3e>
 800ac3a:	a141      	add	r1, pc, #260	@ (adr r1, 800ad40 <__ieee754_atan2+0x178>)
 800ac3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac40:	e7e1      	b.n	800ac06 <__ieee754_atan2+0x3e>
 800ac42:	4315      	orrs	r5, r2
 800ac44:	d106      	bne.n	800ac54 <__ieee754_atan2+0x8c>
 800ac46:	f1be 0f00 	cmp.w	lr, #0
 800ac4a:	da5f      	bge.n	800ad0c <__ieee754_atan2+0x144>
 800ac4c:	a13e      	add	r1, pc, #248	@ (adr r1, 800ad48 <__ieee754_atan2+0x180>)
 800ac4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac52:	e7d8      	b.n	800ac06 <__ieee754_atan2+0x3e>
 800ac54:	4542      	cmp	r2, r8
 800ac56:	d10f      	bne.n	800ac78 <__ieee754_atan2+0xb0>
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac5e:	d107      	bne.n	800ac70 <__ieee754_atan2+0xa8>
 800ac60:	2c02      	cmp	r4, #2
 800ac62:	d84c      	bhi.n	800acfe <__ieee754_atan2+0x136>
 800ac64:	4b34      	ldr	r3, [pc, #208]	@ (800ad38 <__ieee754_atan2+0x170>)
 800ac66:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ac6a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac6e:	e7ca      	b.n	800ac06 <__ieee754_atan2+0x3e>
 800ac70:	2c02      	cmp	r4, #2
 800ac72:	d848      	bhi.n	800ad06 <__ieee754_atan2+0x13e>
 800ac74:	4b31      	ldr	r3, [pc, #196]	@ (800ad3c <__ieee754_atan2+0x174>)
 800ac76:	e7f6      	b.n	800ac66 <__ieee754_atan2+0x9e>
 800ac78:	4543      	cmp	r3, r8
 800ac7a:	d0e4      	beq.n	800ac46 <__ieee754_atan2+0x7e>
 800ac7c:	1a9b      	subs	r3, r3, r2
 800ac7e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ac82:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ac86:	da1e      	bge.n	800acc6 <__ieee754_atan2+0xfe>
 800ac88:	2f00      	cmp	r7, #0
 800ac8a:	da01      	bge.n	800ac90 <__ieee754_atan2+0xc8>
 800ac8c:	323c      	adds	r2, #60	@ 0x3c
 800ac8e:	db1e      	blt.n	800acce <__ieee754_atan2+0x106>
 800ac90:	4632      	mov	r2, r6
 800ac92:	463b      	mov	r3, r7
 800ac94:	f7f5 fd7e 	bl	8000794 <__aeabi_ddiv>
 800ac98:	ec41 0b10 	vmov	d0, r0, r1
 800ac9c:	f7ff fccc 	bl	800a638 <fabs>
 800aca0:	f7ff fade 	bl	800a260 <atan>
 800aca4:	ec51 0b10 	vmov	r0, r1, d0
 800aca8:	2c01      	cmp	r4, #1
 800acaa:	d013      	beq.n	800acd4 <__ieee754_atan2+0x10c>
 800acac:	2c02      	cmp	r4, #2
 800acae:	d015      	beq.n	800acdc <__ieee754_atan2+0x114>
 800acb0:	2c00      	cmp	r4, #0
 800acb2:	d0a8      	beq.n	800ac06 <__ieee754_atan2+0x3e>
 800acb4:	a318      	add	r3, pc, #96	@ (adr r3, 800ad18 <__ieee754_atan2+0x150>)
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	f7f5 fa89 	bl	80001d0 <__aeabi_dsub>
 800acbe:	a318      	add	r3, pc, #96	@ (adr r3, 800ad20 <__ieee754_atan2+0x158>)
 800acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc4:	e014      	b.n	800acf0 <__ieee754_atan2+0x128>
 800acc6:	a118      	add	r1, pc, #96	@ (adr r1, 800ad28 <__ieee754_atan2+0x160>)
 800acc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800accc:	e7ec      	b.n	800aca8 <__ieee754_atan2+0xe0>
 800acce:	2000      	movs	r0, #0
 800acd0:	2100      	movs	r1, #0
 800acd2:	e7e9      	b.n	800aca8 <__ieee754_atan2+0xe0>
 800acd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800acd8:	4619      	mov	r1, r3
 800acda:	e794      	b.n	800ac06 <__ieee754_atan2+0x3e>
 800acdc:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad18 <__ieee754_atan2+0x150>)
 800acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace2:	f7f5 fa75 	bl	80001d0 <__aeabi_dsub>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	a10d      	add	r1, pc, #52	@ (adr r1, 800ad20 <__ieee754_atan2+0x158>)
 800acec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acf0:	f7f5 fa6e 	bl	80001d0 <__aeabi_dsub>
 800acf4:	e787      	b.n	800ac06 <__ieee754_atan2+0x3e>
 800acf6:	a10a      	add	r1, pc, #40	@ (adr r1, 800ad20 <__ieee754_atan2+0x158>)
 800acf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acfc:	e783      	b.n	800ac06 <__ieee754_atan2+0x3e>
 800acfe:	a10c      	add	r1, pc, #48	@ (adr r1, 800ad30 <__ieee754_atan2+0x168>)
 800ad00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad04:	e77f      	b.n	800ac06 <__ieee754_atan2+0x3e>
 800ad06:	2000      	movs	r0, #0
 800ad08:	2100      	movs	r1, #0
 800ad0a:	e77c      	b.n	800ac06 <__ieee754_atan2+0x3e>
 800ad0c:	a106      	add	r1, pc, #24	@ (adr r1, 800ad28 <__ieee754_atan2+0x160>)
 800ad0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad12:	e778      	b.n	800ac06 <__ieee754_atan2+0x3e>
 800ad14:	f3af 8000 	nop.w
 800ad18:	33145c07 	.word	0x33145c07
 800ad1c:	3ca1a626 	.word	0x3ca1a626
 800ad20:	54442d18 	.word	0x54442d18
 800ad24:	400921fb 	.word	0x400921fb
 800ad28:	54442d18 	.word	0x54442d18
 800ad2c:	3ff921fb 	.word	0x3ff921fb
 800ad30:	54442d18 	.word	0x54442d18
 800ad34:	3fe921fb 	.word	0x3fe921fb
 800ad38:	0800c5e0 	.word	0x0800c5e0
 800ad3c:	0800c5c8 	.word	0x0800c5c8
 800ad40:	54442d18 	.word	0x54442d18
 800ad44:	c00921fb 	.word	0xc00921fb
 800ad48:	54442d18 	.word	0x54442d18
 800ad4c:	bff921fb 	.word	0xbff921fb
 800ad50:	7ff00000 	.word	0x7ff00000
 800ad54:	00000000 	.word	0x00000000

0800ad58 <__ieee754_pow>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	b091      	sub	sp, #68	@ 0x44
 800ad5e:	ed8d 1b00 	vstr	d1, [sp]
 800ad62:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ad66:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ad6a:	ea5a 0001 	orrs.w	r0, sl, r1
 800ad6e:	ec57 6b10 	vmov	r6, r7, d0
 800ad72:	d113      	bne.n	800ad9c <__ieee754_pow+0x44>
 800ad74:	19b3      	adds	r3, r6, r6
 800ad76:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ad7a:	4152      	adcs	r2, r2
 800ad7c:	4298      	cmp	r0, r3
 800ad7e:	4b98      	ldr	r3, [pc, #608]	@ (800afe0 <__ieee754_pow+0x288>)
 800ad80:	4193      	sbcs	r3, r2
 800ad82:	f080 84ea 	bcs.w	800b75a <__ieee754_pow+0xa02>
 800ad86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad8a:	4630      	mov	r0, r6
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fa21 	bl	80001d4 <__adddf3>
 800ad92:	ec41 0b10 	vmov	d0, r0, r1
 800ad96:	b011      	add	sp, #68	@ 0x44
 800ad98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9c:	4a91      	ldr	r2, [pc, #580]	@ (800afe4 <__ieee754_pow+0x28c>)
 800ad9e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ada2:	4590      	cmp	r8, r2
 800ada4:	463d      	mov	r5, r7
 800ada6:	4633      	mov	r3, r6
 800ada8:	d806      	bhi.n	800adb8 <__ieee754_pow+0x60>
 800adaa:	d101      	bne.n	800adb0 <__ieee754_pow+0x58>
 800adac:	2e00      	cmp	r6, #0
 800adae:	d1ea      	bne.n	800ad86 <__ieee754_pow+0x2e>
 800adb0:	4592      	cmp	sl, r2
 800adb2:	d801      	bhi.n	800adb8 <__ieee754_pow+0x60>
 800adb4:	d10e      	bne.n	800add4 <__ieee754_pow+0x7c>
 800adb6:	b169      	cbz	r1, 800add4 <__ieee754_pow+0x7c>
 800adb8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800adbc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800adc0:	431d      	orrs	r5, r3
 800adc2:	d1e0      	bne.n	800ad86 <__ieee754_pow+0x2e>
 800adc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800adc8:	18db      	adds	r3, r3, r3
 800adca:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800adce:	4152      	adcs	r2, r2
 800add0:	429d      	cmp	r5, r3
 800add2:	e7d4      	b.n	800ad7e <__ieee754_pow+0x26>
 800add4:	2d00      	cmp	r5, #0
 800add6:	46c3      	mov	fp, r8
 800add8:	da3a      	bge.n	800ae50 <__ieee754_pow+0xf8>
 800adda:	4a83      	ldr	r2, [pc, #524]	@ (800afe8 <__ieee754_pow+0x290>)
 800addc:	4592      	cmp	sl, r2
 800adde:	d84d      	bhi.n	800ae7c <__ieee754_pow+0x124>
 800ade0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ade4:	4592      	cmp	sl, r2
 800ade6:	f240 84c7 	bls.w	800b778 <__ieee754_pow+0xa20>
 800adea:	ea4f 522a 	mov.w	r2, sl, asr #20
 800adee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800adf2:	2a14      	cmp	r2, #20
 800adf4:	dd0f      	ble.n	800ae16 <__ieee754_pow+0xbe>
 800adf6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800adfa:	fa21 f402 	lsr.w	r4, r1, r2
 800adfe:	fa04 f202 	lsl.w	r2, r4, r2
 800ae02:	428a      	cmp	r2, r1
 800ae04:	f040 84b8 	bne.w	800b778 <__ieee754_pow+0xa20>
 800ae08:	f004 0401 	and.w	r4, r4, #1
 800ae0c:	f1c4 0402 	rsb	r4, r4, #2
 800ae10:	2900      	cmp	r1, #0
 800ae12:	d158      	bne.n	800aec6 <__ieee754_pow+0x16e>
 800ae14:	e00e      	b.n	800ae34 <__ieee754_pow+0xdc>
 800ae16:	2900      	cmp	r1, #0
 800ae18:	d154      	bne.n	800aec4 <__ieee754_pow+0x16c>
 800ae1a:	f1c2 0214 	rsb	r2, r2, #20
 800ae1e:	fa4a f402 	asr.w	r4, sl, r2
 800ae22:	fa04 f202 	lsl.w	r2, r4, r2
 800ae26:	4552      	cmp	r2, sl
 800ae28:	f040 84a3 	bne.w	800b772 <__ieee754_pow+0xa1a>
 800ae2c:	f004 0401 	and.w	r4, r4, #1
 800ae30:	f1c4 0402 	rsb	r4, r4, #2
 800ae34:	4a6d      	ldr	r2, [pc, #436]	@ (800afec <__ieee754_pow+0x294>)
 800ae36:	4592      	cmp	sl, r2
 800ae38:	d12e      	bne.n	800ae98 <__ieee754_pow+0x140>
 800ae3a:	f1b9 0f00 	cmp.w	r9, #0
 800ae3e:	f280 8494 	bge.w	800b76a <__ieee754_pow+0xa12>
 800ae42:	496a      	ldr	r1, [pc, #424]	@ (800afec <__ieee754_pow+0x294>)
 800ae44:	4632      	mov	r2, r6
 800ae46:	463b      	mov	r3, r7
 800ae48:	2000      	movs	r0, #0
 800ae4a:	f7f5 fca3 	bl	8000794 <__aeabi_ddiv>
 800ae4e:	e7a0      	b.n	800ad92 <__ieee754_pow+0x3a>
 800ae50:	2400      	movs	r4, #0
 800ae52:	bbc1      	cbnz	r1, 800aec6 <__ieee754_pow+0x16e>
 800ae54:	4a63      	ldr	r2, [pc, #396]	@ (800afe4 <__ieee754_pow+0x28c>)
 800ae56:	4592      	cmp	sl, r2
 800ae58:	d1ec      	bne.n	800ae34 <__ieee754_pow+0xdc>
 800ae5a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800ae5e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800ae62:	431a      	orrs	r2, r3
 800ae64:	f000 8479 	beq.w	800b75a <__ieee754_pow+0xa02>
 800ae68:	4b61      	ldr	r3, [pc, #388]	@ (800aff0 <__ieee754_pow+0x298>)
 800ae6a:	4598      	cmp	r8, r3
 800ae6c:	d908      	bls.n	800ae80 <__ieee754_pow+0x128>
 800ae6e:	f1b9 0f00 	cmp.w	r9, #0
 800ae72:	f2c0 8476 	blt.w	800b762 <__ieee754_pow+0xa0a>
 800ae76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ae7a:	e78a      	b.n	800ad92 <__ieee754_pow+0x3a>
 800ae7c:	2402      	movs	r4, #2
 800ae7e:	e7e8      	b.n	800ae52 <__ieee754_pow+0xfa>
 800ae80:	f1b9 0f00 	cmp.w	r9, #0
 800ae84:	f04f 0000 	mov.w	r0, #0
 800ae88:	f04f 0100 	mov.w	r1, #0
 800ae8c:	da81      	bge.n	800ad92 <__ieee754_pow+0x3a>
 800ae8e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ae92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ae96:	e77c      	b.n	800ad92 <__ieee754_pow+0x3a>
 800ae98:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ae9c:	d106      	bne.n	800aeac <__ieee754_pow+0x154>
 800ae9e:	4632      	mov	r2, r6
 800aea0:	463b      	mov	r3, r7
 800aea2:	4630      	mov	r0, r6
 800aea4:	4639      	mov	r1, r7
 800aea6:	f7f5 fb4b 	bl	8000540 <__aeabi_dmul>
 800aeaa:	e772      	b.n	800ad92 <__ieee754_pow+0x3a>
 800aeac:	4a51      	ldr	r2, [pc, #324]	@ (800aff4 <__ieee754_pow+0x29c>)
 800aeae:	4591      	cmp	r9, r2
 800aeb0:	d109      	bne.n	800aec6 <__ieee754_pow+0x16e>
 800aeb2:	2d00      	cmp	r5, #0
 800aeb4:	db07      	blt.n	800aec6 <__ieee754_pow+0x16e>
 800aeb6:	ec47 6b10 	vmov	d0, r6, r7
 800aeba:	b011      	add	sp, #68	@ 0x44
 800aebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	f7ff bc22 	b.w	800a708 <__ieee754_sqrt>
 800aec4:	2400      	movs	r4, #0
 800aec6:	ec47 6b10 	vmov	d0, r6, r7
 800aeca:	9302      	str	r3, [sp, #8]
 800aecc:	f7ff fbb4 	bl	800a638 <fabs>
 800aed0:	9b02      	ldr	r3, [sp, #8]
 800aed2:	ec51 0b10 	vmov	r0, r1, d0
 800aed6:	bb53      	cbnz	r3, 800af2e <__ieee754_pow+0x1d6>
 800aed8:	4b44      	ldr	r3, [pc, #272]	@ (800afec <__ieee754_pow+0x294>)
 800aeda:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800aede:	429a      	cmp	r2, r3
 800aee0:	d002      	beq.n	800aee8 <__ieee754_pow+0x190>
 800aee2:	f1b8 0f00 	cmp.w	r8, #0
 800aee6:	d122      	bne.n	800af2e <__ieee754_pow+0x1d6>
 800aee8:	f1b9 0f00 	cmp.w	r9, #0
 800aeec:	da05      	bge.n	800aefa <__ieee754_pow+0x1a2>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	2000      	movs	r0, #0
 800aef4:	493d      	ldr	r1, [pc, #244]	@ (800afec <__ieee754_pow+0x294>)
 800aef6:	f7f5 fc4d 	bl	8000794 <__aeabi_ddiv>
 800aefa:	2d00      	cmp	r5, #0
 800aefc:	f6bf af49 	bge.w	800ad92 <__ieee754_pow+0x3a>
 800af00:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800af04:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800af08:	ea58 0804 	orrs.w	r8, r8, r4
 800af0c:	d108      	bne.n	800af20 <__ieee754_pow+0x1c8>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	4610      	mov	r0, r2
 800af14:	4619      	mov	r1, r3
 800af16:	f7f5 f95b 	bl	80001d0 <__aeabi_dsub>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	e794      	b.n	800ae4a <__ieee754_pow+0xf2>
 800af20:	2c01      	cmp	r4, #1
 800af22:	f47f af36 	bne.w	800ad92 <__ieee754_pow+0x3a>
 800af26:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af2a:	4619      	mov	r1, r3
 800af2c:	e731      	b.n	800ad92 <__ieee754_pow+0x3a>
 800af2e:	0feb      	lsrs	r3, r5, #31
 800af30:	3b01      	subs	r3, #1
 800af32:	ea53 0204 	orrs.w	r2, r3, r4
 800af36:	d102      	bne.n	800af3e <__ieee754_pow+0x1e6>
 800af38:	4632      	mov	r2, r6
 800af3a:	463b      	mov	r3, r7
 800af3c:	e7e9      	b.n	800af12 <__ieee754_pow+0x1ba>
 800af3e:	3c01      	subs	r4, #1
 800af40:	431c      	orrs	r4, r3
 800af42:	d016      	beq.n	800af72 <__ieee754_pow+0x21a>
 800af44:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800afd0 <__ieee754_pow+0x278>
 800af48:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800af4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af50:	f240 8112 	bls.w	800b178 <__ieee754_pow+0x420>
 800af54:	4b28      	ldr	r3, [pc, #160]	@ (800aff8 <__ieee754_pow+0x2a0>)
 800af56:	459a      	cmp	sl, r3
 800af58:	4b25      	ldr	r3, [pc, #148]	@ (800aff0 <__ieee754_pow+0x298>)
 800af5a:	d916      	bls.n	800af8a <__ieee754_pow+0x232>
 800af5c:	4598      	cmp	r8, r3
 800af5e:	d80b      	bhi.n	800af78 <__ieee754_pow+0x220>
 800af60:	f1b9 0f00 	cmp.w	r9, #0
 800af64:	da0b      	bge.n	800af7e <__ieee754_pow+0x226>
 800af66:	2000      	movs	r0, #0
 800af68:	b011      	add	sp, #68	@ 0x44
 800af6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6e:	f000 bee7 	b.w	800bd40 <__math_oflow>
 800af72:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800afd8 <__ieee754_pow+0x280>
 800af76:	e7e7      	b.n	800af48 <__ieee754_pow+0x1f0>
 800af78:	f1b9 0f00 	cmp.w	r9, #0
 800af7c:	dcf3      	bgt.n	800af66 <__ieee754_pow+0x20e>
 800af7e:	2000      	movs	r0, #0
 800af80:	b011      	add	sp, #68	@ 0x44
 800af82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af86:	f000 bed3 	b.w	800bd30 <__math_uflow>
 800af8a:	4598      	cmp	r8, r3
 800af8c:	d20c      	bcs.n	800afa8 <__ieee754_pow+0x250>
 800af8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af92:	2200      	movs	r2, #0
 800af94:	2300      	movs	r3, #0
 800af96:	f7f5 fd45 	bl	8000a24 <__aeabi_dcmplt>
 800af9a:	3800      	subs	r0, #0
 800af9c:	bf18      	it	ne
 800af9e:	2001      	movne	r0, #1
 800afa0:	f1b9 0f00 	cmp.w	r9, #0
 800afa4:	daec      	bge.n	800af80 <__ieee754_pow+0x228>
 800afa6:	e7df      	b.n	800af68 <__ieee754_pow+0x210>
 800afa8:	4b10      	ldr	r3, [pc, #64]	@ (800afec <__ieee754_pow+0x294>)
 800afaa:	4598      	cmp	r8, r3
 800afac:	f04f 0200 	mov.w	r2, #0
 800afb0:	d924      	bls.n	800affc <__ieee754_pow+0x2a4>
 800afb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afb6:	2300      	movs	r3, #0
 800afb8:	f7f5 fd34 	bl	8000a24 <__aeabi_dcmplt>
 800afbc:	3800      	subs	r0, #0
 800afbe:	bf18      	it	ne
 800afc0:	2001      	movne	r0, #1
 800afc2:	f1b9 0f00 	cmp.w	r9, #0
 800afc6:	dccf      	bgt.n	800af68 <__ieee754_pow+0x210>
 800afc8:	e7da      	b.n	800af80 <__ieee754_pow+0x228>
 800afca:	bf00      	nop
 800afcc:	f3af 8000 	nop.w
 800afd0:	00000000 	.word	0x00000000
 800afd4:	3ff00000 	.word	0x3ff00000
 800afd8:	00000000 	.word	0x00000000
 800afdc:	bff00000 	.word	0xbff00000
 800afe0:	fff00000 	.word	0xfff00000
 800afe4:	7ff00000 	.word	0x7ff00000
 800afe8:	433fffff 	.word	0x433fffff
 800afec:	3ff00000 	.word	0x3ff00000
 800aff0:	3fefffff 	.word	0x3fefffff
 800aff4:	3fe00000 	.word	0x3fe00000
 800aff8:	43f00000 	.word	0x43f00000
 800affc:	4b5a      	ldr	r3, [pc, #360]	@ (800b168 <__ieee754_pow+0x410>)
 800affe:	f7f5 f8e7 	bl	80001d0 <__aeabi_dsub>
 800b002:	a351      	add	r3, pc, #324	@ (adr r3, 800b148 <__ieee754_pow+0x3f0>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	4604      	mov	r4, r0
 800b00a:	460d      	mov	r5, r1
 800b00c:	f7f5 fa98 	bl	8000540 <__aeabi_dmul>
 800b010:	a34f      	add	r3, pc, #316	@ (adr r3, 800b150 <__ieee754_pow+0x3f8>)
 800b012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b016:	4606      	mov	r6, r0
 800b018:	460f      	mov	r7, r1
 800b01a:	4620      	mov	r0, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	f7f5 fa8f 	bl	8000540 <__aeabi_dmul>
 800b022:	4b52      	ldr	r3, [pc, #328]	@ (800b16c <__ieee754_pow+0x414>)
 800b024:	4682      	mov	sl, r0
 800b026:	468b      	mov	fp, r1
 800b028:	2200      	movs	r2, #0
 800b02a:	4620      	mov	r0, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7f5 fa87 	bl	8000540 <__aeabi_dmul>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	a148      	add	r1, pc, #288	@ (adr r1, 800b158 <__ieee754_pow+0x400>)
 800b038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b03c:	f7f5 f8c8 	bl	80001d0 <__aeabi_dsub>
 800b040:	4622      	mov	r2, r4
 800b042:	462b      	mov	r3, r5
 800b044:	f7f5 fa7c 	bl	8000540 <__aeabi_dmul>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	2000      	movs	r0, #0
 800b04e:	4948      	ldr	r1, [pc, #288]	@ (800b170 <__ieee754_pow+0x418>)
 800b050:	f7f5 f8be 	bl	80001d0 <__aeabi_dsub>
 800b054:	4622      	mov	r2, r4
 800b056:	4680      	mov	r8, r0
 800b058:	4689      	mov	r9, r1
 800b05a:	462b      	mov	r3, r5
 800b05c:	4620      	mov	r0, r4
 800b05e:	4629      	mov	r1, r5
 800b060:	f7f5 fa6e 	bl	8000540 <__aeabi_dmul>
 800b064:	4602      	mov	r2, r0
 800b066:	460b      	mov	r3, r1
 800b068:	4640      	mov	r0, r8
 800b06a:	4649      	mov	r1, r9
 800b06c:	f7f5 fa68 	bl	8000540 <__aeabi_dmul>
 800b070:	a33b      	add	r3, pc, #236	@ (adr r3, 800b160 <__ieee754_pow+0x408>)
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	f7f5 fa63 	bl	8000540 <__aeabi_dmul>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4650      	mov	r0, sl
 800b080:	4659      	mov	r1, fp
 800b082:	f7f5 f8a5 	bl	80001d0 <__aeabi_dsub>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	4680      	mov	r8, r0
 800b08c:	4689      	mov	r9, r1
 800b08e:	4630      	mov	r0, r6
 800b090:	4639      	mov	r1, r7
 800b092:	f7f5 f89f 	bl	80001d4 <__adddf3>
 800b096:	2400      	movs	r4, #0
 800b098:	4632      	mov	r2, r6
 800b09a:	463b      	mov	r3, r7
 800b09c:	4620      	mov	r0, r4
 800b09e:	460d      	mov	r5, r1
 800b0a0:	f7f5 f896 	bl	80001d0 <__aeabi_dsub>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	4640      	mov	r0, r8
 800b0aa:	4649      	mov	r1, r9
 800b0ac:	f7f5 f890 	bl	80001d0 <__aeabi_dsub>
 800b0b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	9304      	str	r3, [sp, #16]
 800b0bc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b0c0:	4606      	mov	r6, r0
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	4652      	mov	r2, sl
 800b0c6:	465b      	mov	r3, fp
 800b0c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b0cc:	f7f5 f880 	bl	80001d0 <__aeabi_dsub>
 800b0d0:	4622      	mov	r2, r4
 800b0d2:	462b      	mov	r3, r5
 800b0d4:	f7f5 fa34 	bl	8000540 <__aeabi_dmul>
 800b0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0dc:	4680      	mov	r8, r0
 800b0de:	4689      	mov	r9, r1
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	f7f5 fa2c 	bl	8000540 <__aeabi_dmul>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	f7f5 f870 	bl	80001d4 <__adddf3>
 800b0f4:	4652      	mov	r2, sl
 800b0f6:	465b      	mov	r3, fp
 800b0f8:	4606      	mov	r6, r0
 800b0fa:	460f      	mov	r7, r1
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	4629      	mov	r1, r5
 800b100:	f7f5 fa1e 	bl	8000540 <__aeabi_dmul>
 800b104:	460b      	mov	r3, r1
 800b106:	4602      	mov	r2, r0
 800b108:	4680      	mov	r8, r0
 800b10a:	4689      	mov	r9, r1
 800b10c:	4630      	mov	r0, r6
 800b10e:	4639      	mov	r1, r7
 800b110:	f7f5 f860 	bl	80001d4 <__adddf3>
 800b114:	4b17      	ldr	r3, [pc, #92]	@ (800b174 <__ieee754_pow+0x41c>)
 800b116:	4299      	cmp	r1, r3
 800b118:	4604      	mov	r4, r0
 800b11a:	460d      	mov	r5, r1
 800b11c:	468a      	mov	sl, r1
 800b11e:	468b      	mov	fp, r1
 800b120:	f340 82ef 	ble.w	800b702 <__ieee754_pow+0x9aa>
 800b124:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b128:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b12c:	4303      	orrs	r3, r0
 800b12e:	f000 81e8 	beq.w	800b502 <__ieee754_pow+0x7aa>
 800b132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b136:	2200      	movs	r2, #0
 800b138:	2300      	movs	r3, #0
 800b13a:	f7f5 fc73 	bl	8000a24 <__aeabi_dcmplt>
 800b13e:	3800      	subs	r0, #0
 800b140:	bf18      	it	ne
 800b142:	2001      	movne	r0, #1
 800b144:	e710      	b.n	800af68 <__ieee754_pow+0x210>
 800b146:	bf00      	nop
 800b148:	60000000 	.word	0x60000000
 800b14c:	3ff71547 	.word	0x3ff71547
 800b150:	f85ddf44 	.word	0xf85ddf44
 800b154:	3e54ae0b 	.word	0x3e54ae0b
 800b158:	55555555 	.word	0x55555555
 800b15c:	3fd55555 	.word	0x3fd55555
 800b160:	652b82fe 	.word	0x652b82fe
 800b164:	3ff71547 	.word	0x3ff71547
 800b168:	3ff00000 	.word	0x3ff00000
 800b16c:	3fd00000 	.word	0x3fd00000
 800b170:	3fe00000 	.word	0x3fe00000
 800b174:	408fffff 	.word	0x408fffff
 800b178:	4bd5      	ldr	r3, [pc, #852]	@ (800b4d0 <__ieee754_pow+0x778>)
 800b17a:	402b      	ands	r3, r5
 800b17c:	2200      	movs	r2, #0
 800b17e:	b92b      	cbnz	r3, 800b18c <__ieee754_pow+0x434>
 800b180:	4bd4      	ldr	r3, [pc, #848]	@ (800b4d4 <__ieee754_pow+0x77c>)
 800b182:	f7f5 f9dd 	bl	8000540 <__aeabi_dmul>
 800b186:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b18a:	468b      	mov	fp, r1
 800b18c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b190:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b194:	4413      	add	r3, r2
 800b196:	930a      	str	r3, [sp, #40]	@ 0x28
 800b198:	4bcf      	ldr	r3, [pc, #828]	@ (800b4d8 <__ieee754_pow+0x780>)
 800b19a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b19e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b1a2:	459b      	cmp	fp, r3
 800b1a4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b1a8:	dd08      	ble.n	800b1bc <__ieee754_pow+0x464>
 800b1aa:	4bcc      	ldr	r3, [pc, #816]	@ (800b4dc <__ieee754_pow+0x784>)
 800b1ac:	459b      	cmp	fp, r3
 800b1ae:	f340 81a5 	ble.w	800b4fc <__ieee754_pow+0x7a4>
 800b1b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1b4:	3301      	adds	r3, #1
 800b1b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1b8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b1bc:	f04f 0a00 	mov.w	sl, #0
 800b1c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b1c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1c6:	4bc6      	ldr	r3, [pc, #792]	@ (800b4e0 <__ieee754_pow+0x788>)
 800b1c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b1cc:	ed93 7b00 	vldr	d7, [r3]
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	ec53 2b17 	vmov	r2, r3, d7
 800b1d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1de:	f7f4 fff7 	bl	80001d0 <__aeabi_dsub>
 800b1e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	460f      	mov	r7, r1
 800b1ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1ee:	f7f4 fff1 	bl	80001d4 <__adddf3>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	49ba      	ldr	r1, [pc, #744]	@ (800b4e4 <__ieee754_pow+0x78c>)
 800b1fa:	f7f5 facb 	bl	8000794 <__aeabi_ddiv>
 800b1fe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	4630      	mov	r0, r6
 800b208:	4639      	mov	r1, r7
 800b20a:	f7f5 f999 	bl	8000540 <__aeabi_dmul>
 800b20e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b212:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b216:	106d      	asrs	r5, r5, #1
 800b218:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b21c:	f04f 0b00 	mov.w	fp, #0
 800b220:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b224:	4661      	mov	r1, ip
 800b226:	2200      	movs	r2, #0
 800b228:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b22c:	4658      	mov	r0, fp
 800b22e:	46e1      	mov	r9, ip
 800b230:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b234:	4614      	mov	r4, r2
 800b236:	461d      	mov	r5, r3
 800b238:	f7f5 f982 	bl	8000540 <__aeabi_dmul>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4630      	mov	r0, r6
 800b242:	4639      	mov	r1, r7
 800b244:	f7f4 ffc4 	bl	80001d0 <__aeabi_dsub>
 800b248:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b24c:	4606      	mov	r6, r0
 800b24e:	460f      	mov	r7, r1
 800b250:	4620      	mov	r0, r4
 800b252:	4629      	mov	r1, r5
 800b254:	f7f4 ffbc 	bl	80001d0 <__aeabi_dsub>
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b260:	f7f4 ffb6 	bl	80001d0 <__aeabi_dsub>
 800b264:	465a      	mov	r2, fp
 800b266:	464b      	mov	r3, r9
 800b268:	f7f5 f96a 	bl	8000540 <__aeabi_dmul>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4630      	mov	r0, r6
 800b272:	4639      	mov	r1, r7
 800b274:	f7f4 ffac 	bl	80001d0 <__aeabi_dsub>
 800b278:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b27c:	f7f5 f960 	bl	8000540 <__aeabi_dmul>
 800b280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b284:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b288:	4610      	mov	r0, r2
 800b28a:	4619      	mov	r1, r3
 800b28c:	f7f5 f958 	bl	8000540 <__aeabi_dmul>
 800b290:	a37d      	add	r3, pc, #500	@ (adr r3, 800b488 <__ieee754_pow+0x730>)
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	4604      	mov	r4, r0
 800b298:	460d      	mov	r5, r1
 800b29a:	f7f5 f951 	bl	8000540 <__aeabi_dmul>
 800b29e:	a37c      	add	r3, pc, #496	@ (adr r3, 800b490 <__ieee754_pow+0x738>)
 800b2a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a4:	f7f4 ff96 	bl	80001d4 <__adddf3>
 800b2a8:	4622      	mov	r2, r4
 800b2aa:	462b      	mov	r3, r5
 800b2ac:	f7f5 f948 	bl	8000540 <__aeabi_dmul>
 800b2b0:	a379      	add	r3, pc, #484	@ (adr r3, 800b498 <__ieee754_pow+0x740>)
 800b2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b6:	f7f4 ff8d 	bl	80001d4 <__adddf3>
 800b2ba:	4622      	mov	r2, r4
 800b2bc:	462b      	mov	r3, r5
 800b2be:	f7f5 f93f 	bl	8000540 <__aeabi_dmul>
 800b2c2:	a377      	add	r3, pc, #476	@ (adr r3, 800b4a0 <__ieee754_pow+0x748>)
 800b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c8:	f7f4 ff84 	bl	80001d4 <__adddf3>
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	462b      	mov	r3, r5
 800b2d0:	f7f5 f936 	bl	8000540 <__aeabi_dmul>
 800b2d4:	a374      	add	r3, pc, #464	@ (adr r3, 800b4a8 <__ieee754_pow+0x750>)
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	f7f4 ff7b 	bl	80001d4 <__adddf3>
 800b2de:	4622      	mov	r2, r4
 800b2e0:	462b      	mov	r3, r5
 800b2e2:	f7f5 f92d 	bl	8000540 <__aeabi_dmul>
 800b2e6:	a372      	add	r3, pc, #456	@ (adr r3, 800b4b0 <__ieee754_pow+0x758>)
 800b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ec:	f7f4 ff72 	bl	80001d4 <__adddf3>
 800b2f0:	4622      	mov	r2, r4
 800b2f2:	4606      	mov	r6, r0
 800b2f4:	460f      	mov	r7, r1
 800b2f6:	462b      	mov	r3, r5
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	f7f5 f920 	bl	8000540 <__aeabi_dmul>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4630      	mov	r0, r6
 800b306:	4639      	mov	r1, r7
 800b308:	f7f5 f91a 	bl	8000540 <__aeabi_dmul>
 800b30c:	465a      	mov	r2, fp
 800b30e:	4604      	mov	r4, r0
 800b310:	460d      	mov	r5, r1
 800b312:	464b      	mov	r3, r9
 800b314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b318:	f7f4 ff5c 	bl	80001d4 <__adddf3>
 800b31c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b320:	f7f5 f90e 	bl	8000540 <__aeabi_dmul>
 800b324:	4622      	mov	r2, r4
 800b326:	462b      	mov	r3, r5
 800b328:	f7f4 ff54 	bl	80001d4 <__adddf3>
 800b32c:	465a      	mov	r2, fp
 800b32e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b332:	464b      	mov	r3, r9
 800b334:	4658      	mov	r0, fp
 800b336:	4649      	mov	r1, r9
 800b338:	f7f5 f902 	bl	8000540 <__aeabi_dmul>
 800b33c:	4b6a      	ldr	r3, [pc, #424]	@ (800b4e8 <__ieee754_pow+0x790>)
 800b33e:	2200      	movs	r2, #0
 800b340:	4606      	mov	r6, r0
 800b342:	460f      	mov	r7, r1
 800b344:	f7f4 ff46 	bl	80001d4 <__adddf3>
 800b348:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b34c:	f7f4 ff42 	bl	80001d4 <__adddf3>
 800b350:	46d8      	mov	r8, fp
 800b352:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b356:	460d      	mov	r5, r1
 800b358:	465a      	mov	r2, fp
 800b35a:	460b      	mov	r3, r1
 800b35c:	4640      	mov	r0, r8
 800b35e:	4649      	mov	r1, r9
 800b360:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b364:	f7f5 f8ec 	bl	8000540 <__aeabi_dmul>
 800b368:	465c      	mov	r4, fp
 800b36a:	4680      	mov	r8, r0
 800b36c:	4689      	mov	r9, r1
 800b36e:	4b5e      	ldr	r3, [pc, #376]	@ (800b4e8 <__ieee754_pow+0x790>)
 800b370:	2200      	movs	r2, #0
 800b372:	4620      	mov	r0, r4
 800b374:	4629      	mov	r1, r5
 800b376:	f7f4 ff2b 	bl	80001d0 <__aeabi_dsub>
 800b37a:	4632      	mov	r2, r6
 800b37c:	463b      	mov	r3, r7
 800b37e:	f7f4 ff27 	bl	80001d0 <__aeabi_dsub>
 800b382:	4602      	mov	r2, r0
 800b384:	460b      	mov	r3, r1
 800b386:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b38a:	f7f4 ff21 	bl	80001d0 <__aeabi_dsub>
 800b38e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b392:	f7f5 f8d5 	bl	8000540 <__aeabi_dmul>
 800b396:	4622      	mov	r2, r4
 800b398:	4606      	mov	r6, r0
 800b39a:	460f      	mov	r7, r1
 800b39c:	462b      	mov	r3, r5
 800b39e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b3a2:	f7f5 f8cd 	bl	8000540 <__aeabi_dmul>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	4630      	mov	r0, r6
 800b3ac:	4639      	mov	r1, r7
 800b3ae:	f7f4 ff11 	bl	80001d4 <__adddf3>
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	460f      	mov	r7, r1
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	4649      	mov	r1, r9
 800b3be:	f7f4 ff09 	bl	80001d4 <__adddf3>
 800b3c2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b3c6:	a33c      	add	r3, pc, #240	@ (adr r3, 800b4b8 <__ieee754_pow+0x760>)
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	4658      	mov	r0, fp
 800b3ce:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b3d2:	460d      	mov	r5, r1
 800b3d4:	f7f5 f8b4 	bl	8000540 <__aeabi_dmul>
 800b3d8:	465c      	mov	r4, fp
 800b3da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3de:	4642      	mov	r2, r8
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	4620      	mov	r0, r4
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	f7f4 fef3 	bl	80001d0 <__aeabi_dsub>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	f7f4 feed 	bl	80001d0 <__aeabi_dsub>
 800b3f6:	a332      	add	r3, pc, #200	@ (adr r3, 800b4c0 <__ieee754_pow+0x768>)
 800b3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fc:	f7f5 f8a0 	bl	8000540 <__aeabi_dmul>
 800b400:	a331      	add	r3, pc, #196	@ (adr r3, 800b4c8 <__ieee754_pow+0x770>)
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	4606      	mov	r6, r0
 800b408:	460f      	mov	r7, r1
 800b40a:	4620      	mov	r0, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	f7f5 f897 	bl	8000540 <__aeabi_dmul>
 800b412:	4602      	mov	r2, r0
 800b414:	460b      	mov	r3, r1
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	f7f4 fedb 	bl	80001d4 <__adddf3>
 800b41e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b420:	4b32      	ldr	r3, [pc, #200]	@ (800b4ec <__ieee754_pow+0x794>)
 800b422:	4413      	add	r3, r2
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	f7f4 fed4 	bl	80001d4 <__adddf3>
 800b42c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b430:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b432:	f7f5 f81b 	bl	800046c <__aeabi_i2d>
 800b436:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b438:	4b2d      	ldr	r3, [pc, #180]	@ (800b4f0 <__ieee754_pow+0x798>)
 800b43a:	4413      	add	r3, r2
 800b43c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b440:	4606      	mov	r6, r0
 800b442:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b446:	460f      	mov	r7, r1
 800b448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b44c:	f7f4 fec2 	bl	80001d4 <__adddf3>
 800b450:	4642      	mov	r2, r8
 800b452:	464b      	mov	r3, r9
 800b454:	f7f4 febe 	bl	80001d4 <__adddf3>
 800b458:	4632      	mov	r2, r6
 800b45a:	463b      	mov	r3, r7
 800b45c:	f7f4 feba 	bl	80001d4 <__adddf3>
 800b460:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b464:	4632      	mov	r2, r6
 800b466:	463b      	mov	r3, r7
 800b468:	4658      	mov	r0, fp
 800b46a:	460d      	mov	r5, r1
 800b46c:	f7f4 feb0 	bl	80001d0 <__aeabi_dsub>
 800b470:	4642      	mov	r2, r8
 800b472:	464b      	mov	r3, r9
 800b474:	f7f4 feac 	bl	80001d0 <__aeabi_dsub>
 800b478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b47c:	f7f4 fea8 	bl	80001d0 <__aeabi_dsub>
 800b480:	465c      	mov	r4, fp
 800b482:	4602      	mov	r2, r0
 800b484:	e036      	b.n	800b4f4 <__ieee754_pow+0x79c>
 800b486:	bf00      	nop
 800b488:	4a454eef 	.word	0x4a454eef
 800b48c:	3fca7e28 	.word	0x3fca7e28
 800b490:	93c9db65 	.word	0x93c9db65
 800b494:	3fcd864a 	.word	0x3fcd864a
 800b498:	a91d4101 	.word	0xa91d4101
 800b49c:	3fd17460 	.word	0x3fd17460
 800b4a0:	518f264d 	.word	0x518f264d
 800b4a4:	3fd55555 	.word	0x3fd55555
 800b4a8:	db6fabff 	.word	0xdb6fabff
 800b4ac:	3fdb6db6 	.word	0x3fdb6db6
 800b4b0:	33333303 	.word	0x33333303
 800b4b4:	3fe33333 	.word	0x3fe33333
 800b4b8:	e0000000 	.word	0xe0000000
 800b4bc:	3feec709 	.word	0x3feec709
 800b4c0:	dc3a03fd 	.word	0xdc3a03fd
 800b4c4:	3feec709 	.word	0x3feec709
 800b4c8:	145b01f5 	.word	0x145b01f5
 800b4cc:	be3e2fe0 	.word	0xbe3e2fe0
 800b4d0:	7ff00000 	.word	0x7ff00000
 800b4d4:	43400000 	.word	0x43400000
 800b4d8:	0003988e 	.word	0x0003988e
 800b4dc:	000bb679 	.word	0x000bb679
 800b4e0:	0800c618 	.word	0x0800c618
 800b4e4:	3ff00000 	.word	0x3ff00000
 800b4e8:	40080000 	.word	0x40080000
 800b4ec:	0800c5f8 	.word	0x0800c5f8
 800b4f0:	0800c608 	.word	0x0800c608
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4fa:	e5d7      	b.n	800b0ac <__ieee754_pow+0x354>
 800b4fc:	f04f 0a01 	mov.w	sl, #1
 800b500:	e65e      	b.n	800b1c0 <__ieee754_pow+0x468>
 800b502:	a3b4      	add	r3, pc, #720	@ (adr r3, 800b7d4 <__ieee754_pow+0xa7c>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f4 fe62 	bl	80001d4 <__adddf3>
 800b510:	4642      	mov	r2, r8
 800b512:	e9cd 0100 	strd	r0, r1, [sp]
 800b516:	464b      	mov	r3, r9
 800b518:	4620      	mov	r0, r4
 800b51a:	4629      	mov	r1, r5
 800b51c:	f7f4 fe58 	bl	80001d0 <__aeabi_dsub>
 800b520:	4602      	mov	r2, r0
 800b522:	460b      	mov	r3, r1
 800b524:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b528:	f7f5 fa9a 	bl	8000a60 <__aeabi_dcmpgt>
 800b52c:	2800      	cmp	r0, #0
 800b52e:	f47f ae00 	bne.w	800b132 <__ieee754_pow+0x3da>
 800b532:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b536:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b53a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b53e:	fa43 fa0a 	asr.w	sl, r3, sl
 800b542:	44da      	add	sl, fp
 800b544:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b548:	489d      	ldr	r0, [pc, #628]	@ (800b7c0 <__ieee754_pow+0xa68>)
 800b54a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b54e:	4108      	asrs	r0, r1
 800b550:	ea00 030a 	and.w	r3, r0, sl
 800b554:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b558:	f1c1 0114 	rsb	r1, r1, #20
 800b55c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b560:	fa4a fa01 	asr.w	sl, sl, r1
 800b564:	f1bb 0f00 	cmp.w	fp, #0
 800b568:	4640      	mov	r0, r8
 800b56a:	4649      	mov	r1, r9
 800b56c:	f04f 0200 	mov.w	r2, #0
 800b570:	bfb8      	it	lt
 800b572:	f1ca 0a00 	rsblt	sl, sl, #0
 800b576:	f7f4 fe2b 	bl	80001d0 <__aeabi_dsub>
 800b57a:	4680      	mov	r8, r0
 800b57c:	4689      	mov	r9, r1
 800b57e:	4632      	mov	r2, r6
 800b580:	463b      	mov	r3, r7
 800b582:	4640      	mov	r0, r8
 800b584:	4649      	mov	r1, r9
 800b586:	f7f4 fe25 	bl	80001d4 <__adddf3>
 800b58a:	2400      	movs	r4, #0
 800b58c:	a37c      	add	r3, pc, #496	@ (adr r3, 800b780 <__ieee754_pow+0xa28>)
 800b58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b592:	4620      	mov	r0, r4
 800b594:	460d      	mov	r5, r1
 800b596:	f7f4 ffd3 	bl	8000540 <__aeabi_dmul>
 800b59a:	4642      	mov	r2, r8
 800b59c:	e9cd 0100 	strd	r0, r1, [sp]
 800b5a0:	464b      	mov	r3, r9
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	f7f4 fe13 	bl	80001d0 <__aeabi_dsub>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	4630      	mov	r0, r6
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	f7f4 fe0d 	bl	80001d0 <__aeabi_dsub>
 800b5b6:	a374      	add	r3, pc, #464	@ (adr r3, 800b788 <__ieee754_pow+0xa30>)
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f7f4 ffc0 	bl	8000540 <__aeabi_dmul>
 800b5c0:	a373      	add	r3, pc, #460	@ (adr r3, 800b790 <__ieee754_pow+0xa38>)
 800b5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	4689      	mov	r9, r1
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	f7f4 ffb7 	bl	8000540 <__aeabi_dmul>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	4640      	mov	r0, r8
 800b5d8:	4649      	mov	r1, r9
 800b5da:	f7f4 fdfb 	bl	80001d4 <__adddf3>
 800b5de:	4604      	mov	r4, r0
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5ea:	f7f4 fdf3 	bl	80001d4 <__adddf3>
 800b5ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b5f2:	4680      	mov	r8, r0
 800b5f4:	4689      	mov	r9, r1
 800b5f6:	f7f4 fdeb 	bl	80001d0 <__aeabi_dsub>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4620      	mov	r0, r4
 800b600:	4629      	mov	r1, r5
 800b602:	f7f4 fde5 	bl	80001d0 <__aeabi_dsub>
 800b606:	4642      	mov	r2, r8
 800b608:	4606      	mov	r6, r0
 800b60a:	460f      	mov	r7, r1
 800b60c:	464b      	mov	r3, r9
 800b60e:	4640      	mov	r0, r8
 800b610:	4649      	mov	r1, r9
 800b612:	f7f4 ff95 	bl	8000540 <__aeabi_dmul>
 800b616:	a360      	add	r3, pc, #384	@ (adr r3, 800b798 <__ieee754_pow+0xa40>)
 800b618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61c:	4604      	mov	r4, r0
 800b61e:	460d      	mov	r5, r1
 800b620:	f7f4 ff8e 	bl	8000540 <__aeabi_dmul>
 800b624:	a35e      	add	r3, pc, #376	@ (adr r3, 800b7a0 <__ieee754_pow+0xa48>)
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	f7f4 fdd1 	bl	80001d0 <__aeabi_dsub>
 800b62e:	4622      	mov	r2, r4
 800b630:	462b      	mov	r3, r5
 800b632:	f7f4 ff85 	bl	8000540 <__aeabi_dmul>
 800b636:	a35c      	add	r3, pc, #368	@ (adr r3, 800b7a8 <__ieee754_pow+0xa50>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	f7f4 fdca 	bl	80001d4 <__adddf3>
 800b640:	4622      	mov	r2, r4
 800b642:	462b      	mov	r3, r5
 800b644:	f7f4 ff7c 	bl	8000540 <__aeabi_dmul>
 800b648:	a359      	add	r3, pc, #356	@ (adr r3, 800b7b0 <__ieee754_pow+0xa58>)
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	f7f4 fdbf 	bl	80001d0 <__aeabi_dsub>
 800b652:	4622      	mov	r2, r4
 800b654:	462b      	mov	r3, r5
 800b656:	f7f4 ff73 	bl	8000540 <__aeabi_dmul>
 800b65a:	a357      	add	r3, pc, #348	@ (adr r3, 800b7b8 <__ieee754_pow+0xa60>)
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f7f4 fdb8 	bl	80001d4 <__adddf3>
 800b664:	4622      	mov	r2, r4
 800b666:	462b      	mov	r3, r5
 800b668:	f7f4 ff6a 	bl	8000540 <__aeabi_dmul>
 800b66c:	4602      	mov	r2, r0
 800b66e:	460b      	mov	r3, r1
 800b670:	4640      	mov	r0, r8
 800b672:	4649      	mov	r1, r9
 800b674:	f7f4 fdac 	bl	80001d0 <__aeabi_dsub>
 800b678:	4604      	mov	r4, r0
 800b67a:	460d      	mov	r5, r1
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	4640      	mov	r0, r8
 800b682:	4649      	mov	r1, r9
 800b684:	f7f4 ff5c 	bl	8000540 <__aeabi_dmul>
 800b688:	2200      	movs	r2, #0
 800b68a:	e9cd 0100 	strd	r0, r1, [sp]
 800b68e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b692:	4620      	mov	r0, r4
 800b694:	4629      	mov	r1, r5
 800b696:	f7f4 fd9b 	bl	80001d0 <__aeabi_dsub>
 800b69a:	4602      	mov	r2, r0
 800b69c:	460b      	mov	r3, r1
 800b69e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6a2:	f7f5 f877 	bl	8000794 <__aeabi_ddiv>
 800b6a6:	4632      	mov	r2, r6
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	463b      	mov	r3, r7
 800b6ae:	4640      	mov	r0, r8
 800b6b0:	4649      	mov	r1, r9
 800b6b2:	f7f4 ff45 	bl	8000540 <__aeabi_dmul>
 800b6b6:	4632      	mov	r2, r6
 800b6b8:	463b      	mov	r3, r7
 800b6ba:	f7f4 fd8b 	bl	80001d4 <__adddf3>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	460b      	mov	r3, r1
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	f7f4 fd83 	bl	80001d0 <__aeabi_dsub>
 800b6ca:	4642      	mov	r2, r8
 800b6cc:	464b      	mov	r3, r9
 800b6ce:	f7f4 fd7f 	bl	80001d0 <__aeabi_dsub>
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	493b      	ldr	r1, [pc, #236]	@ (800b7c4 <__ieee754_pow+0xa6c>)
 800b6d8:	2000      	movs	r0, #0
 800b6da:	f7f4 fd79 	bl	80001d0 <__aeabi_dsub>
 800b6de:	ec41 0b10 	vmov	d0, r0, r1
 800b6e2:	ee10 3a90 	vmov	r3, s1
 800b6e6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b6ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6ee:	da30      	bge.n	800b752 <__ieee754_pow+0x9fa>
 800b6f0:	4650      	mov	r0, sl
 800b6f2:	f000 fa71 	bl	800bbd8 <scalbn>
 800b6f6:	ec51 0b10 	vmov	r0, r1, d0
 800b6fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6fe:	f7ff bbd2 	b.w	800aea6 <__ieee754_pow+0x14e>
 800b702:	4c31      	ldr	r4, [pc, #196]	@ (800b7c8 <__ieee754_pow+0xa70>)
 800b704:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b708:	42a3      	cmp	r3, r4
 800b70a:	d91a      	bls.n	800b742 <__ieee754_pow+0x9ea>
 800b70c:	4b2f      	ldr	r3, [pc, #188]	@ (800b7cc <__ieee754_pow+0xa74>)
 800b70e:	440b      	add	r3, r1
 800b710:	4303      	orrs	r3, r0
 800b712:	d009      	beq.n	800b728 <__ieee754_pow+0x9d0>
 800b714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b718:	2200      	movs	r2, #0
 800b71a:	2300      	movs	r3, #0
 800b71c:	f7f5 f982 	bl	8000a24 <__aeabi_dcmplt>
 800b720:	3800      	subs	r0, #0
 800b722:	bf18      	it	ne
 800b724:	2001      	movne	r0, #1
 800b726:	e42b      	b.n	800af80 <__ieee754_pow+0x228>
 800b728:	4642      	mov	r2, r8
 800b72a:	464b      	mov	r3, r9
 800b72c:	f7f4 fd50 	bl	80001d0 <__aeabi_dsub>
 800b730:	4632      	mov	r2, r6
 800b732:	463b      	mov	r3, r7
 800b734:	f7f5 f98a 	bl	8000a4c <__aeabi_dcmpge>
 800b738:	2800      	cmp	r0, #0
 800b73a:	d1eb      	bne.n	800b714 <__ieee754_pow+0x9bc>
 800b73c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800b7dc <__ieee754_pow+0xa84>
 800b740:	e6f7      	b.n	800b532 <__ieee754_pow+0x7da>
 800b742:	469a      	mov	sl, r3
 800b744:	4b22      	ldr	r3, [pc, #136]	@ (800b7d0 <__ieee754_pow+0xa78>)
 800b746:	459a      	cmp	sl, r3
 800b748:	f63f aef3 	bhi.w	800b532 <__ieee754_pow+0x7da>
 800b74c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800b750:	e715      	b.n	800b57e <__ieee754_pow+0x826>
 800b752:	ec51 0b10 	vmov	r0, r1, d0
 800b756:	4619      	mov	r1, r3
 800b758:	e7cf      	b.n	800b6fa <__ieee754_pow+0x9a2>
 800b75a:	491a      	ldr	r1, [pc, #104]	@ (800b7c4 <__ieee754_pow+0xa6c>)
 800b75c:	2000      	movs	r0, #0
 800b75e:	f7ff bb18 	b.w	800ad92 <__ieee754_pow+0x3a>
 800b762:	2000      	movs	r0, #0
 800b764:	2100      	movs	r1, #0
 800b766:	f7ff bb14 	b.w	800ad92 <__ieee754_pow+0x3a>
 800b76a:	4630      	mov	r0, r6
 800b76c:	4639      	mov	r1, r7
 800b76e:	f7ff bb10 	b.w	800ad92 <__ieee754_pow+0x3a>
 800b772:	460c      	mov	r4, r1
 800b774:	f7ff bb5e 	b.w	800ae34 <__ieee754_pow+0xdc>
 800b778:	2400      	movs	r4, #0
 800b77a:	f7ff bb49 	b.w	800ae10 <__ieee754_pow+0xb8>
 800b77e:	bf00      	nop
 800b780:	00000000 	.word	0x00000000
 800b784:	3fe62e43 	.word	0x3fe62e43
 800b788:	fefa39ef 	.word	0xfefa39ef
 800b78c:	3fe62e42 	.word	0x3fe62e42
 800b790:	0ca86c39 	.word	0x0ca86c39
 800b794:	be205c61 	.word	0xbe205c61
 800b798:	72bea4d0 	.word	0x72bea4d0
 800b79c:	3e663769 	.word	0x3e663769
 800b7a0:	c5d26bf1 	.word	0xc5d26bf1
 800b7a4:	3ebbbd41 	.word	0x3ebbbd41
 800b7a8:	af25de2c 	.word	0xaf25de2c
 800b7ac:	3f11566a 	.word	0x3f11566a
 800b7b0:	16bebd93 	.word	0x16bebd93
 800b7b4:	3f66c16c 	.word	0x3f66c16c
 800b7b8:	5555553e 	.word	0x5555553e
 800b7bc:	3fc55555 	.word	0x3fc55555
 800b7c0:	fff00000 	.word	0xfff00000
 800b7c4:	3ff00000 	.word	0x3ff00000
 800b7c8:	4090cbff 	.word	0x4090cbff
 800b7cc:	3f6f3400 	.word	0x3f6f3400
 800b7d0:	3fe00000 	.word	0x3fe00000
 800b7d4:	652b82fe 	.word	0x652b82fe
 800b7d8:	3c971547 	.word	0x3c971547
 800b7dc:	4090cc00 	.word	0x4090cc00

0800b7e0 <__ieee754_rem_pio2>:
 800b7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e4:	ec57 6b10 	vmov	r6, r7, d0
 800b7e8:	4bc5      	ldr	r3, [pc, #788]	@ (800bb00 <__ieee754_rem_pio2+0x320>)
 800b7ea:	b08d      	sub	sp, #52	@ 0x34
 800b7ec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b7f0:	4598      	cmp	r8, r3
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	9704      	str	r7, [sp, #16]
 800b7f6:	d807      	bhi.n	800b808 <__ieee754_rem_pio2+0x28>
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	ed80 0b00 	vstr	d0, [r0]
 800b800:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b804:	2500      	movs	r5, #0
 800b806:	e028      	b.n	800b85a <__ieee754_rem_pio2+0x7a>
 800b808:	4bbe      	ldr	r3, [pc, #760]	@ (800bb04 <__ieee754_rem_pio2+0x324>)
 800b80a:	4598      	cmp	r8, r3
 800b80c:	d878      	bhi.n	800b900 <__ieee754_rem_pio2+0x120>
 800b80e:	9b04      	ldr	r3, [sp, #16]
 800b810:	4dbd      	ldr	r5, [pc, #756]	@ (800bb08 <__ieee754_rem_pio2+0x328>)
 800b812:	2b00      	cmp	r3, #0
 800b814:	4630      	mov	r0, r6
 800b816:	a3ac      	add	r3, pc, #688	@ (adr r3, 800bac8 <__ieee754_rem_pio2+0x2e8>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	4639      	mov	r1, r7
 800b81e:	dd38      	ble.n	800b892 <__ieee754_rem_pio2+0xb2>
 800b820:	f7f4 fcd6 	bl	80001d0 <__aeabi_dsub>
 800b824:	45a8      	cmp	r8, r5
 800b826:	4606      	mov	r6, r0
 800b828:	460f      	mov	r7, r1
 800b82a:	d01a      	beq.n	800b862 <__ieee754_rem_pio2+0x82>
 800b82c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800bad0 <__ieee754_rem_pio2+0x2f0>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 fccd 	bl	80001d0 <__aeabi_dsub>
 800b836:	4602      	mov	r2, r0
 800b838:	460b      	mov	r3, r1
 800b83a:	4680      	mov	r8, r0
 800b83c:	4689      	mov	r9, r1
 800b83e:	4630      	mov	r0, r6
 800b840:	4639      	mov	r1, r7
 800b842:	f7f4 fcc5 	bl	80001d0 <__aeabi_dsub>
 800b846:	a3a2      	add	r3, pc, #648	@ (adr r3, 800bad0 <__ieee754_rem_pio2+0x2f0>)
 800b848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84c:	f7f4 fcc0 	bl	80001d0 <__aeabi_dsub>
 800b850:	e9c4 8900 	strd	r8, r9, [r4]
 800b854:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b858:	2501      	movs	r5, #1
 800b85a:	4628      	mov	r0, r5
 800b85c:	b00d      	add	sp, #52	@ 0x34
 800b85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b862:	a39d      	add	r3, pc, #628	@ (adr r3, 800bad8 <__ieee754_rem_pio2+0x2f8>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f7f4 fcb2 	bl	80001d0 <__aeabi_dsub>
 800b86c:	a39c      	add	r3, pc, #624	@ (adr r3, 800bae0 <__ieee754_rem_pio2+0x300>)
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	4606      	mov	r6, r0
 800b874:	460f      	mov	r7, r1
 800b876:	f7f4 fcab 	bl	80001d0 <__aeabi_dsub>
 800b87a:	4602      	mov	r2, r0
 800b87c:	460b      	mov	r3, r1
 800b87e:	4680      	mov	r8, r0
 800b880:	4689      	mov	r9, r1
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	f7f4 fca3 	bl	80001d0 <__aeabi_dsub>
 800b88a:	a395      	add	r3, pc, #596	@ (adr r3, 800bae0 <__ieee754_rem_pio2+0x300>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	e7dc      	b.n	800b84c <__ieee754_rem_pio2+0x6c>
 800b892:	f7f4 fc9f 	bl	80001d4 <__adddf3>
 800b896:	45a8      	cmp	r8, r5
 800b898:	4606      	mov	r6, r0
 800b89a:	460f      	mov	r7, r1
 800b89c:	d018      	beq.n	800b8d0 <__ieee754_rem_pio2+0xf0>
 800b89e:	a38c      	add	r3, pc, #560	@ (adr r3, 800bad0 <__ieee754_rem_pio2+0x2f0>)
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f7f4 fc96 	bl	80001d4 <__adddf3>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4680      	mov	r8, r0
 800b8ae:	4689      	mov	r9, r1
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f4 fc8c 	bl	80001d0 <__aeabi_dsub>
 800b8b8:	a385      	add	r3, pc, #532	@ (adr r3, 800bad0 <__ieee754_rem_pio2+0x2f0>)
 800b8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8be:	f7f4 fc89 	bl	80001d4 <__adddf3>
 800b8c2:	f04f 35ff 	mov.w	r5, #4294967295
 800b8c6:	e9c4 8900 	strd	r8, r9, [r4]
 800b8ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b8ce:	e7c4      	b.n	800b85a <__ieee754_rem_pio2+0x7a>
 800b8d0:	a381      	add	r3, pc, #516	@ (adr r3, 800bad8 <__ieee754_rem_pio2+0x2f8>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f7f4 fc7d 	bl	80001d4 <__adddf3>
 800b8da:	a381      	add	r3, pc, #516	@ (adr r3, 800bae0 <__ieee754_rem_pio2+0x300>)
 800b8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e0:	4606      	mov	r6, r0
 800b8e2:	460f      	mov	r7, r1
 800b8e4:	f7f4 fc76 	bl	80001d4 <__adddf3>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	4689      	mov	r9, r1
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	f7f4 fc6c 	bl	80001d0 <__aeabi_dsub>
 800b8f8:	a379      	add	r3, pc, #484	@ (adr r3, 800bae0 <__ieee754_rem_pio2+0x300>)
 800b8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fe:	e7de      	b.n	800b8be <__ieee754_rem_pio2+0xde>
 800b900:	4b82      	ldr	r3, [pc, #520]	@ (800bb0c <__ieee754_rem_pio2+0x32c>)
 800b902:	4598      	cmp	r8, r3
 800b904:	f200 80d1 	bhi.w	800baaa <__ieee754_rem_pio2+0x2ca>
 800b908:	f7fe fe96 	bl	800a638 <fabs>
 800b90c:	ec57 6b10 	vmov	r6, r7, d0
 800b910:	a375      	add	r3, pc, #468	@ (adr r3, 800bae8 <__ieee754_rem_pio2+0x308>)
 800b912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b916:	4630      	mov	r0, r6
 800b918:	4639      	mov	r1, r7
 800b91a:	f7f4 fe11 	bl	8000540 <__aeabi_dmul>
 800b91e:	4b7c      	ldr	r3, [pc, #496]	@ (800bb10 <__ieee754_rem_pio2+0x330>)
 800b920:	2200      	movs	r2, #0
 800b922:	f7f4 fc57 	bl	80001d4 <__adddf3>
 800b926:	f7f5 f8bb 	bl	8000aa0 <__aeabi_d2iz>
 800b92a:	4605      	mov	r5, r0
 800b92c:	f7f4 fd9e 	bl	800046c <__aeabi_i2d>
 800b930:	4602      	mov	r2, r0
 800b932:	460b      	mov	r3, r1
 800b934:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b938:	a363      	add	r3, pc, #396	@ (adr r3, 800bac8 <__ieee754_rem_pio2+0x2e8>)
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	f7f4 fdff 	bl	8000540 <__aeabi_dmul>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4630      	mov	r0, r6
 800b948:	4639      	mov	r1, r7
 800b94a:	f7f4 fc41 	bl	80001d0 <__aeabi_dsub>
 800b94e:	a360      	add	r3, pc, #384	@ (adr r3, 800bad0 <__ieee754_rem_pio2+0x2f0>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	4682      	mov	sl, r0
 800b956:	468b      	mov	fp, r1
 800b958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b95c:	f7f4 fdf0 	bl	8000540 <__aeabi_dmul>
 800b960:	2d1f      	cmp	r5, #31
 800b962:	4606      	mov	r6, r0
 800b964:	460f      	mov	r7, r1
 800b966:	dc0c      	bgt.n	800b982 <__ieee754_rem_pio2+0x1a2>
 800b968:	4b6a      	ldr	r3, [pc, #424]	@ (800bb14 <__ieee754_rem_pio2+0x334>)
 800b96a:	1e6a      	subs	r2, r5, #1
 800b96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b970:	4543      	cmp	r3, r8
 800b972:	d006      	beq.n	800b982 <__ieee754_rem_pio2+0x1a2>
 800b974:	4632      	mov	r2, r6
 800b976:	463b      	mov	r3, r7
 800b978:	4650      	mov	r0, sl
 800b97a:	4659      	mov	r1, fp
 800b97c:	f7f4 fc28 	bl	80001d0 <__aeabi_dsub>
 800b980:	e00e      	b.n	800b9a0 <__ieee754_rem_pio2+0x1c0>
 800b982:	463b      	mov	r3, r7
 800b984:	4632      	mov	r2, r6
 800b986:	4650      	mov	r0, sl
 800b988:	4659      	mov	r1, fp
 800b98a:	f7f4 fc21 	bl	80001d0 <__aeabi_dsub>
 800b98e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b992:	9305      	str	r3, [sp, #20]
 800b994:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b998:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b99c:	2b10      	cmp	r3, #16
 800b99e:	dc02      	bgt.n	800b9a6 <__ieee754_rem_pio2+0x1c6>
 800b9a0:	e9c4 0100 	strd	r0, r1, [r4]
 800b9a4:	e039      	b.n	800ba1a <__ieee754_rem_pio2+0x23a>
 800b9a6:	a34c      	add	r3, pc, #304	@ (adr r3, 800bad8 <__ieee754_rem_pio2+0x2f8>)
 800b9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9b0:	f7f4 fdc6 	bl	8000540 <__aeabi_dmul>
 800b9b4:	4606      	mov	r6, r0
 800b9b6:	460f      	mov	r7, r1
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4650      	mov	r0, sl
 800b9be:	4659      	mov	r1, fp
 800b9c0:	f7f4 fc06 	bl	80001d0 <__aeabi_dsub>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	4689      	mov	r9, r1
 800b9cc:	4650      	mov	r0, sl
 800b9ce:	4659      	mov	r1, fp
 800b9d0:	f7f4 fbfe 	bl	80001d0 <__aeabi_dsub>
 800b9d4:	4632      	mov	r2, r6
 800b9d6:	463b      	mov	r3, r7
 800b9d8:	f7f4 fbfa 	bl	80001d0 <__aeabi_dsub>
 800b9dc:	a340      	add	r3, pc, #256	@ (adr r3, 800bae0 <__ieee754_rem_pio2+0x300>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	4606      	mov	r6, r0
 800b9e4:	460f      	mov	r7, r1
 800b9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9ea:	f7f4 fda9 	bl	8000540 <__aeabi_dmul>
 800b9ee:	4632      	mov	r2, r6
 800b9f0:	463b      	mov	r3, r7
 800b9f2:	f7f4 fbed 	bl	80001d0 <__aeabi_dsub>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	4640      	mov	r0, r8
 800ba00:	4649      	mov	r1, r9
 800ba02:	f7f4 fbe5 	bl	80001d0 <__aeabi_dsub>
 800ba06:	9a05      	ldr	r2, [sp, #20]
 800ba08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	2b31      	cmp	r3, #49	@ 0x31
 800ba10:	dc20      	bgt.n	800ba54 <__ieee754_rem_pio2+0x274>
 800ba12:	e9c4 0100 	strd	r0, r1, [r4]
 800ba16:	46c2      	mov	sl, r8
 800ba18:	46cb      	mov	fp, r9
 800ba1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ba1e:	4650      	mov	r0, sl
 800ba20:	4642      	mov	r2, r8
 800ba22:	464b      	mov	r3, r9
 800ba24:	4659      	mov	r1, fp
 800ba26:	f7f4 fbd3 	bl	80001d0 <__aeabi_dsub>
 800ba2a:	463b      	mov	r3, r7
 800ba2c:	4632      	mov	r2, r6
 800ba2e:	f7f4 fbcf 	bl	80001d0 <__aeabi_dsub>
 800ba32:	9b04      	ldr	r3, [sp, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba3a:	f6bf af0e 	bge.w	800b85a <__ieee754_rem_pio2+0x7a>
 800ba3e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ba42:	6063      	str	r3, [r4, #4]
 800ba44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba48:	f8c4 8000 	str.w	r8, [r4]
 800ba4c:	60a0      	str	r0, [r4, #8]
 800ba4e:	60e3      	str	r3, [r4, #12]
 800ba50:	426d      	negs	r5, r5
 800ba52:	e702      	b.n	800b85a <__ieee754_rem_pio2+0x7a>
 800ba54:	a326      	add	r3, pc, #152	@ (adr r3, 800baf0 <__ieee754_rem_pio2+0x310>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba5e:	f7f4 fd6f 	bl	8000540 <__aeabi_dmul>
 800ba62:	4606      	mov	r6, r0
 800ba64:	460f      	mov	r7, r1
 800ba66:	4602      	mov	r2, r0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	f7f4 fbaf 	bl	80001d0 <__aeabi_dsub>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4682      	mov	sl, r0
 800ba78:	468b      	mov	fp, r1
 800ba7a:	4640      	mov	r0, r8
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	f7f4 fba7 	bl	80001d0 <__aeabi_dsub>
 800ba82:	4632      	mov	r2, r6
 800ba84:	463b      	mov	r3, r7
 800ba86:	f7f4 fba3 	bl	80001d0 <__aeabi_dsub>
 800ba8a:	a31b      	add	r3, pc, #108	@ (adr r3, 800baf8 <__ieee754_rem_pio2+0x318>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	4606      	mov	r6, r0
 800ba92:	460f      	mov	r7, r1
 800ba94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba98:	f7f4 fd52 	bl	8000540 <__aeabi_dmul>
 800ba9c:	4632      	mov	r2, r6
 800ba9e:	463b      	mov	r3, r7
 800baa0:	f7f4 fb96 	bl	80001d0 <__aeabi_dsub>
 800baa4:	4606      	mov	r6, r0
 800baa6:	460f      	mov	r7, r1
 800baa8:	e764      	b.n	800b974 <__ieee754_rem_pio2+0x194>
 800baaa:	4b1b      	ldr	r3, [pc, #108]	@ (800bb18 <__ieee754_rem_pio2+0x338>)
 800baac:	4598      	cmp	r8, r3
 800baae:	d935      	bls.n	800bb1c <__ieee754_rem_pio2+0x33c>
 800bab0:	4632      	mov	r2, r6
 800bab2:	463b      	mov	r3, r7
 800bab4:	4630      	mov	r0, r6
 800bab6:	4639      	mov	r1, r7
 800bab8:	f7f4 fb8a 	bl	80001d0 <__aeabi_dsub>
 800babc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bac0:	e9c4 0100 	strd	r0, r1, [r4]
 800bac4:	e69e      	b.n	800b804 <__ieee754_rem_pio2+0x24>
 800bac6:	bf00      	nop
 800bac8:	54400000 	.word	0x54400000
 800bacc:	3ff921fb 	.word	0x3ff921fb
 800bad0:	1a626331 	.word	0x1a626331
 800bad4:	3dd0b461 	.word	0x3dd0b461
 800bad8:	1a600000 	.word	0x1a600000
 800badc:	3dd0b461 	.word	0x3dd0b461
 800bae0:	2e037073 	.word	0x2e037073
 800bae4:	3ba3198a 	.word	0x3ba3198a
 800bae8:	6dc9c883 	.word	0x6dc9c883
 800baec:	3fe45f30 	.word	0x3fe45f30
 800baf0:	2e000000 	.word	0x2e000000
 800baf4:	3ba3198a 	.word	0x3ba3198a
 800baf8:	252049c1 	.word	0x252049c1
 800bafc:	397b839a 	.word	0x397b839a
 800bb00:	3fe921fb 	.word	0x3fe921fb
 800bb04:	4002d97b 	.word	0x4002d97b
 800bb08:	3ff921fb 	.word	0x3ff921fb
 800bb0c:	413921fb 	.word	0x413921fb
 800bb10:	3fe00000 	.word	0x3fe00000
 800bb14:	0800c628 	.word	0x0800c628
 800bb18:	7fefffff 	.word	0x7fefffff
 800bb1c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bb20:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800bb24:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bb28:	4630      	mov	r0, r6
 800bb2a:	460f      	mov	r7, r1
 800bb2c:	f7f4 ffb8 	bl	8000aa0 <__aeabi_d2iz>
 800bb30:	f7f4 fc9c 	bl	800046c <__aeabi_i2d>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	4630      	mov	r0, r6
 800bb3a:	4639      	mov	r1, r7
 800bb3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb40:	f7f4 fb46 	bl	80001d0 <__aeabi_dsub>
 800bb44:	4b22      	ldr	r3, [pc, #136]	@ (800bbd0 <__ieee754_rem_pio2+0x3f0>)
 800bb46:	2200      	movs	r2, #0
 800bb48:	f7f4 fcfa 	bl	8000540 <__aeabi_dmul>
 800bb4c:	460f      	mov	r7, r1
 800bb4e:	4606      	mov	r6, r0
 800bb50:	f7f4 ffa6 	bl	8000aa0 <__aeabi_d2iz>
 800bb54:	f7f4 fc8a 	bl	800046c <__aeabi_i2d>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4630      	mov	r0, r6
 800bb5e:	4639      	mov	r1, r7
 800bb60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bb64:	f7f4 fb34 	bl	80001d0 <__aeabi_dsub>
 800bb68:	4b19      	ldr	r3, [pc, #100]	@ (800bbd0 <__ieee754_rem_pio2+0x3f0>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f7f4 fce8 	bl	8000540 <__aeabi_dmul>
 800bb70:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800bb74:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800bb78:	f04f 0803 	mov.w	r8, #3
 800bb7c:	2600      	movs	r6, #0
 800bb7e:	2700      	movs	r7, #0
 800bb80:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bb84:	4632      	mov	r2, r6
 800bb86:	463b      	mov	r3, r7
 800bb88:	46c2      	mov	sl, r8
 800bb8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb8e:	f7f4 ff3f 	bl	8000a10 <__aeabi_dcmpeq>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d1f4      	bne.n	800bb80 <__ieee754_rem_pio2+0x3a0>
 800bb96:	4b0f      	ldr	r3, [pc, #60]	@ (800bbd4 <__ieee754_rem_pio2+0x3f4>)
 800bb98:	9301      	str	r3, [sp, #4]
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	462a      	mov	r2, r5
 800bba0:	4653      	mov	r3, sl
 800bba2:	4621      	mov	r1, r4
 800bba4:	a806      	add	r0, sp, #24
 800bba6:	f000 f8d3 	bl	800bd50 <__kernel_rem_pio2>
 800bbaa:	9b04      	ldr	r3, [sp, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	4605      	mov	r5, r0
 800bbb0:	f6bf ae53 	bge.w	800b85a <__ieee754_rem_pio2+0x7a>
 800bbb4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bbb8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bbbc:	e9c4 2300 	strd	r2, r3, [r4]
 800bbc0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bbc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bbc8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bbcc:	e740      	b.n	800ba50 <__ieee754_rem_pio2+0x270>
 800bbce:	bf00      	nop
 800bbd0:	41700000 	.word	0x41700000
 800bbd4:	0800c6a8 	.word	0x0800c6a8

0800bbd8 <scalbn>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	ec55 4b10 	vmov	r4, r5, d0
 800bbde:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	462b      	mov	r3, r5
 800bbe6:	b991      	cbnz	r1, 800bc0e <scalbn+0x36>
 800bbe8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bbec:	4323      	orrs	r3, r4
 800bbee:	d03d      	beq.n	800bc6c <scalbn+0x94>
 800bbf0:	4b35      	ldr	r3, [pc, #212]	@ (800bcc8 <scalbn+0xf0>)
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f7f4 fca2 	bl	8000540 <__aeabi_dmul>
 800bbfc:	4b33      	ldr	r3, [pc, #204]	@ (800bccc <scalbn+0xf4>)
 800bbfe:	429e      	cmp	r6, r3
 800bc00:	4604      	mov	r4, r0
 800bc02:	460d      	mov	r5, r1
 800bc04:	da0f      	bge.n	800bc26 <scalbn+0x4e>
 800bc06:	a328      	add	r3, pc, #160	@ (adr r3, 800bca8 <scalbn+0xd0>)
 800bc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0c:	e01e      	b.n	800bc4c <scalbn+0x74>
 800bc0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bc12:	4291      	cmp	r1, r2
 800bc14:	d10b      	bne.n	800bc2e <scalbn+0x56>
 800bc16:	4622      	mov	r2, r4
 800bc18:	4620      	mov	r0, r4
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	f7f4 fada 	bl	80001d4 <__adddf3>
 800bc20:	4604      	mov	r4, r0
 800bc22:	460d      	mov	r5, r1
 800bc24:	e022      	b.n	800bc6c <scalbn+0x94>
 800bc26:	460b      	mov	r3, r1
 800bc28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bc2c:	3936      	subs	r1, #54	@ 0x36
 800bc2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bc32:	4296      	cmp	r6, r2
 800bc34:	dd0d      	ble.n	800bc52 <scalbn+0x7a>
 800bc36:	2d00      	cmp	r5, #0
 800bc38:	a11d      	add	r1, pc, #116	@ (adr r1, 800bcb0 <scalbn+0xd8>)
 800bc3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc3e:	da02      	bge.n	800bc46 <scalbn+0x6e>
 800bc40:	a11d      	add	r1, pc, #116	@ (adr r1, 800bcb8 <scalbn+0xe0>)
 800bc42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc46:	a31a      	add	r3, pc, #104	@ (adr r3, 800bcb0 <scalbn+0xd8>)
 800bc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4c:	f7f4 fc78 	bl	8000540 <__aeabi_dmul>
 800bc50:	e7e6      	b.n	800bc20 <scalbn+0x48>
 800bc52:	1872      	adds	r2, r6, r1
 800bc54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bc58:	428a      	cmp	r2, r1
 800bc5a:	dcec      	bgt.n	800bc36 <scalbn+0x5e>
 800bc5c:	2a00      	cmp	r2, #0
 800bc5e:	dd08      	ble.n	800bc72 <scalbn+0x9a>
 800bc60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc64:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bc68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bc6c:	ec45 4b10 	vmov	d0, r4, r5
 800bc70:	bd70      	pop	{r4, r5, r6, pc}
 800bc72:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bc76:	da08      	bge.n	800bc8a <scalbn+0xb2>
 800bc78:	2d00      	cmp	r5, #0
 800bc7a:	a10b      	add	r1, pc, #44	@ (adr r1, 800bca8 <scalbn+0xd0>)
 800bc7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc80:	dac1      	bge.n	800bc06 <scalbn+0x2e>
 800bc82:	a10f      	add	r1, pc, #60	@ (adr r1, 800bcc0 <scalbn+0xe8>)
 800bc84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc88:	e7bd      	b.n	800bc06 <scalbn+0x2e>
 800bc8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc8e:	3236      	adds	r2, #54	@ 0x36
 800bc90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bc94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bc98:	4620      	mov	r0, r4
 800bc9a:	4b0d      	ldr	r3, [pc, #52]	@ (800bcd0 <scalbn+0xf8>)
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	2200      	movs	r2, #0
 800bca0:	e7d4      	b.n	800bc4c <scalbn+0x74>
 800bca2:	bf00      	nop
 800bca4:	f3af 8000 	nop.w
 800bca8:	c2f8f359 	.word	0xc2f8f359
 800bcac:	01a56e1f 	.word	0x01a56e1f
 800bcb0:	8800759c 	.word	0x8800759c
 800bcb4:	7e37e43c 	.word	0x7e37e43c
 800bcb8:	8800759c 	.word	0x8800759c
 800bcbc:	fe37e43c 	.word	0xfe37e43c
 800bcc0:	c2f8f359 	.word	0xc2f8f359
 800bcc4:	81a56e1f 	.word	0x81a56e1f
 800bcc8:	43500000 	.word	0x43500000
 800bccc:	ffff3cb0 	.word	0xffff3cb0
 800bcd0:	3c900000 	.word	0x3c900000

0800bcd4 <with_errno>:
 800bcd4:	b510      	push	{r4, lr}
 800bcd6:	ed2d 8b02 	vpush	{d8}
 800bcda:	eeb0 8a40 	vmov.f32	s16, s0
 800bcde:	eef0 8a60 	vmov.f32	s17, s1
 800bce2:	4604      	mov	r4, r0
 800bce4:	f7fe f9e6 	bl	800a0b4 <__errno>
 800bce8:	eeb0 0a48 	vmov.f32	s0, s16
 800bcec:	eef0 0a68 	vmov.f32	s1, s17
 800bcf0:	ecbd 8b02 	vpop	{d8}
 800bcf4:	6004      	str	r4, [r0, #0]
 800bcf6:	bd10      	pop	{r4, pc}

0800bcf8 <xflow>:
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	b507      	push	{r0, r1, r2, lr}
 800bcfc:	ec51 0b10 	vmov	r0, r1, d0
 800bd00:	b183      	cbz	r3, 800bd24 <xflow+0x2c>
 800bd02:	4602      	mov	r2, r0
 800bd04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd08:	e9cd 2300 	strd	r2, r3, [sp]
 800bd0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd10:	f7f4 fc16 	bl	8000540 <__aeabi_dmul>
 800bd14:	ec41 0b10 	vmov	d0, r0, r1
 800bd18:	2022      	movs	r0, #34	@ 0x22
 800bd1a:	b003      	add	sp, #12
 800bd1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd20:	f7ff bfd8 	b.w	800bcd4 <with_errno>
 800bd24:	4602      	mov	r2, r0
 800bd26:	460b      	mov	r3, r1
 800bd28:	e7ee      	b.n	800bd08 <xflow+0x10>
 800bd2a:	0000      	movs	r0, r0
 800bd2c:	0000      	movs	r0, r0
	...

0800bd30 <__math_uflow>:
 800bd30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bd38 <__math_uflow+0x8>
 800bd34:	f7ff bfe0 	b.w	800bcf8 <xflow>
 800bd38:	00000000 	.word	0x00000000
 800bd3c:	10000000 	.word	0x10000000

0800bd40 <__math_oflow>:
 800bd40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bd48 <__math_oflow+0x8>
 800bd44:	f7ff bfd8 	b.w	800bcf8 <xflow>
 800bd48:	00000000 	.word	0x00000000
 800bd4c:	70000000 	.word	0x70000000

0800bd50 <__kernel_rem_pio2>:
 800bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	ed2d 8b02 	vpush	{d8}
 800bd58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800bd5c:	f112 0f14 	cmn.w	r2, #20
 800bd60:	9306      	str	r3, [sp, #24]
 800bd62:	9104      	str	r1, [sp, #16]
 800bd64:	4bbe      	ldr	r3, [pc, #760]	@ (800c060 <__kernel_rem_pio2+0x310>)
 800bd66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800bd68:	9008      	str	r0, [sp, #32]
 800bd6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	9b06      	ldr	r3, [sp, #24]
 800bd72:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd76:	bfa8      	it	ge
 800bd78:	1ed4      	subge	r4, r2, #3
 800bd7a:	9305      	str	r3, [sp, #20]
 800bd7c:	bfb2      	itee	lt
 800bd7e:	2400      	movlt	r4, #0
 800bd80:	2318      	movge	r3, #24
 800bd82:	fb94 f4f3 	sdivge	r4, r4, r3
 800bd86:	f06f 0317 	mvn.w	r3, #23
 800bd8a:	fb04 3303 	mla	r3, r4, r3, r3
 800bd8e:	eb03 0b02 	add.w	fp, r3, r2
 800bd92:	9b00      	ldr	r3, [sp, #0]
 800bd94:	9a05      	ldr	r2, [sp, #20]
 800bd96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c050 <__kernel_rem_pio2+0x300>
 800bd9a:	eb03 0802 	add.w	r8, r3, r2
 800bd9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bda0:	1aa7      	subs	r7, r4, r2
 800bda2:	ae20      	add	r6, sp, #128	@ 0x80
 800bda4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bda8:	2500      	movs	r5, #0
 800bdaa:	4545      	cmp	r5, r8
 800bdac:	dd13      	ble.n	800bdd6 <__kernel_rem_pio2+0x86>
 800bdae:	9b06      	ldr	r3, [sp, #24]
 800bdb0:	aa20      	add	r2, sp, #128	@ 0x80
 800bdb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bdb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800bdba:	f04f 0800 	mov.w	r8, #0
 800bdbe:	9b00      	ldr	r3, [sp, #0]
 800bdc0:	4598      	cmp	r8, r3
 800bdc2:	dc31      	bgt.n	800be28 <__kernel_rem_pio2+0xd8>
 800bdc4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c050 <__kernel_rem_pio2+0x300>
 800bdc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bdd0:	462f      	mov	r7, r5
 800bdd2:	2600      	movs	r6, #0
 800bdd4:	e01b      	b.n	800be0e <__kernel_rem_pio2+0xbe>
 800bdd6:	42ef      	cmn	r7, r5
 800bdd8:	d407      	bmi.n	800bdea <__kernel_rem_pio2+0x9a>
 800bdda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bdde:	f7f4 fb45 	bl	800046c <__aeabi_i2d>
 800bde2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bde6:	3501      	adds	r5, #1
 800bde8:	e7df      	b.n	800bdaa <__kernel_rem_pio2+0x5a>
 800bdea:	ec51 0b18 	vmov	r0, r1, d8
 800bdee:	e7f8      	b.n	800bde2 <__kernel_rem_pio2+0x92>
 800bdf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bdf8:	f7f4 fba2 	bl	8000540 <__aeabi_dmul>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be04:	f7f4 f9e6 	bl	80001d4 <__adddf3>
 800be08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be0c:	3601      	adds	r6, #1
 800be0e:	9b05      	ldr	r3, [sp, #20]
 800be10:	429e      	cmp	r6, r3
 800be12:	f1a7 0708 	sub.w	r7, r7, #8
 800be16:	ddeb      	ble.n	800bdf0 <__kernel_rem_pio2+0xa0>
 800be18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be1c:	f108 0801 	add.w	r8, r8, #1
 800be20:	ecaa 7b02 	vstmia	sl!, {d7}
 800be24:	3508      	adds	r5, #8
 800be26:	e7ca      	b.n	800bdbe <__kernel_rem_pio2+0x6e>
 800be28:	9b00      	ldr	r3, [sp, #0]
 800be2a:	f8dd 8000 	ldr.w	r8, [sp]
 800be2e:	aa0c      	add	r2, sp, #48	@ 0x30
 800be30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be34:	930a      	str	r3, [sp, #40]	@ 0x28
 800be36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800be38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800be42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be44:	ab98      	add	r3, sp, #608	@ 0x260
 800be46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800be4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be52:	ac0c      	add	r4, sp, #48	@ 0x30
 800be54:	ab70      	add	r3, sp, #448	@ 0x1c0
 800be56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800be5a:	46a1      	mov	r9, r4
 800be5c:	46c2      	mov	sl, r8
 800be5e:	f1ba 0f00 	cmp.w	sl, #0
 800be62:	f1a5 0508 	sub.w	r5, r5, #8
 800be66:	dc77      	bgt.n	800bf58 <__kernel_rem_pio2+0x208>
 800be68:	4658      	mov	r0, fp
 800be6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800be6e:	f7ff feb3 	bl	800bbd8 <scalbn>
 800be72:	ec57 6b10 	vmov	r6, r7, d0
 800be76:	2200      	movs	r2, #0
 800be78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800be7c:	4630      	mov	r0, r6
 800be7e:	4639      	mov	r1, r7
 800be80:	f7f4 fb5e 	bl	8000540 <__aeabi_dmul>
 800be84:	ec41 0b10 	vmov	d0, r0, r1
 800be88:	f000 faba 	bl	800c400 <floor>
 800be8c:	4b75      	ldr	r3, [pc, #468]	@ (800c064 <__kernel_rem_pio2+0x314>)
 800be8e:	ec51 0b10 	vmov	r0, r1, d0
 800be92:	2200      	movs	r2, #0
 800be94:	f7f4 fb54 	bl	8000540 <__aeabi_dmul>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f7f4 f996 	bl	80001d0 <__aeabi_dsub>
 800bea4:	460f      	mov	r7, r1
 800bea6:	4606      	mov	r6, r0
 800bea8:	f7f4 fdfa 	bl	8000aa0 <__aeabi_d2iz>
 800beac:	9002      	str	r0, [sp, #8]
 800beae:	f7f4 fadd 	bl	800046c <__aeabi_i2d>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4630      	mov	r0, r6
 800beb8:	4639      	mov	r1, r7
 800beba:	f7f4 f989 	bl	80001d0 <__aeabi_dsub>
 800bebe:	f1bb 0f00 	cmp.w	fp, #0
 800bec2:	4606      	mov	r6, r0
 800bec4:	460f      	mov	r7, r1
 800bec6:	dd6c      	ble.n	800bfa2 <__kernel_rem_pio2+0x252>
 800bec8:	f108 31ff 	add.w	r1, r8, #4294967295
 800becc:	ab0c      	add	r3, sp, #48	@ 0x30
 800bece:	9d02      	ldr	r5, [sp, #8]
 800bed0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bed4:	f1cb 0018 	rsb	r0, fp, #24
 800bed8:	fa43 f200 	asr.w	r2, r3, r0
 800bedc:	4415      	add	r5, r2
 800bede:	4082      	lsls	r2, r0
 800bee0:	1a9b      	subs	r3, r3, r2
 800bee2:	aa0c      	add	r2, sp, #48	@ 0x30
 800bee4:	9502      	str	r5, [sp, #8]
 800bee6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800beea:	f1cb 0217 	rsb	r2, fp, #23
 800beee:	fa43 f902 	asr.w	r9, r3, r2
 800bef2:	f1b9 0f00 	cmp.w	r9, #0
 800bef6:	dd64      	ble.n	800bfc2 <__kernel_rem_pio2+0x272>
 800bef8:	9b02      	ldr	r3, [sp, #8]
 800befa:	2200      	movs	r2, #0
 800befc:	3301      	adds	r3, #1
 800befe:	9302      	str	r3, [sp, #8]
 800bf00:	4615      	mov	r5, r2
 800bf02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800bf06:	4590      	cmp	r8, r2
 800bf08:	f300 80b8 	bgt.w	800c07c <__kernel_rem_pio2+0x32c>
 800bf0c:	f1bb 0f00 	cmp.w	fp, #0
 800bf10:	dd07      	ble.n	800bf22 <__kernel_rem_pio2+0x1d2>
 800bf12:	f1bb 0f01 	cmp.w	fp, #1
 800bf16:	f000 80bf 	beq.w	800c098 <__kernel_rem_pio2+0x348>
 800bf1a:	f1bb 0f02 	cmp.w	fp, #2
 800bf1e:	f000 80c6 	beq.w	800c0ae <__kernel_rem_pio2+0x35e>
 800bf22:	f1b9 0f02 	cmp.w	r9, #2
 800bf26:	d14c      	bne.n	800bfc2 <__kernel_rem_pio2+0x272>
 800bf28:	4632      	mov	r2, r6
 800bf2a:	463b      	mov	r3, r7
 800bf2c:	494e      	ldr	r1, [pc, #312]	@ (800c068 <__kernel_rem_pio2+0x318>)
 800bf2e:	2000      	movs	r0, #0
 800bf30:	f7f4 f94e 	bl	80001d0 <__aeabi_dsub>
 800bf34:	4606      	mov	r6, r0
 800bf36:	460f      	mov	r7, r1
 800bf38:	2d00      	cmp	r5, #0
 800bf3a:	d042      	beq.n	800bfc2 <__kernel_rem_pio2+0x272>
 800bf3c:	4658      	mov	r0, fp
 800bf3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c058 <__kernel_rem_pio2+0x308>
 800bf42:	f7ff fe49 	bl	800bbd8 <scalbn>
 800bf46:	4630      	mov	r0, r6
 800bf48:	4639      	mov	r1, r7
 800bf4a:	ec53 2b10 	vmov	r2, r3, d0
 800bf4e:	f7f4 f93f 	bl	80001d0 <__aeabi_dsub>
 800bf52:	4606      	mov	r6, r0
 800bf54:	460f      	mov	r7, r1
 800bf56:	e034      	b.n	800bfc2 <__kernel_rem_pio2+0x272>
 800bf58:	4b44      	ldr	r3, [pc, #272]	@ (800c06c <__kernel_rem_pio2+0x31c>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf60:	f7f4 faee 	bl	8000540 <__aeabi_dmul>
 800bf64:	f7f4 fd9c 	bl	8000aa0 <__aeabi_d2iz>
 800bf68:	f7f4 fa80 	bl	800046c <__aeabi_i2d>
 800bf6c:	4b40      	ldr	r3, [pc, #256]	@ (800c070 <__kernel_rem_pio2+0x320>)
 800bf6e:	2200      	movs	r2, #0
 800bf70:	4606      	mov	r6, r0
 800bf72:	460f      	mov	r7, r1
 800bf74:	f7f4 fae4 	bl	8000540 <__aeabi_dmul>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf80:	f7f4 f926 	bl	80001d0 <__aeabi_dsub>
 800bf84:	f7f4 fd8c 	bl	8000aa0 <__aeabi_d2iz>
 800bf88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf8c:	f849 0b04 	str.w	r0, [r9], #4
 800bf90:	4639      	mov	r1, r7
 800bf92:	4630      	mov	r0, r6
 800bf94:	f7f4 f91e 	bl	80001d4 <__adddf3>
 800bf98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfa0:	e75d      	b.n	800be5e <__kernel_rem_pio2+0x10e>
 800bfa2:	d107      	bne.n	800bfb4 <__kernel_rem_pio2+0x264>
 800bfa4:	f108 33ff 	add.w	r3, r8, #4294967295
 800bfa8:	aa0c      	add	r2, sp, #48	@ 0x30
 800bfaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bfb2:	e79e      	b.n	800bef2 <__kernel_rem_pio2+0x1a2>
 800bfb4:	4b2f      	ldr	r3, [pc, #188]	@ (800c074 <__kernel_rem_pio2+0x324>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f7f4 fd48 	bl	8000a4c <__aeabi_dcmpge>
 800bfbc:	2800      	cmp	r0, #0
 800bfbe:	d143      	bne.n	800c048 <__kernel_rem_pio2+0x2f8>
 800bfc0:	4681      	mov	r9, r0
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	4639      	mov	r1, r7
 800bfca:	f7f4 fd21 	bl	8000a10 <__aeabi_dcmpeq>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f000 80bf 	beq.w	800c152 <__kernel_rem_pio2+0x402>
 800bfd4:	f108 33ff 	add.w	r3, r8, #4294967295
 800bfd8:	2200      	movs	r2, #0
 800bfda:	9900      	ldr	r1, [sp, #0]
 800bfdc:	428b      	cmp	r3, r1
 800bfde:	da6e      	bge.n	800c0be <__kernel_rem_pio2+0x36e>
 800bfe0:	2a00      	cmp	r2, #0
 800bfe2:	f000 8089 	beq.w	800c0f8 <__kernel_rem_pio2+0x3a8>
 800bfe6:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfea:	ab0c      	add	r3, sp, #48	@ 0x30
 800bfec:	f1ab 0b18 	sub.w	fp, fp, #24
 800bff0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d0f6      	beq.n	800bfe6 <__kernel_rem_pio2+0x296>
 800bff8:	4658      	mov	r0, fp
 800bffa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c058 <__kernel_rem_pio2+0x308>
 800bffe:	f7ff fdeb 	bl	800bbd8 <scalbn>
 800c002:	f108 0301 	add.w	r3, r8, #1
 800c006:	00da      	lsls	r2, r3, #3
 800c008:	9205      	str	r2, [sp, #20]
 800c00a:	ec55 4b10 	vmov	r4, r5, d0
 800c00e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c010:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c06c <__kernel_rem_pio2+0x31c>
 800c014:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c018:	4646      	mov	r6, r8
 800c01a:	f04f 0a00 	mov.w	sl, #0
 800c01e:	2e00      	cmp	r6, #0
 800c020:	f280 80cf 	bge.w	800c1c2 <__kernel_rem_pio2+0x472>
 800c024:	4644      	mov	r4, r8
 800c026:	2c00      	cmp	r4, #0
 800c028:	f2c0 80fd 	blt.w	800c226 <__kernel_rem_pio2+0x4d6>
 800c02c:	4b12      	ldr	r3, [pc, #72]	@ (800c078 <__kernel_rem_pio2+0x328>)
 800c02e:	461f      	mov	r7, r3
 800c030:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c036:	9306      	str	r3, [sp, #24]
 800c038:	f04f 0a00 	mov.w	sl, #0
 800c03c:	f04f 0b00 	mov.w	fp, #0
 800c040:	2600      	movs	r6, #0
 800c042:	eba8 0504 	sub.w	r5, r8, r4
 800c046:	e0e2      	b.n	800c20e <__kernel_rem_pio2+0x4be>
 800c048:	f04f 0902 	mov.w	r9, #2
 800c04c:	e754      	b.n	800bef8 <__kernel_rem_pio2+0x1a8>
 800c04e:	bf00      	nop
	...
 800c05c:	3ff00000 	.word	0x3ff00000
 800c060:	0800c7f0 	.word	0x0800c7f0
 800c064:	40200000 	.word	0x40200000
 800c068:	3ff00000 	.word	0x3ff00000
 800c06c:	3e700000 	.word	0x3e700000
 800c070:	41700000 	.word	0x41700000
 800c074:	3fe00000 	.word	0x3fe00000
 800c078:	0800c7b0 	.word	0x0800c7b0
 800c07c:	f854 3b04 	ldr.w	r3, [r4], #4
 800c080:	b945      	cbnz	r5, 800c094 <__kernel_rem_pio2+0x344>
 800c082:	b123      	cbz	r3, 800c08e <__kernel_rem_pio2+0x33e>
 800c084:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c088:	f844 3c04 	str.w	r3, [r4, #-4]
 800c08c:	2301      	movs	r3, #1
 800c08e:	3201      	adds	r2, #1
 800c090:	461d      	mov	r5, r3
 800c092:	e738      	b.n	800bf06 <__kernel_rem_pio2+0x1b6>
 800c094:	1acb      	subs	r3, r1, r3
 800c096:	e7f7      	b.n	800c088 <__kernel_rem_pio2+0x338>
 800c098:	f108 32ff 	add.w	r2, r8, #4294967295
 800c09c:	ab0c      	add	r3, sp, #48	@ 0x30
 800c09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c0a6:	a90c      	add	r1, sp, #48	@ 0x30
 800c0a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c0ac:	e739      	b.n	800bf22 <__kernel_rem_pio2+0x1d2>
 800c0ae:	f108 32ff 	add.w	r2, r8, #4294967295
 800c0b2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c0bc:	e7f3      	b.n	800c0a6 <__kernel_rem_pio2+0x356>
 800c0be:	a90c      	add	r1, sp, #48	@ 0x30
 800c0c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	e787      	b.n	800bfda <__kernel_rem_pio2+0x28a>
 800c0ca:	3401      	adds	r4, #1
 800c0cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0d0:	2a00      	cmp	r2, #0
 800c0d2:	d0fa      	beq.n	800c0ca <__kernel_rem_pio2+0x37a>
 800c0d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c0da:	eb0d 0503 	add.w	r5, sp, r3
 800c0de:	9b06      	ldr	r3, [sp, #24]
 800c0e0:	aa20      	add	r2, sp, #128	@ 0x80
 800c0e2:	4443      	add	r3, r8
 800c0e4:	f108 0701 	add.w	r7, r8, #1
 800c0e8:	3d98      	subs	r5, #152	@ 0x98
 800c0ea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c0ee:	4444      	add	r4, r8
 800c0f0:	42bc      	cmp	r4, r7
 800c0f2:	da04      	bge.n	800c0fe <__kernel_rem_pio2+0x3ae>
 800c0f4:	46a0      	mov	r8, r4
 800c0f6:	e6a2      	b.n	800be3e <__kernel_rem_pio2+0xee>
 800c0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0fa:	2401      	movs	r4, #1
 800c0fc:	e7e6      	b.n	800c0cc <__kernel_rem_pio2+0x37c>
 800c0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c100:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c104:	f7f4 f9b2 	bl	800046c <__aeabi_i2d>
 800c108:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c3d0 <__kernel_rem_pio2+0x680>
 800c10c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c110:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c118:	46b2      	mov	sl, r6
 800c11a:	f04f 0800 	mov.w	r8, #0
 800c11e:	9b05      	ldr	r3, [sp, #20]
 800c120:	4598      	cmp	r8, r3
 800c122:	dd05      	ble.n	800c130 <__kernel_rem_pio2+0x3e0>
 800c124:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c128:	3701      	adds	r7, #1
 800c12a:	eca5 7b02 	vstmia	r5!, {d7}
 800c12e:	e7df      	b.n	800c0f0 <__kernel_rem_pio2+0x3a0>
 800c130:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c134:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c138:	f7f4 fa02 	bl	8000540 <__aeabi_dmul>
 800c13c:	4602      	mov	r2, r0
 800c13e:	460b      	mov	r3, r1
 800c140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c144:	f7f4 f846 	bl	80001d4 <__adddf3>
 800c148:	f108 0801 	add.w	r8, r8, #1
 800c14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c150:	e7e5      	b.n	800c11e <__kernel_rem_pio2+0x3ce>
 800c152:	f1cb 0000 	rsb	r0, fp, #0
 800c156:	ec47 6b10 	vmov	d0, r6, r7
 800c15a:	f7ff fd3d 	bl	800bbd8 <scalbn>
 800c15e:	ec55 4b10 	vmov	r4, r5, d0
 800c162:	4b9d      	ldr	r3, [pc, #628]	@ (800c3d8 <__kernel_rem_pio2+0x688>)
 800c164:	2200      	movs	r2, #0
 800c166:	4620      	mov	r0, r4
 800c168:	4629      	mov	r1, r5
 800c16a:	f7f4 fc6f 	bl	8000a4c <__aeabi_dcmpge>
 800c16e:	b300      	cbz	r0, 800c1b2 <__kernel_rem_pio2+0x462>
 800c170:	4b9a      	ldr	r3, [pc, #616]	@ (800c3dc <__kernel_rem_pio2+0x68c>)
 800c172:	2200      	movs	r2, #0
 800c174:	4620      	mov	r0, r4
 800c176:	4629      	mov	r1, r5
 800c178:	f7f4 f9e2 	bl	8000540 <__aeabi_dmul>
 800c17c:	f7f4 fc90 	bl	8000aa0 <__aeabi_d2iz>
 800c180:	4606      	mov	r6, r0
 800c182:	f7f4 f973 	bl	800046c <__aeabi_i2d>
 800c186:	4b94      	ldr	r3, [pc, #592]	@ (800c3d8 <__kernel_rem_pio2+0x688>)
 800c188:	2200      	movs	r2, #0
 800c18a:	f7f4 f9d9 	bl	8000540 <__aeabi_dmul>
 800c18e:	460b      	mov	r3, r1
 800c190:	4602      	mov	r2, r0
 800c192:	4629      	mov	r1, r5
 800c194:	4620      	mov	r0, r4
 800c196:	f7f4 f81b 	bl	80001d0 <__aeabi_dsub>
 800c19a:	f7f4 fc81 	bl	8000aa0 <__aeabi_d2iz>
 800c19e:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1a0:	f10b 0b18 	add.w	fp, fp, #24
 800c1a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c1a8:	f108 0801 	add.w	r8, r8, #1
 800c1ac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c1b0:	e722      	b.n	800bff8 <__kernel_rem_pio2+0x2a8>
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	f7f4 fc73 	bl	8000aa0 <__aeabi_d2iz>
 800c1ba:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c1c0:	e71a      	b.n	800bff8 <__kernel_rem_pio2+0x2a8>
 800c1c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c1c8:	f7f4 f950 	bl	800046c <__aeabi_i2d>
 800c1cc:	4622      	mov	r2, r4
 800c1ce:	462b      	mov	r3, r5
 800c1d0:	f7f4 f9b6 	bl	8000540 <__aeabi_dmul>
 800c1d4:	4652      	mov	r2, sl
 800c1d6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c1da:	465b      	mov	r3, fp
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f7f4 f9ae 	bl	8000540 <__aeabi_dmul>
 800c1e4:	3e01      	subs	r6, #1
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	460d      	mov	r5, r1
 800c1ea:	e718      	b.n	800c01e <__kernel_rem_pio2+0x2ce>
 800c1ec:	9906      	ldr	r1, [sp, #24]
 800c1ee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c1f2:	9106      	str	r1, [sp, #24]
 800c1f4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c1f8:	f7f4 f9a2 	bl	8000540 <__aeabi_dmul>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	4650      	mov	r0, sl
 800c202:	4659      	mov	r1, fp
 800c204:	f7f3 ffe6 	bl	80001d4 <__adddf3>
 800c208:	3601      	adds	r6, #1
 800c20a:	4682      	mov	sl, r0
 800c20c:	468b      	mov	fp, r1
 800c20e:	9b00      	ldr	r3, [sp, #0]
 800c210:	429e      	cmp	r6, r3
 800c212:	dc01      	bgt.n	800c218 <__kernel_rem_pio2+0x4c8>
 800c214:	42b5      	cmp	r5, r6
 800c216:	dae9      	bge.n	800c1ec <__kernel_rem_pio2+0x49c>
 800c218:	ab48      	add	r3, sp, #288	@ 0x120
 800c21a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c21e:	e9c5 ab00 	strd	sl, fp, [r5]
 800c222:	3c01      	subs	r4, #1
 800c224:	e6ff      	b.n	800c026 <__kernel_rem_pio2+0x2d6>
 800c226:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c228:	2b02      	cmp	r3, #2
 800c22a:	dc0b      	bgt.n	800c244 <__kernel_rem_pio2+0x4f4>
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	dc39      	bgt.n	800c2a4 <__kernel_rem_pio2+0x554>
 800c230:	d05d      	beq.n	800c2ee <__kernel_rem_pio2+0x59e>
 800c232:	9b02      	ldr	r3, [sp, #8]
 800c234:	f003 0007 	and.w	r0, r3, #7
 800c238:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c23c:	ecbd 8b02 	vpop	{d8}
 800c240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c244:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c246:	2b03      	cmp	r3, #3
 800c248:	d1f3      	bne.n	800c232 <__kernel_rem_pio2+0x4e2>
 800c24a:	9b05      	ldr	r3, [sp, #20]
 800c24c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c250:	eb0d 0403 	add.w	r4, sp, r3
 800c254:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c258:	4625      	mov	r5, r4
 800c25a:	46c2      	mov	sl, r8
 800c25c:	f1ba 0f00 	cmp.w	sl, #0
 800c260:	f1a5 0508 	sub.w	r5, r5, #8
 800c264:	dc6b      	bgt.n	800c33e <__kernel_rem_pio2+0x5ee>
 800c266:	4645      	mov	r5, r8
 800c268:	2d01      	cmp	r5, #1
 800c26a:	f1a4 0408 	sub.w	r4, r4, #8
 800c26e:	f300 8087 	bgt.w	800c380 <__kernel_rem_pio2+0x630>
 800c272:	9c05      	ldr	r4, [sp, #20]
 800c274:	ab48      	add	r3, sp, #288	@ 0x120
 800c276:	441c      	add	r4, r3
 800c278:	2000      	movs	r0, #0
 800c27a:	2100      	movs	r1, #0
 800c27c:	f1b8 0f01 	cmp.w	r8, #1
 800c280:	f300 809c 	bgt.w	800c3bc <__kernel_rem_pio2+0x66c>
 800c284:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c288:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c28c:	f1b9 0f00 	cmp.w	r9, #0
 800c290:	f040 80a6 	bne.w	800c3e0 <__kernel_rem_pio2+0x690>
 800c294:	9b04      	ldr	r3, [sp, #16]
 800c296:	e9c3 7800 	strd	r7, r8, [r3]
 800c29a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c29e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c2a2:	e7c6      	b.n	800c232 <__kernel_rem_pio2+0x4e2>
 800c2a4:	9d05      	ldr	r5, [sp, #20]
 800c2a6:	ab48      	add	r3, sp, #288	@ 0x120
 800c2a8:	441d      	add	r5, r3
 800c2aa:	4644      	mov	r4, r8
 800c2ac:	2000      	movs	r0, #0
 800c2ae:	2100      	movs	r1, #0
 800c2b0:	2c00      	cmp	r4, #0
 800c2b2:	da35      	bge.n	800c320 <__kernel_rem_pio2+0x5d0>
 800c2b4:	f1b9 0f00 	cmp.w	r9, #0
 800c2b8:	d038      	beq.n	800c32c <__kernel_rem_pio2+0x5dc>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2c0:	9c04      	ldr	r4, [sp, #16]
 800c2c2:	e9c4 2300 	strd	r2, r3, [r4]
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c2ce:	f7f3 ff7f 	bl	80001d0 <__aeabi_dsub>
 800c2d2:	ad4a      	add	r5, sp, #296	@ 0x128
 800c2d4:	2401      	movs	r4, #1
 800c2d6:	45a0      	cmp	r8, r4
 800c2d8:	da2b      	bge.n	800c332 <__kernel_rem_pio2+0x5e2>
 800c2da:	f1b9 0f00 	cmp.w	r9, #0
 800c2de:	d002      	beq.n	800c2e6 <__kernel_rem_pio2+0x596>
 800c2e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	9b04      	ldr	r3, [sp, #16]
 800c2e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c2ec:	e7a1      	b.n	800c232 <__kernel_rem_pio2+0x4e2>
 800c2ee:	9c05      	ldr	r4, [sp, #20]
 800c2f0:	ab48      	add	r3, sp, #288	@ 0x120
 800c2f2:	441c      	add	r4, r3
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	f1b8 0f00 	cmp.w	r8, #0
 800c2fc:	da09      	bge.n	800c312 <__kernel_rem_pio2+0x5c2>
 800c2fe:	f1b9 0f00 	cmp.w	r9, #0
 800c302:	d002      	beq.n	800c30a <__kernel_rem_pio2+0x5ba>
 800c304:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c308:	4619      	mov	r1, r3
 800c30a:	9b04      	ldr	r3, [sp, #16]
 800c30c:	e9c3 0100 	strd	r0, r1, [r3]
 800c310:	e78f      	b.n	800c232 <__kernel_rem_pio2+0x4e2>
 800c312:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c316:	f7f3 ff5d 	bl	80001d4 <__adddf3>
 800c31a:	f108 38ff 	add.w	r8, r8, #4294967295
 800c31e:	e7eb      	b.n	800c2f8 <__kernel_rem_pio2+0x5a8>
 800c320:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c324:	f7f3 ff56 	bl	80001d4 <__adddf3>
 800c328:	3c01      	subs	r4, #1
 800c32a:	e7c1      	b.n	800c2b0 <__kernel_rem_pio2+0x560>
 800c32c:	4602      	mov	r2, r0
 800c32e:	460b      	mov	r3, r1
 800c330:	e7c6      	b.n	800c2c0 <__kernel_rem_pio2+0x570>
 800c332:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c336:	f7f3 ff4d 	bl	80001d4 <__adddf3>
 800c33a:	3401      	adds	r4, #1
 800c33c:	e7cb      	b.n	800c2d6 <__kernel_rem_pio2+0x586>
 800c33e:	ed95 7b00 	vldr	d7, [r5]
 800c342:	ed8d 7b00 	vstr	d7, [sp]
 800c346:	ed95 7b02 	vldr	d7, [r5, #8]
 800c34a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c34e:	ec53 2b17 	vmov	r2, r3, d7
 800c352:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c356:	f7f3 ff3d 	bl	80001d4 <__adddf3>
 800c35a:	4602      	mov	r2, r0
 800c35c:	460b      	mov	r3, r1
 800c35e:	4606      	mov	r6, r0
 800c360:	460f      	mov	r7, r1
 800c362:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c366:	f7f3 ff33 	bl	80001d0 <__aeabi_dsub>
 800c36a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c36e:	f7f3 ff31 	bl	80001d4 <__adddf3>
 800c372:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c376:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c37a:	e9c5 6700 	strd	r6, r7, [r5]
 800c37e:	e76d      	b.n	800c25c <__kernel_rem_pio2+0x50c>
 800c380:	ed94 7b00 	vldr	d7, [r4]
 800c384:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c388:	ec51 0b17 	vmov	r0, r1, d7
 800c38c:	4652      	mov	r2, sl
 800c38e:	465b      	mov	r3, fp
 800c390:	ed8d 7b00 	vstr	d7, [sp]
 800c394:	f7f3 ff1e 	bl	80001d4 <__adddf3>
 800c398:	4602      	mov	r2, r0
 800c39a:	460b      	mov	r3, r1
 800c39c:	4606      	mov	r6, r0
 800c39e:	460f      	mov	r7, r1
 800c3a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3a4:	f7f3 ff14 	bl	80001d0 <__aeabi_dsub>
 800c3a8:	4652      	mov	r2, sl
 800c3aa:	465b      	mov	r3, fp
 800c3ac:	f7f3 ff12 	bl	80001d4 <__adddf3>
 800c3b0:	3d01      	subs	r5, #1
 800c3b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c3b6:	e9c4 6700 	strd	r6, r7, [r4]
 800c3ba:	e755      	b.n	800c268 <__kernel_rem_pio2+0x518>
 800c3bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c3c0:	f7f3 ff08 	bl	80001d4 <__adddf3>
 800c3c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3c8:	e758      	b.n	800c27c <__kernel_rem_pio2+0x52c>
 800c3ca:	bf00      	nop
 800c3cc:	f3af 8000 	nop.w
	...
 800c3d8:	41700000 	.word	0x41700000
 800c3dc:	3e700000 	.word	0x3e700000
 800c3e0:	9b04      	ldr	r3, [sp, #16]
 800c3e2:	9a04      	ldr	r2, [sp, #16]
 800c3e4:	601f      	str	r7, [r3, #0]
 800c3e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c3ea:	605c      	str	r4, [r3, #4]
 800c3ec:	609d      	str	r5, [r3, #8]
 800c3ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c3f2:	60d3      	str	r3, [r2, #12]
 800c3f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c3f8:	6110      	str	r0, [r2, #16]
 800c3fa:	6153      	str	r3, [r2, #20]
 800c3fc:	e719      	b.n	800c232 <__kernel_rem_pio2+0x4e2>
 800c3fe:	bf00      	nop

0800c400 <floor>:
 800c400:	ec51 0b10 	vmov	r0, r1, d0
 800c404:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c40c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c410:	2e13      	cmp	r6, #19
 800c412:	460c      	mov	r4, r1
 800c414:	4605      	mov	r5, r0
 800c416:	4680      	mov	r8, r0
 800c418:	dc34      	bgt.n	800c484 <floor+0x84>
 800c41a:	2e00      	cmp	r6, #0
 800c41c:	da17      	bge.n	800c44e <floor+0x4e>
 800c41e:	a332      	add	r3, pc, #200	@ (adr r3, 800c4e8 <floor+0xe8>)
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	f7f3 fed6 	bl	80001d4 <__adddf3>
 800c428:	2200      	movs	r2, #0
 800c42a:	2300      	movs	r3, #0
 800c42c:	f7f4 fb18 	bl	8000a60 <__aeabi_dcmpgt>
 800c430:	b150      	cbz	r0, 800c448 <floor+0x48>
 800c432:	2c00      	cmp	r4, #0
 800c434:	da55      	bge.n	800c4e2 <floor+0xe2>
 800c436:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c43a:	432c      	orrs	r4, r5
 800c43c:	2500      	movs	r5, #0
 800c43e:	42ac      	cmp	r4, r5
 800c440:	4c2b      	ldr	r4, [pc, #172]	@ (800c4f0 <floor+0xf0>)
 800c442:	bf08      	it	eq
 800c444:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c448:	4621      	mov	r1, r4
 800c44a:	4628      	mov	r0, r5
 800c44c:	e023      	b.n	800c496 <floor+0x96>
 800c44e:	4f29      	ldr	r7, [pc, #164]	@ (800c4f4 <floor+0xf4>)
 800c450:	4137      	asrs	r7, r6
 800c452:	ea01 0307 	and.w	r3, r1, r7
 800c456:	4303      	orrs	r3, r0
 800c458:	d01d      	beq.n	800c496 <floor+0x96>
 800c45a:	a323      	add	r3, pc, #140	@ (adr r3, 800c4e8 <floor+0xe8>)
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	f7f3 feb8 	bl	80001d4 <__adddf3>
 800c464:	2200      	movs	r2, #0
 800c466:	2300      	movs	r3, #0
 800c468:	f7f4 fafa 	bl	8000a60 <__aeabi_dcmpgt>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d0eb      	beq.n	800c448 <floor+0x48>
 800c470:	2c00      	cmp	r4, #0
 800c472:	bfbe      	ittt	lt
 800c474:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c478:	4133      	asrlt	r3, r6
 800c47a:	18e4      	addlt	r4, r4, r3
 800c47c:	ea24 0407 	bic.w	r4, r4, r7
 800c480:	2500      	movs	r5, #0
 800c482:	e7e1      	b.n	800c448 <floor+0x48>
 800c484:	2e33      	cmp	r6, #51	@ 0x33
 800c486:	dd0a      	ble.n	800c49e <floor+0x9e>
 800c488:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c48c:	d103      	bne.n	800c496 <floor+0x96>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	f7f3 fe9f 	bl	80001d4 <__adddf3>
 800c496:	ec41 0b10 	vmov	d0, r0, r1
 800c49a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c49e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c4a2:	f04f 37ff 	mov.w	r7, #4294967295
 800c4a6:	40df      	lsrs	r7, r3
 800c4a8:	4207      	tst	r7, r0
 800c4aa:	d0f4      	beq.n	800c496 <floor+0x96>
 800c4ac:	a30e      	add	r3, pc, #56	@ (adr r3, 800c4e8 <floor+0xe8>)
 800c4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b2:	f7f3 fe8f 	bl	80001d4 <__adddf3>
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f7f4 fad1 	bl	8000a60 <__aeabi_dcmpgt>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d0c2      	beq.n	800c448 <floor+0x48>
 800c4c2:	2c00      	cmp	r4, #0
 800c4c4:	da0a      	bge.n	800c4dc <floor+0xdc>
 800c4c6:	2e14      	cmp	r6, #20
 800c4c8:	d101      	bne.n	800c4ce <floor+0xce>
 800c4ca:	3401      	adds	r4, #1
 800c4cc:	e006      	b.n	800c4dc <floor+0xdc>
 800c4ce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	40b3      	lsls	r3, r6
 800c4d6:	441d      	add	r5, r3
 800c4d8:	4545      	cmp	r5, r8
 800c4da:	d3f6      	bcc.n	800c4ca <floor+0xca>
 800c4dc:	ea25 0507 	bic.w	r5, r5, r7
 800c4e0:	e7b2      	b.n	800c448 <floor+0x48>
 800c4e2:	2500      	movs	r5, #0
 800c4e4:	462c      	mov	r4, r5
 800c4e6:	e7af      	b.n	800c448 <floor+0x48>
 800c4e8:	8800759c 	.word	0x8800759c
 800c4ec:	7e37e43c 	.word	0x7e37e43c
 800c4f0:	bff00000 	.word	0xbff00000
 800c4f4:	000fffff 	.word	0x000fffff

0800c4f8 <_init>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	bf00      	nop
 800c4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4fe:	bc08      	pop	{r3}
 800c500:	469e      	mov	lr, r3
 800c502:	4770      	bx	lr

0800c504 <_fini>:
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	bf00      	nop
 800c508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50a:	bc08      	pop	{r3}
 800c50c:	469e      	mov	lr, r3
 800c50e:	4770      	bx	lr
